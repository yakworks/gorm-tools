# circleCI build file
version: 2.1

executors:
  builder-large:  # 4cpus 8gb ram
    resource_class: 'large'
    environment:
      GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4 -Dorg.gradle.console=plain -Dorg.gradle.jvmargs=-Xmx8000m"
    docker:
      - image: yakworks/builder:jdk11
  builder-medium: # 2cpus 4gb ram
    resource_class: 'medium'
    environment:
      GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.console=plain"
    docker:
      - image: yakworks/builder:jdk11

commands:
  restore_gradle_cache:
    description: "Common pattern for gradle cache"
    steps:
      - run: make gradle.cache-key-file
      - restore_cache:
          key: gradle-{{ checksum "cache-key.tmp" }}
      - restore_cache:
          key: gradlew-75-{{ checksum "gradlew" }}

  restore_build_cache:
    description: "combines version.props with day date to use as the key"
    steps:
      # combines version.props with today to use as the key
      - run: make circle.day-version-cache-key-file
      - restore_cache:
          key: build-{{ .Branch }}-{{ checksum "day-version-cache-key.tmp" }}

  save_gradle_cache:
    description: "saves gradle caches"
    steps:
      - save_cache:
          paths: ["~/.gradle/wrapper"]
          key: gradlew-75-{{ checksum "gradlew" }}
      - save_cache:
          paths: [ "~/.gradle/caches" ]
          key: gradle-{{ checksum "cache-key.tmp" }}

  save_build_cache:
    description: "saves build cache"
    steps:
      - save_cache:
          paths: [
            ".gradle", ".build-cache",
            "./gorm-test-domain/build", "./gorm-test-support/build", "./gorm-tools/build",
            "./gorm-audit/build", "./gorm-etl/build", "./gorm-rest/build",
            "./security/boot-security/build", "./security/boot-security-gorm/build", "./security/security-core/build",
            "./rally-domain/build"
          ]
          key: build-{{ .Branch }}-{{ checksum "day-version-cache-key.tmp" }}

  save_workspace:
    description: "saves workspace"
    steps:
      - persist_to_workspace:
          root: .
          paths: [ ".gradle", ".build-cache", "*/build" ]

# ---------------------------------------------------------------------------
jobs:
  build:
    executor: builder-large
    steps:
      - checkout
      - restore_gradle_cache
      - restore_build_cache

      - run:
          name: ✔︎ -- assemble
          command: ./gradlew assemble -x testify:assemble -x benchmarks:assemble -x rally-api:assemble -x hello-boot-security:check

      - save_gradle_cache
      - save_workspace
      - save_build_cache

  gorm-tools:
    executor: builder-large
    steps:
      - checkout
      - restore_gradle_cache
      - attach_workspace:
          at: .
      - run:
          name: ✔︎ -- check
          command: |
            ./gradlew check -x rally-domain:check -x hello-boot-security:check \
            -x testify:check -x benchmarks:check -x rally-api:check

      - run: make gradle.merge-test-results
      - store_test_results: { path: build/test-results/ }
      - store_artifacts:
          path: build/reports/

  rally:
    executor: builder-medium
    steps:
      - checkout
      - restore_gradle_cache
      - attach_workspace:
          at: .

      - run: ./gradlew rally-domain:check --parallel
      - run: make gradle.merge-test-results
      - store_test_results: { path: build/test-results/ }
      - store_artifacts:
          path: rally-domain/build/reports/
          destination: reports/rally-domain

  examples:
    executor: builder-large
    steps:
      - checkout
      - restore_gradle_cache
      - attach_workspace:
          at: .
      - run: ./gradlew rally-api:check testify:check hello-boot-security:check --parallel
      - run: make gradle.merge-test-results
      - store_test_results: { path: build/test-results/ }
      - store_artifacts:
          path: build/reports/
          destination: reports

  ship-gh-pages:
    docker:
      - image: yakworks/docmark

    steps:
      - checkout
      # download vault and decrypts
      - run: BOT_SIGN_COMMITS=false make git.config-bot-user # configs the bot user for git
      - run: BOT_SIGN_COMMITS=false make ship.gh-pages

  ship-it:
    executor: builder-large
    steps:
      - checkout
      - restore_gradle_cache
      - attach_workspace:
          at: .

      # download vault and decrypts
      - run: make vault.decrypt
      # sets up git config, kubectl and docker login
      - run: make ship.authorize
      # publish libs, push docker, kubernetes deploy
      - run: make ship.release
      # add to changelog, creates a release to github, rolls version.props and pushes changes to github
      # only happens if IS_RELEASABLE, meaning if its a snapshot then it skips this
      - run: make ship.version

workflows:
  build-flow:
    jobs:
      - build:
          context: bot-context #context with shared ENV vars
      - gorm-tools:
          context: bot-context #context with shared ENV vars
          requires: [ build ]
      - rally:
          context: bot-context #context with shared ENV vars
          requires: [ build ]
      - examples:
          context: bot-context #context with shared ENV vars
          requires: [ build ]
      - ship-gh-pages:
          context: bot-context
          requires: [ build ]
          filters: { branches: { only: [ master, /release\/.*/, dev ] } }
      - ship-it:
          context: bot-context
          requires: [build, gorm-tools, rally, examples]
          filters: { branches: { only: [ master, /release\/.*/, dev ] } }
