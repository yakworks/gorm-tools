//It all starts here
buildscript {
  repositories {
    mavenLocal()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    classpath "org.grails.plugins:hibernate5:$vGormHibernate"
    // classpath "org.grails.plugins:views-gradle:2.0.2"
    classpath "org.yakworks:gradle-plugins:$vShipyak"
    classpath "org.grails.plugins:views-gradle:$vViews"
  }
}

group = "org.yakworks"

apply plugin: 'yakworks.shipyak' //our opinionated defaults for gradle groovy & grails projects

// Good article on java-library and the api config vs implementation
// https://tomgregory.com/how-to-use-gradle-api-vs-implementation-dependencies-with-the-java-library-plugin/

subprojects {
  repositories {
    maven { url "https://repo.grails.org/grails/core" }
  }

  ['org.grails.grails-plugin', 'org.grails.grails-web'].each { plugId -> plugins.withId(plugId) {

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    dependencies {
      developmentOnly("org.springframework.boot:spring-boot-devtools")
      compileOnly "io.micronaut:micronaut-inject-groovy"


      implementation "org.springframework.boot:spring-boot-starter-logging"
      implementation "org.springframework.boot:spring-boot-starter-validation"
      implementation "org.springframework.boot:spring-boot-autoconfigure"
      implementation "org.grails:grails-core"
      implementation "org.springframework.boot:spring-boot-starter-actuator"
      implementation "org.springframework.boot:spring-boot-starter-tomcat"
      implementation "org.grails:grails-web-boot"
      implementation "org.grails:grails-logging"
      // implementation "org.grails:grails-plugin-rest"
      implementation "org.grails:grails-plugin-databinding"
      // implementation "org.grails:grails-plugin-i18n"
      implementation "org.grails:grails-plugin-services"
      // implementation "org.grails:grails-plugin-url-mappings"
      // implementation "org.grails:grails-plugin-interceptors"

      implementation "org.grails.plugins:cache"
      implementation "org.grails.plugins:events"

      // compile "io.activej:activej-http:5.0-rc3"
      // compile "io.activej:activej-launchers-common:5.0-rc3"
      implementation "io.activej:activej-launchers-http:5.0-rc3"
      implementation "io.activej:activej-boot:5.0-rc3"
      implementation "io.activej:activej-promise:5.0-rc3"

      // compile "org.grails:grails-datastore-gorm:7.0.8.RELEASE"
      implementation ("org.grails.plugins:hibernate5")
      //   {
      //   exclude group: 'org.grails', module: 'grails-datastore-gorm'
      // }

      implementation 'org.codehaus.groovy:groovy-dateutil'

      runtimeOnly "com.h2database:h2"

      testImplementation "com.zaxxer:HikariCP:$vHikari"

      testImplementation "io.micronaut:micronaut-inject-groovy"
      testImplementation "org.grails:grails-gorm-testing-support"

      testImplementation "org.mockito:mockito-core"
      testImplementation "org.grails:grails-gorm-testing-support"
      testImplementation "org.grails:grails-web-testing-support"
      testImplementation "org.grails.plugins:build-test-data:$vBuildTestData"
      testImplementation "org.grails:views-json-testing-support:$vViews"

    }

    // Defaults from https://github.com/radarsh/gradle-test-logger-plugin
    testlogger {
      // theme 'standard'
      showExceptions true
      showStandardStreams = true //shows the printlns in console
      showPassed false
      showSkipped true
      showFailed true
      // slowThreshold 2000 //if tests take longer than this will show time it took
      // showSummary true
      // showSimpleNames false
      // showPassed true
      // showSkipped true
      // showFailed true
      // showPassedStandardStreams true
      // showSkippedStandardStreams true
      // showFailedStandardStreams true
    }
  }} //end of plugins.withId iteration

  configurations {
    testImplementation.extendsFrom compileOnly //includes the compileOnly in tests too so we don't have to list twice
    all {
      resolutionStrategy.cacheChangingModulesFor 1, 'seconds' //when changing = true this sets the cache time
    }
    developmentOnly
    runtimeClasspath {
      extendsFrom developmentOnly
    }
  }

  tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
      forkOptions.jvmArgs = ['-Xmx1536m', '-Dgradle.projectDir=' + project.projectDir.absolutePath]
    }
  }
  // sets the path to sys properties so we can use it find grails-app/conf during AST
  // plugins.withId('groovy') {
  //   compileGroovy {
  //     groovyOptions.fork = true
  //     groovyOptions.forkOptions.jvmArgs = ['-Dgradle.projectDir=' + project.projectDir.absolutePath]
  //   }
  // }

  tasks.withType(Test) {
    useJUnitPlatform()
    //so that we can use in config and share resources/rootlocation across projects for testing
    systemProperty "gradle.rootProjectDir", rootProject.projectDir.absolutePath
    systemProperty "gradle.projectDir", project.projectDir.absolutePath
  }
}

ext.codenarcRuleset= '''
  // getRule('Println').enabled = false
  // getRule('AbcMetric').enabled = false
'''

task resolveConfigurations(group: "build setup", description: "Resolve and prefetch dependencies") {
  doLast {
    def resolve = {
      ConfigurationContainer configurations ->
        configurations
          .findAll({ Configuration c -> c.isCanBeResolved() })
          .each({ c -> c.resolve() })
    }
    project.rootProject.allprojects.each { subProject ->
      resolve(subProject.buildscript.configurations)
      resolve(subProject.configurations)
    }
  }
}
