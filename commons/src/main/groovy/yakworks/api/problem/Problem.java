package yakworks.api.problem;

import java.net.URI;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import yakworks.api.Result;
// import org.springframework.http.HttpStatus;

/**
 * This is the base error class.
 * See https://github.com/zalando/problem fro what this is based on.
 * The ApiError models follow https://datatracker.ietf.org/doc/html/rfc7807
 * From the spec
 * A problem details object can have the following members:
 *
 * - "type" (string) - A URI reference [RFC3986] that identifies the
 *   problem type.  This specification encourages that,
 *   when dereferenced, it provide human-readable documentation for the
 *   problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
 *   this member is not present, its value is assumed to be
 *   "about:blank".
 *
 * - "title" (string) - A short, human-readable summary of the problem
 * type.  It SHOULD NOT change from occurrence to occurrence of the
 * problem, except for purposes of localization (e.g., using
 * proactive content negotiation; see [RFC7231], Section 3.4).
 *
 * - "status" (number) - The HTTP status code ([RFC7231], Section 6)
 * generated by the origin server for this occurrence of the problem.
 *
 * - "detail" (string) - A human-readable explanation specific to this
 * occurrence of the problem.

 * - "instance" (string) - A URI reference that identifies the specific
 * occurrence of the problem.  It may or may not yield further
 * information if dereferenced.
 *
 * @author Joshua Burnett (@basejump)
 * @since 7.0.8
 */
public interface Problem extends Result<Object> {

    URI DEFAULT_TYPE = URI.create("about:blank");

    /**
     * An absolute URI that identifies the problem type. When dereferenced,
     * it SHOULD provide human-readable documentation for the problem type
     * (e.g., using HTML). When this member is not present, its value is
     * assumed to be "about:blank".
     *
     * @return an absolute URI that identifies this problem's type
     */
    default URI getType() {
        return DEFAULT_TYPE;
    }

    /**
     * A human readable explanation specific to this occurrence of the problem.
     *
     * @return A human readable explaination of this problem
     */
    default String getDetail() {
        return null;
    }

    /**
     * An absolute URI that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     *
     * @return an absolute URI that identifies this specific problem
     */
    // default URI getInstance() {
    //     return null;
    // }

    default Boolean getOk() {
        return false;
    }

    default List<ProblemFieldError> getErrors(){
        return Collections.emptyList();
    }

    static ApiProblem of(final Integer status) {
        return ApiProblem.of(status);
    }

    static ApiProblem of(Integer status, String title){
        return ApiProblem.of(status, title);
    }
    static ApiProblem of(Integer status, String title, String detail){
        return ApiProblem.of(status, title, detail);
    }
    //
    // static ApiProblem of(HttpStatus httpStatus, String title, String detail){
    //     return ApiProblem.of(httpStatus, title, detail);
    // }

}
