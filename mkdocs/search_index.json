{
    "docs": [
        {
            "location": "/",
            "text": "________                                           _.-````'-,_\n     /  _____/  ___________  _____                   ,-'`           `'-.,_\n    /   \\  ___ /  _ \\_  __ \\/     \\          /)     (\\       9ci's       '``-.\n    \\    \\_\\  (  \n<\n_> )  | \\/  Y Y  \\        ( ( .,-') )    Yak Works         ```\n     \\______  /\\____/|__|  |__|_|  /         \\ '   (_/                         !!\n            \\/                   \\/           |       /)           '           !!!\n  ___________           .__                   ^\\    ~'            '     !    !!!!\n  \\__    ___/___   ____ |  |   ______           !      _/! , !   !  ! !  !   !!!\n    |    | /  _ \\ /  _ \\|  |  /  ___/            \\Y,   |!!!  !  ! !!  !! !!!!!!!\n    |    |(  \n<\n_> |  \n<\n_> )  |__\\___ \\               `!!! !!!! !!  )!!!!!!!!!!!!!\n    |____| \\____/ \\____/|____/____  >               !!  ! ! \\( \\(  !!!|/!  |/!\n                                  \\/               /_(      /_(/_(    /_(  /_(   \n         Version: 7.3.83\n\n\n\n\n\nJAVA 11 required for 7.3.28+ to prep for spring 6.\n\u00b6\n\n\n6.1.x is for grails 3.3.x and gorm 6.1.x\n\n\n7.0.8-vX is for grails 4.x and gorm 7.0.8\n\n\n7.3.20+ is for grails 5.x and gorm 7.3+ , see notes\n\n\nrepositories {\n  //jcenter shutdown, use mavenCentral\n  mavenCentral()\n}\n...\nimplementation \"org.yakworks:gorm-tools:7.3.23\"\netc...\n\n\n\n\nLibs\n\u00b6\n\n\n\n\norg.yakworks:gorm-tools\n - main plugin for the base gorm-tools extensions\n\n\norg.yakworks:boot-security\n - implementations of the domains for security, audit stamp traits and events. \n\n\norg.yakworks:gorm-rest\n - foundation and ASTs for automated rest api from gorm domains\n\n\norg.yakworks:gorm-openapi\n - gorm swagger and json schema foundation. \n\n\norg.yakworks:gorm-etl\n - Extract, Transform, Load for creating Excel and CSV\n\n\n\n\nSecurity\n\n\n\n\norg.yakworks:security-core\n - Dependency free, Simple facade interfaces and impls for User/Subject and Roles/Permissions\n\n\norg.yakworks:boot-security\n - Spring Security with setup for basic, saml2, oauth. Depends only on spring boot and security\n\n\norg.yakworks:boot-security-gorm\n - gorm entities and support for Users/Roles\n\n\n\n\nRally\n\n\n\n\norg.yakworks:rally-domain\n - A sort of TCK. Opinionated CRM like models that serve as foundation for our business apps. Also used for examples and testing.\n\n\nexamples/rcm-api\n - Integration tests and another TCK app. front rally-domain with rest api and tests out gorm-rest lib.\n\n\nTesting Helper Libs\n\n\norg.yakworks:gorm-test-support\n - Testing framework for gorm domains\n\n\norg.yakworks:gorm-test-domain\n - common domain model used for tests. KitchenSink is commonly used in tests\n\n\n\n\nTest and Example Projects\n\n\n\n\nexamples/testify\n - Integration tests for gorm-tools and the others. rally-domain has its own integration tests\n\n\nexamples/resitfy\n - Playground for simple rest app\n\n\nexamples/benchmarks\n - currenty non-functional but proves out performance benchmarks for high transaction and async/parralel processins\n\n\n\n\nboot-security-shiro\n - FUTURE USE for using shiro or shiro like permissions with spring-security\n\n\n\n\nGroovy 3, Grails 5 and Gorm 7.3\n\u00b6\n\n\nVersioning will track the \ngorm.version\n for example gorm-tools 7.3.20, 7.3.21, etc will be compiled against gorm.version 7.3.2, 7.3.31 -> gorm.version 7.3.3 etc...\n\n\nPurpose\n\u00b6\n\n\nGorm-tools allows your Grails/Gorm project to start with a design of best practices that they can customize along the way. \nThis brings an opinionated SpringBoot based starting point to a Grails/Gorm project but without being locked in.\nDevelopers are free to easily customize, replace and disable these patterns when their opinions differ.\n\n\nOverview\n\u00b6\n\n\nThis is a library of tools to help standardize and simplify the service and Restful controller layer business logic for \ndomains and is the basis for the \nGorm Rest API plugin\n. \n\n\nGorm-Tools is the next iteration on the \nDAO plugin\n and has been in use for about 10 years processing millions of transactions per day.\n\n\nThere are 3 primary patterns this library enables as detailed below for Repositories,\nMango ( A mongo/graphql like query way to get gorm entity data with a Map) and\nBatch or Bulk inserting and updating with data binding\n\n\nDomain Repository Services\n\u00b6\n\n\njump to reference\n\n\nA repository is a \nDomain Driven Design\n pattern. Used a a place logic to validate, bind, persist and query data that resides \neither in a database or NoSql (via GORM usually of course).\nThe design pattern here is a bit similiar to \nSpring's Repository pattern\n\nand Grails GORM's new \nData Services\n pattern.\n\n\nGoals\n\u00b6\n\n\n\n\nStandardization\n: a clean common pattern across our apps for domain service layer logic that \n  reduces boiler plate in both services as well as controllers.\n\n\nTransactional Saves\n: every save() or persist() is wrapped in a transaction if one doesn't already exist. \n  This is critical when there are cascading saves and updates.\n\n\nRuntimeException Rollback by default\n: saves or \npersist()\n always occur with failOnError:true so a RuntimeException is \n  thrown for both DataAccessExceptions as well a validation exceptions.\n  This is critical for deeply nested domain logic dealing with saving multiple domains chains.\n\n\nEvents & Validation\n: the Repository allows a central place to do events such as beforeSave, beforeValidate, etc \n  so as not to pollute the domain class. This pattern makes it easier to keeps the special logic in a transaction as well. \n  Allows validation outside of constraints to persistence without needing to modify the domain source.\n\n\nEvents with Flushing\n: As mentioned in the Gorm docs, \"Do not attempt to flush the session within an event \n  (such as with obj.save(flush:true)). Since events are fired during flushing this will cause a StackOverflowError.\". \n  Putting the event business logic in the Repository keeps it all in a normal transaction and a flush is perfectly fine.  \n\n\nEasy Override/Replace Plugin's Domain Logic\n: Since the Repository is a service this also easily allows default logic in a provided \n  plugin to be overriden in an application. For example, I may have a CustomerRepo in a plugin that deals with deault common \n  logic to validate address. I can then implement a CustomerRepo in an application and it will override the spring bean\n  just as it does for a service. \n\n\n\n\nFast Data Binder & Batch Insert/Update\n\u00b6\n\n\nWe process millions of transactions per day and needed more performant binding performance.\n\n\nGoals\n\u00b6\n\n\n\n\nFAST Data Binding Service\n: databinding from maps (and thus JSON) has to be fast. \n  We sacrfice a small amount of functionality for a big performance gain\n  Maps and json are a first class citizen in the data service layer instead of the controller layer. \n  Eliminates boiler plate in getting data from the database to Gorm to JSON Map then back again.\n\n\nAsynchronous batch processing PERFORMANCE\n: GORM insert and updates can be chunked and processed in parrallel \n  using GPARS or RxJava making it easy to processes millions of records from JSON, CSV or Excel\n\n\n\n\nJSON Query and Filtering (Mango Query)\n\u00b6\n\n\nThe primary motive here is to create an easy dynamic map based way to query any Gorm Datastore (SQL or NoSQL). \nUsing a simple map that can come from json, yaml, groovy config etc... \nA huge motivating factor being able is to be able to have a powerful and flexible way to query using json from a REST \nbased client without having to use \nGraphQL\n (the only other clean alternative)\nThe Repositories and RestApiController come with a \nquery(criteriaMap, closure)\n method. It allows you to get a paginated \nlist of entities restricted by the properties in the \ncriteriaMap\n.\n\n\n\n\nA lot of inspiration was drawn from \nRestdb.io\n\n\nthe query language is similar to \nMongo's\n\n\nand CouchDB's new \nMango selector-syntax\n .\n\n\nAlso inspired by \njson-sql\n\n\n\n\n\n\n \nWhilst selectors have many similarities with MongoDB query documents, \nthese arise more from a similarity of purpose and do not necessarily extend to commonality of function or result.\n\n\n\n\nExample\n\nfor example, sending a JSON search param that looks like this\n\n\n{\n\n  \n\"name\"\n:\n \n\"Bill%\"\n,\n\n  \n\"type\"\n:\n \n\"New\"\n,\n\n  \n\"age\"\n:\n \n{\n\"$gt\"\n:\n \n65\n}\n\n\n}\n\n\n\nwould get converted to the equivalent criteria\n\n\ncriteria\n.\nlist\n \n{\n\n    \nilike\n \n\"name\"\n,\n \n\"Bill%\"\n\n    \neq\n \n\"type\"\n,\n \n\"New\"\n\n    \ngt\n \n\"age\"\n,\n \n65\n\n\n}\n\n\n\n\n\nDeveloper Notes\n\u00b6\n\n\nMake\n\u00b6\n\n\nwhile gradle is the build tool behind spring/grails, make is used for consitency to run gradle\nand use docker and setting up env for testing\n\n\nrun \nmake\n to see help\n\n\nrun \nmake check\n for full tests\n\n\nor run \n./gradlew check\n\n\nRunning docs locally\n\u00b6\n\n\nrun make help for latest targets\n\n\nmake docmark.start\n\n\nPublishing Plugin Releases\n\u00b6\n\n\nSee \nDeveloper Docs\n for info on our release process\n\n\nUsing latests SNAPSHOT\n  \n\n\nConfigure 9ci repo in build.gradle\n\n\nrepositories\n \n{\n\n  \nmaven\n \n{\n \nurl\n \n\"http://repo.9ci.com/oss-snapshots\"\n \n}\n\n \n}\n\n\n\n\n\nSee \nversion.properties\n for snapshot version\n\n\ndependencies\n \n{\n\n \ncompile\n(\n'org.grails.plugins:gorm-tools:x.y.z-SNAPSHOT'\n)\n \n{\n \nchanging\n \n=\n \ntrue\n \n}\n \n\n}\n\n\n\n\n\nDocs Links\n\u00b6\n\n\n\n\nDOCS ARE REALLY OUT OF DATE AND BEING UPDATED FOR BREAKING CHANGES after 6.1.12-v.X\n\n\nALSO MERGING IN DOCS FOR THE REST-API AND AUDITSTAMP THAT WAS MERGED INTO HERE\n\nMore breaking changes in 7.0.8-v6. is required on domain entity now or it needs to implement @GormRepoEntity\n\n\n\n\nRELEASE NOTES\n\n\n\n\n\n\n\n\nGuide\n\n\nAPI\n\n\n\n\n\n\n\n\n\n\nReleased Docs\n\n\nReleased Api\n\n\n\n\n\n\nsnapshot\n\n\nsnapshot",
            "title": "Overview"
        },
        {
            "location": "/#java-11-required-for-7328-to-prep-for-spring-6",
            "text": "6.1.x is for grails 3.3.x and gorm 6.1.x  7.0.8-vX is for grails 4.x and gorm 7.0.8  7.3.20+ is for grails 5.x and gorm 7.3+ , see notes  repositories {\n  //jcenter shutdown, use mavenCentral\n  mavenCentral()\n}\n...\nimplementation \"org.yakworks:gorm-tools:7.3.23\"\netc...",
            "title": "JAVA 11 required for 7.3.28+ to prep for spring 6."
        },
        {
            "location": "/#libs",
            "text": "org.yakworks:gorm-tools  - main plugin for the base gorm-tools extensions  org.yakworks:boot-security  - implementations of the domains for security, audit stamp traits and events.   org.yakworks:gorm-rest  - foundation and ASTs for automated rest api from gorm domains  org.yakworks:gorm-openapi  - gorm swagger and json schema foundation.   org.yakworks:gorm-etl  - Extract, Transform, Load for creating Excel and CSV   Security   org.yakworks:security-core  - Dependency free, Simple facade interfaces and impls for User/Subject and Roles/Permissions  org.yakworks:boot-security  - Spring Security with setup for basic, saml2, oauth. Depends only on spring boot and security  org.yakworks:boot-security-gorm  - gorm entities and support for Users/Roles   Rally   org.yakworks:rally-domain  - A sort of TCK. Opinionated CRM like models that serve as foundation for our business apps. Also used for examples and testing.  examples/rcm-api  - Integration tests and another TCK app. front rally-domain with rest api and tests out gorm-rest lib.  Testing Helper Libs  org.yakworks:gorm-test-support  - Testing framework for gorm domains  org.yakworks:gorm-test-domain  - common domain model used for tests. KitchenSink is commonly used in tests   Test and Example Projects   examples/testify  - Integration tests for gorm-tools and the others. rally-domain has its own integration tests  examples/resitfy  - Playground for simple rest app  examples/benchmarks  - currenty non-functional but proves out performance benchmarks for high transaction and async/parralel processins   boot-security-shiro  - FUTURE USE for using shiro or shiro like permissions with spring-security",
            "title": "Libs"
        },
        {
            "location": "/#groovy-3-grails-5-and-gorm-73",
            "text": "Versioning will track the  gorm.version  for example gorm-tools 7.3.20, 7.3.21, etc will be compiled against gorm.version 7.3.2, 7.3.31 -> gorm.version 7.3.3 etc...",
            "title": "Groovy 3, Grails 5 and Gorm 7.3"
        },
        {
            "location": "/#purpose",
            "text": "Gorm-tools allows your Grails/Gorm project to start with a design of best practices that they can customize along the way. \nThis brings an opinionated SpringBoot based starting point to a Grails/Gorm project but without being locked in.\nDevelopers are free to easily customize, replace and disable these patterns when their opinions differ.",
            "title": "Purpose"
        },
        {
            "location": "/#overview",
            "text": "This is a library of tools to help standardize and simplify the service and Restful controller layer business logic for \ndomains and is the basis for the  Gorm Rest API plugin .   Gorm-Tools is the next iteration on the  DAO plugin  and has been in use for about 10 years processing millions of transactions per day.  There are 3 primary patterns this library enables as detailed below for Repositories,\nMango ( A mongo/graphql like query way to get gorm entity data with a Map) and\nBatch or Bulk inserting and updating with data binding",
            "title": "Overview"
        },
        {
            "location": "/#domain-repository-services",
            "text": "jump to reference  A repository is a  Domain Driven Design  pattern. Used a a place logic to validate, bind, persist and query data that resides \neither in a database or NoSql (via GORM usually of course).\nThe design pattern here is a bit similiar to  Spring's Repository pattern \nand Grails GORM's new  Data Services  pattern.",
            "title": "Domain Repository Services"
        },
        {
            "location": "/#goals",
            "text": "Standardization : a clean common pattern across our apps for domain service layer logic that \n  reduces boiler plate in both services as well as controllers.  Transactional Saves : every save() or persist() is wrapped in a transaction if one doesn't already exist. \n  This is critical when there are cascading saves and updates.  RuntimeException Rollback by default : saves or  persist()  always occur with failOnError:true so a RuntimeException is \n  thrown for both DataAccessExceptions as well a validation exceptions.\n  This is critical for deeply nested domain logic dealing with saving multiple domains chains.  Events & Validation : the Repository allows a central place to do events such as beforeSave, beforeValidate, etc \n  so as not to pollute the domain class. This pattern makes it easier to keeps the special logic in a transaction as well. \n  Allows validation outside of constraints to persistence without needing to modify the domain source.  Events with Flushing : As mentioned in the Gorm docs, \"Do not attempt to flush the session within an event \n  (such as with obj.save(flush:true)). Since events are fired during flushing this will cause a StackOverflowError.\". \n  Putting the event business logic in the Repository keeps it all in a normal transaction and a flush is perfectly fine.    Easy Override/Replace Plugin's Domain Logic : Since the Repository is a service this also easily allows default logic in a provided \n  plugin to be overriden in an application. For example, I may have a CustomerRepo in a plugin that deals with deault common \n  logic to validate address. I can then implement a CustomerRepo in an application and it will override the spring bean\n  just as it does for a service.",
            "title": "Goals"
        },
        {
            "location": "/#fast-data-binder-batch-insertupdate",
            "text": "We process millions of transactions per day and needed more performant binding performance.",
            "title": "Fast Data Binder &amp; Batch Insert/Update"
        },
        {
            "location": "/#goals_1",
            "text": "FAST Data Binding Service : databinding from maps (and thus JSON) has to be fast. \n  We sacrfice a small amount of functionality for a big performance gain\n  Maps and json are a first class citizen in the data service layer instead of the controller layer. \n  Eliminates boiler plate in getting data from the database to Gorm to JSON Map then back again.  Asynchronous batch processing PERFORMANCE : GORM insert and updates can be chunked and processed in parrallel \n  using GPARS or RxJava making it easy to processes millions of records from JSON, CSV or Excel",
            "title": "Goals"
        },
        {
            "location": "/#json-query-and-filtering-mango-query",
            "text": "The primary motive here is to create an easy dynamic map based way to query any Gorm Datastore (SQL or NoSQL). \nUsing a simple map that can come from json, yaml, groovy config etc... \nA huge motivating factor being able is to be able to have a powerful and flexible way to query using json from a REST \nbased client without having to use  GraphQL  (the only other clean alternative)\nThe Repositories and RestApiController come with a  query(criteriaMap, closure)  method. It allows you to get a paginated \nlist of entities restricted by the properties in the  criteriaMap .   A lot of inspiration was drawn from  Restdb.io  the query language is similar to  Mongo's  and CouchDB's new  Mango selector-syntax  .  Also inspired by  json-sql     \nWhilst selectors have many similarities with MongoDB query documents, \nthese arise more from a similarity of purpose and do not necessarily extend to commonality of function or result.   Example \nfor example, sending a JSON search param that looks like this  { \n   \"name\" :   \"Bill%\" , \n   \"type\" :   \"New\" , \n   \"age\" :   { \"$gt\" :   65 }  }  \nwould get converted to the equivalent criteria  criteria . list   { \n     ilike   \"name\" ,   \"Bill%\" \n     eq   \"type\" ,   \"New\" \n     gt   \"age\" ,   65  }",
            "title": "JSON Query and Filtering (Mango Query)"
        },
        {
            "location": "/#developer-notes",
            "text": "",
            "title": "Developer Notes"
        },
        {
            "location": "/#make",
            "text": "while gradle is the build tool behind spring/grails, make is used for consitency to run gradle\nand use docker and setting up env for testing  run  make  to see help  run  make check  for full tests  or run  ./gradlew check",
            "title": "Make"
        },
        {
            "location": "/#running-docs-locally",
            "text": "run make help for latest targets  make docmark.start",
            "title": "Running docs locally"
        },
        {
            "location": "/#publishing-plugin-releases",
            "text": "See  Developer Docs  for info on our release process  Using latests SNAPSHOT     Configure 9ci repo in build.gradle  repositories   { \n   maven   {   url   \"http://repo.9ci.com/oss-snapshots\"   } \n  }   See  version.properties  for snapshot version  dependencies   { \n  compile ( 'org.grails.plugins:gorm-tools:x.y.z-SNAPSHOT' )   {   changing   =   true   }   }",
            "title": "Publishing Plugin Releases"
        },
        {
            "location": "/#docs-links",
            "text": "DOCS ARE REALLY OUT OF DATE AND BEING UPDATED FOR BREAKING CHANGES after 6.1.12-v.X  ALSO MERGING IN DOCS FOR THE REST-API AND AUDITSTAMP THAT WAS MERGED INTO HERE \nMore breaking changes in 7.0.8-v6. is required on domain entity now or it needs to implement @GormRepoEntity   RELEASE NOTES     Guide  API      Released Docs  Released Api    snapshot  snapshot",
            "title": "Docs Links"
        },
        {
            "location": "/release-notes/",
            "text": "v7.0.8-v.77\n\u00b6\n\n\nFull Changelog\n\n- Fix unexpected logging (#547) \nlink\n\n- dont log dup keys (#546) \nlink\n\n\nv7.0.8-v.76\n\u00b6\n\n\nFull Changelog\n\n- pub \nlink\n\n- add lookup by tag code (#538) \nlink\n\n- 9ci/domain9#1118 Add test, replace handleUnexpected with handleException (#533) \nlink\n\n\nv7.0.8-v.75\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- Merge pull request #532 from yakworks/zip-util \nlink\n\n- Update zip util to zip directories recursively \nlink\n\n\nv7.0.8-v.74\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- Rally-Security jwt cookie token, DataProblem.ex goes to details (#530) \nlink\n\n- added verify-no-snapshots \nlink\n\n\nv7.0.8-v.73\n\u00b6\n\n\nFull Changelog\n\n- AsyncSecureService (#529) \nlink\n\n\nv7.0.8-v.72\n\u00b6\n\n\nFull Changelog\n\n- trigger release \nlink\n\n- Dev merge, fairly large amount of changes (#527) \nlink\n\n- notes for future ref and remove the docker/k8s stuff \nlink\n\n\nv7.0.8-v.71\n\u00b6\n\n\nFull Changelog\n\n- Assign default orgid on user create 9ci/domain9#987 (#520) \nlink\n\n\nv7.0.8-v.70\n\u00b6\n\n\nFull Changelog\n\n- trigger release \nlink\n\n- 9ci/domain9#961 Add orgId column to user (#518) \nlink\n\n\nv7.0.8-v.69\n\u00b6\n\n\nFull Changelog\n\n- trigger release \nlink\n\n- basic design flushed out (#516) \nlink\n\n\nv7.0.8-v.68\n\u00b6\n\n\nFull Changelog\n\n- Merge pull request #515 from yakworks/queryargs_remove_ctrl_params \nlink\n\n- fix for filtering out params \nlink\n\n\nv7.0.8-v.67\n\u00b6\n\n\nFull Changelog\n\n- trigger release \nlink\n\n- move XXX for activity to fixme as its one big realted issue (#514) \nlink\n\n- Sync job transform results closure (#457) \nlink\n\n\nv7.0.8-v.66\n\u00b6\n\n\nFull Changelog\n\n- trigger release \nlink\n\n- no signed commits for pages (#513) \nlink\n\n- decrypt vault for pages so it has gpg key for signing (#512) \nlink\n\n- mods for vault and new restriction (#511) \nlink\n\n- Merge pull request #510 from yakworks/bulkErrorIncludes \nlink\n\n- change for bulkErrorIncludes \nlink\n\n\nv7.0.8-v.65\n\u00b6\n\n\nFull Changelog\n\n- trigger release \nlink\n\n- bump to 0.5.2 for external messages.properties (#505) \nlink\n\n- 9ci/domain9#888 Add test to verify tht bulk response contains original data if there was error (#507) \nlink\n\n- fix excel formatting \nlink\n\n- fix excel formatting (#508) \nlink\n\n- remove logger \nlink\n\n- Update SecService.groovy \nlink\n\n- add log.debug for username \nlink\n\n\nv7.0.8-v.64\n\u00b6\n\n\nFull Changelog\n\n- release change to error list \nlink\n\n-  don't put error if it's empty list 9ci/domain9#884 (#506) \nlink\n\n- Get restify work with bootRun (#504) \nlink\n\n- Allow publishEvent to work with object instead of requiring spring ApplicationEvent \nlink\n\n- Oapi api-docs (#497) \nlink\n\n- Oapi (#496) \nlink\n\n- Oapi (#495) \nlink\n\n- fix includesKey and includes getting picked up as fields. (#494) \nlink\n\n-  9ci/domain9#726 Add tests (#486) \nlink\n\n- #491 Add test to verify that SyncjobContext generates proper json whe\u2026 (#493) \nlink\n\n\nv7.0.8-v.63\n\u00b6\n\n\nFull Changelog\n\n- release fix to json \nlink\n\n- Merge pull request #492 from yakworks/491-bulk-json-fix \nlink\n\n- Add comment \nlink\n\n- #491 Fix Bulk response json, update & fix tests \nlink\n\n- refactor activity (#490) \nlink\n\n- Activity links (#489) \nlink\n\n\nv7.0.8-v.62\n\u00b6\n\n\nFull Changelog\n\n- release params on \nlink\n\n- Merge pull request #488 from yakworks/job-params-fix \nlink\n\n- Set params on syncjob args \nlink\n\n- App ctx publish event (#487) \nlink\n\n- Openapi (#485) \nlink\n\n\nv7.0.8-v.61\n\u00b6\n\n\nFull Changelog\n\n- release with org dim validation \nlink\n\n- 9ci/domain9#816 Org member validation (#484) \nlink\n\n\nv7.0.8-v.60\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- fix scrollable to reomove forward only as it fails on postgres \nlink\n\n\nv7.0.8-v.59\n\u00b6\n\n\nFull Changelog\n\n- release pagination on projections \nlink\n\n- 482 paging projections (#483) \nlink\n\n- add getUserIdByName (#481) \nlink\n\n- Add a check for GrailsUser : Coz with okta, it is possible tht its an OauthUser (#480) \nlink\n\n\nv7.0.8-v.58\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- handleUnexpected will return the Problem if its an instance of one already. \nlink\n\n- Icu4j (#479) \nlink\n\n\nv7.0.8-v.57\n\u00b6\n\n\nFull Changelog\n\n- relase with Fix CSV path key map \nlink\n\n- 9ci/domain9#777 - Fix CSV path key map reader to initialize map  (#471) \nlink\n\n- Update Contact.groovy \nlink\n\n\nv7.0.8-v.56\n\u00b6\n\n\nFull Changelog\n\n- release contact isPrimary \nlink\n\n- Update Contact.groovy (#470) \nlink\n\n\nv7.0.8-v.55\n\u00b6\n\n\nFull Changelog\n\n- release with csv bulk import \nlink\n\n- Merge pull request #469 from yakworks/655-bulk-csv \nlink\n\n- Add comment \nlink\n\n- 9ci/domain9#655 Implement bulk csv upload \nlink\n\n- if params booleean conversion \nlink\n\n- Remove ignore \nlink\n\n- Fix : Check if param exists thn use it, dont use groovy truth as it would never use param if param value was falsy \nlink\n\n- 9ci/domain9#655 Add a general purpose Csv to Map transformer \nlink\n\n\nv7.0.8-v.54\n\u00b6\n\n\nFull Changelog\n\n- release with contact lookup on update and org lookup on contact create \nlink\n\n- lookup org (#468) \nlink\n\n- Merge pull request #467 from yakworks/_741_contact_update_lookup \nlink\n\n- Update ContactRepo.groovy \nlink\n\n- Update ContactRepo.groovy \nlink\n\n- add lookup \nlink\n\n\nv7.0.8-v.53\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- Update BulkableRepo.groovy \nlink\n\n- Update version.properties \nlink\n\n- Merge pull request #465 from yakworks/726-bulkable-enhancements \nlink\n\n- Codenarc fix \nlink\n\n- release with bulk change to use success and error includes \nlink\n\n- Merge pull request #464 from yakworks/726-bulkable-enhancements \nlink\n\n- Update BulkableRepo.groovy \nlink\n\n- 9ci/domain9#726 Different list of includes for error response building \nlink\n\n\nv7.0.8-v.52\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- Dev (#463) \nlink\n\n\nv7.0.8-v.51\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- Dev (#451) \nlink\n\n\nv7.0.8-v.50\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- Dev merge (#442) \nlink\n\n\nv7.0.8-v.49\n\u00b6\n\n\nFull Changelog\n\n- release new version \nlink\n\n\nv7.0.8-v.48\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- Merge pull request #431 from yakworks/dev \nlink\n\n- hard code customer and source to be returned as data if exists on error (#430) \nlink\n\n- put data back in for errors, RNDC is using it, better to have them \nlink\n\n- dont set syncJob (#427) \nlink\n\n- Update version.properties \nlink\n\n- publish with fix for null Strings \nlink\n\n- Merge pull request #424 from yakworks/handle-empty-strings \nlink\n\n- remove printlns \nlink\n\n- Codenarc fixes \nlink\n\n- 9ci/domain9#597 Empty strings should be set as null \nlink\n\n- back to snapshot \nlink\n\n- rm \nlink\n\n- release with fix for special characters in csv \nlink\n\n- Merge pull request #422 from yakworks/csv \nlink\n\n- Remove BOM/ZWNBSP from lines \nlink\n\n- fix version.properties as circleci failed on make ship.release \nlink\n\n- release changes to csv processing \nlink\n\n- Merge pull request #421 from yakworks/565-zip-helpers \nlink\n\n- Fix spotless \nlink\n\n- domain9#565 Add zip helpers \nlink\n\n- Dev (#420) \nlink\n\n- release with csv import \nlink\n\n- Csv related stuff (Work in progress) (#416) \nlink\n\n- support sort param for multiple fields seperated by comma, ex: 'num:asc, name:desc' and json in same format as above, ex '{num:\"asc\", name:\"desc\"}' (#419) \nlink\n\n\nv7.0.8-v.45\n\u00b6\n\n\nFull Changelog\n\n- release with change for parallel turned off \nlink\n\n- Take asyncEnabled from params - ability to override parallel processi\u2026 (#413) \nlink\n\n\nv7.0.8-v.44\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- standardize qSearch and params (#415) \nlink\n\n- Rest list problem handling (#414) \nlink\n\n- Mango order (#412) \nlink\n\n\nv7.0.8-v.43\n\u00b6\n\n\nFull Changelog\n\n- release v43 \nlink\n\n- Meta map (#409) \nlink\n\n\nv7.0.8-v.42\n\u00b6\n\n\nFull Changelog\n\n- release so I can release domain9 \nlink\n\n- reverts #407 which was for 9ci/domain9#526 (#408) \nlink\n\n- Merge pull request #407 from yakworks/526-custaccount-org-dims \nlink\n\n- #526 Handle orgdimensions for custAccount \nlink\n\n- fix json parsing when body is empty with tests Request, toString bett\u2026 (#406) \nlink\n\n- result and problem traits (#405) \nlink\n\n\nv7.0.8-v.41\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- problem move (#404) \nlink\n\n- results and problem api with new ICU messageSource (#403) \nlink\n\n\nv7.0.8-v.40\n\u00b6\n\n\nFull Changelog\n\n- release 40 \nlink\n\n- REST outapi (In progress) (#390) \nlink\n\n\nv7.0.8-v.39\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- lookup for member orgs (#402) \nlink\n\n\nv7.0.8-v.38\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- Fix entitymap lists (#401) \nlink\n\n- getProperty working, added in EnumUtils and getter for OrgType (#400) \nlink\n\n- Oeg find lookup test (#399) \nlink\n\n- remove bad views that had old apiError (#398) \nlink\n\n- Api includes (#397) \nlink\n\n\nv7.0.8-v.37\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- Rest controller rename exception (#396) \nlink\n\n- secrole named (#395) \nlink\n\n- refactor so everything is in a common includes map on both domain and config (#394) \nlink\n\n- fix build for gsonviews \nlink\n\n- exclude rally bootstrap.class from jar \nlink\n\n- Json entitymap (#389) \nlink\n\n\nv7.0.8-v.36\n\u00b6\n\n\nFull Changelog\n\n- Dependency part2 (#388) \nlink\n\n- add gorm-test-support, publish to repo.9ci first then to sonotype maven central \nlink\n\n- release \nlink\n\n- Dependency fix (#385) \nlink\n\n\nv7.0.8-v.35\n\u00b6\n\n\nFull Changelog\n\n- release \nlink\n\n- dont use generic publish for snapshots, use publishJavaLibraryPublicationToMavenRepository \nlink\n\n- snapshot to true \nlink\n\n- Shipyak266 sonatype publish (#384) \nlink\n\n- Shipyak gradle upgrade (#382) \nlink\n\n\nv7.0.8-v.33\n\u00b6\n\n\nFull Changelog\n\n- fix mem to old gradle way so we dont get gradle exit value 137 \nlink\n\n- fix assemble, move more compile to implementation config \nlink\n\n- Gradle cleanup compile to implementation (#381) \nlink\n\n- 9ci/domain9#464 Add test to reveal transaction issue (#380) \nlink\n\n- add test to update by sourceId (#376) \nlink\n\n- 9ci/domain9#464 Cleanup FIXMEs, remove batchTrx which commited trx during bulk operation (#379) \nlink\n\n- bump to grails 4.0.12 latests and java11 prep (#378) \nlink\n\n\nv7.0.8-v.32\n\u00b6\n\n\nFull Changelog\n\n- release 32 \nlink\n\n- move to parseJsonBytes so tests dont get confused (#374) \nlink\n\n- Async pool (#373) \nlink\n\n- Merge master (#372) \nlink\n\n\nv7.0.8-v.31\n\u00b6\n\n\nFull Changelog\n\n- trigger release \nlink\n\n- Bulk controller ops (#370) \nlink\n\n- 425 lookups (#364) \nlink\n\n- resolves #357, intial design, needs tests (#368) \nlink\n\n- 356 bulkable async futures (#367) \nlink\n\n- tweaks for DBDialectService and datediff, clean up name (#366) \nlink\n\n- fix changelog and setting to autoset snapsho backt to true on release \nlink\n\n\nv7.0.8-v.30\n\u00b6\n\n\nFull Changelog\n\n- turn org.gradle.parallel=true back on \nlink\n\n- release \nlink\n\n- Updated for postgres (#358) \nlink\n\n- back to snapshot \nlink\n\n\nv7.0.8-v.29\n\u00b6\n\n\nFull Changelog\n\n- release Bulkable Contacts \nlink\n\n- make Contact bulkable (#359) \nlink\n\n- Fix BulkRestApiSpec (#349) \nlink\n\n- 413 ApiError on bulkable commits (#354) \nlink\n\n- new vault with sops, refactor steps into circle so its clearer when we have a failure and where (#351) \nlink\n\n- Benchmarks (#350) \nlink\n\n- back to snapshot \nlink\n\n\nv7.0.8-v.28\n\u00b6\n\n\nFull Changelog\n\n- Merge pull request #347 from yakworks/jobtrait fixrestrepositoryapi \nlink\n\n- add tests and xxx \nlink\n\n- move everything to jobTrait and fix restRepositoryApi \nlink\n\n\nv7.0.8-v.27\n\u00b6\n\n\nFull Changelog\n\n- cleanup and fixmes (#345) \nlink\n\n\nv7.0.8-v.26\n\u00b6\n\n\nFull Changelog\n\n- Parallel each (#346) \nlink\n\n\nv7.0.8-v.25\n\u00b6\n\n\nFull Changelog\n\n- fix bad build.yml \nlink\n\n- fix async errors \nlink\n\n- Merge branch 'async' \nlink\n\n- change asyn so only each parralel \nlink\n\n- Async (#344) \nlink\n\n- asyn refactor and clean up old unused stuff from benchmarks \nlink\n\n- #339 Bulkable tests (#343) \nlink\n\n- Trx service (#342) \nlink\n\n- FIXME comments for #339 (#340) \nlink\n\n\nv7.0.8-v.25\n\u00b6\n\n\nFull Changelog\n\n- #339 Bulkable tests (#343) \nlink\n\n- Trx service (#342) \nlink\n\n- FIXME comments for #339 (#340) \nlink\n\n\nv7.0.8-v.25\n\u00b6\n\n\nFull Changelog\n\n- #339 Bulkable tests (#343) \nlink\n\n- Trx service (#342) \nlink\n\n- FIXME comments for #339 (#340) \nlink\n\n\nv7.0.8-v.24\n\u00b6\n\n\nFull Changelog\n\n- 9ci/domain9#370 Fix stackoverflow when there's list of maps in incoming bulk  json (#337) \nlink\n\n\nv7.0.8-v.23\n\u00b6\n\n\nFull Changelog\n\n- moark for release \nlink\n\n- clean up (#338) \nlink\n\n\nv7.0.8-v.22\n\u00b6\n\n\nFull Changelog\n\n- 9ci/domain9#331 bulkable - fixes (#332) \nlink\n\n\nv7.0.8-v.21\n\u00b6\n\n\nFull Changelog\n\n- Crossref repos (#336) \nlink\n\n\nv7.0.8-v.20\n\u00b6\n\n\nFull Changelog\n\n- 325 tags (#335) \nlink\n\n- Merge branch 'master' of \nhttps://github.com/yakworks/gorm-tools\n \nlink\n\n- back to snapshot \nlink\n\n\nv7.0.8-v.19\n\u00b6\n\n\nFull Changelog\n\n- Update version.properties \nlink\n\n- Update version.properties \nlink\n\n\nv7.0.8-v.17\n\u00b6\n\n\nFull Changelog\n\n- Update version.properties \nlink\n\n- relase v18 \nlink\n\n- Merge pull request #328 from yakworks/jobImpl \nlink\n\n- Merge branch 'jobImpl' of \nhttps://github.com/yakworks/gorm-tools\n into jobImpl \nlink\n\n- Update BulkableRepo.groovy \nlink\n\n- Fix test \nlink\n\n- rename item to data \nlink\n\n- Set source on job \nlink\n\n- Small fixes \nlink\n\n- Small fix \nlink\n\n- 9ci/domain9#331 bulkCreate improvements \nlink\n\n- Fix method signature \nlink\n\n- Return sourceId in response \nlink\n\n- rename need of using list: key for bulk create. Rename bulkCreate to bulk \nlink\n\n- Fix test \nlink\n\n- make state column same as other domains \nlink\n\n- Exclude controllers plugin \nlink\n\n- Merge branch 'master' into jobImpl \nlink\n\n- 9ci/domain9#331 Initial implementation for bulk import \nlink\n\n- Merge branch 'master' of \nhttps://github.com/yakworks/gorm-tools\n \nlink\n\n- back to snapshot \nlink\n\n- Merge branch 'master' into jobImpl \nlink\n\n- Merge branch 'master' into jobImpl \nlink\n\n- Update JobSpec.groovy \nlink\n\n- Update OrgRepo.groovy \nlink\n\n- codenarc \nlink\n\n- Update JobRepo.groovy \nlink\n\n- clean ups \nlink\n\n- Update JobSpec.groovy \nlink\n\n- phase one of BUlkable \nlink\n\n- spotless \nlink\n\n- Update JobRepo.groovy \nlink\n\n- add javadocs \nlink\n\n- add test to create Job \nlink\n\n- move impl to main rally \nlink\n\n- jobImpl \nlink\n\n- cleanup \nlink\n\n- Update JobRepoSpec.groovy \nlink\n\n- ./gradlew :gorm-tools:spotlessApply \nlink\n\n- fix test \nlink\n\n- Update JobRepoSpec.groovy \nlink\n\n- Update JobRepoSpec.groovy \nlink\n\n- JobImpl test \nlink\n\n- Merge branch 'master' into sourceTrait \nlink\n\n- jobImpl \nlink\n\n- ./gradlew :gorm-tools:spotlessApply \nlink\n\n- ./gradlew :rally-domain:spotlessApply \nlink\n\n- sourceTrait \nlink\n\n- Job with state \nlink\n\n- rename status to stae, implements from repo not domain \nlink\n\n- first pass on bulkable and Job \nlink\n\n\nv7.0.8-v.16\n\u00b6\n\n\nFull Changelog\n\n- Update version.properties \nlink\n\n- Associations (#329) \nlink\n\n- upgrade shipkit, fix bad function call for apply_tpl \nlink\n\n- trigger release \nlink\n\n- Rest API : Handle DataAccess exception and return error message (#322) \nlink\n\n- GormRepo for common doAssociations (#326) \nlink\n\n- 323 collection handling (#324) \nlink\n\n- Sec tweaks (#321) \nlink\n\n- feat: added new domain AppUserToken for rest api auth, restify demo i\u2026 (#320) \nlink\n\n- new shipkit v1.0.11 (#319) \nlink\n\n- modify how k8s is published (#318) \nlink\n\n\nv7.0.8-v.15\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.14\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.13\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.10\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.9\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.8\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.7\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.6\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.5\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.4\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.3\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.2\n\u00b6\n\n\nFull Changelog\n\n\nv7.0.8-v.1\n\u00b6\n\n\nFull Changelog\n\n\nv6.1.12-v.6\n\u00b6\n\n\nFull Changelog\n\n\nv6.1.12-v.5\n\u00b6\n\n\nFull Changelog\n\n\nv6.1.12-v.4\n\u00b6\n\n\nFull Changelog\n\n\nv6.1.12-v.3\n\u00b6\n\n\nFull Changelog\n\n\nRelease notes were automatically generated by \nShipkit\n\n\n6.1.12-v.3-SNAPSHOT\n\u00b6\n\n\n\n\n2020-09-02 - 31 commits by \nJoshua B\n (28), alexeyzvegintcev (3) - published to \n\n\nFix benchmarks \n(#241)\n\n\nPublish test \n(#240)\n\n\nErrors json \n(#237)\n\n\nadded tests and beefed up rstify project. fixed @GormRepository annot\u2026 \n(#236)\n\n\nRest api config service \n(#235)\n\n\nIdentity enums \n(#234)\n\n\nQ search fix \n(#233)\n\n\nApp domains \n(#232)\n\n\nmake enums for operations in mango. \n(#231)\n\n\nMango q search \n(#230)\n\n\nQ search and Sorting \n(#228)\n\n\nenable ability to assign id and have it be used instead of creating a\u2026 \n(#227)\n\n\nMango multisorting \n(#226)\n\n\nMango rest api and gorm 6.1.12 \n(#225)\n\n\n\n\n6.1.12-v.3-SNAPSHOT\n\u00b6\n\n\n\n\n2020-09-02 - 11 commits by \nJoshua B\n (10), alexeyzvegintcev (1) - published to \n\n\nFix benchmarks \n(#241)\n\n\nPublish test \n(#240)\n\n\nErrors json \n(#237)\n\n\n\n\n6.1.12-v.3-SNAPSHOT\n\u00b6\n\n\n\n\n2020-09-02 - no code changes (no commits) - published to \n\n\n\n\nv6.1.12-v.2\n\u00b6\n\n\nFull Changelog\n\n\n6.1.12-v.1\n\u00b6\n\n\n\n\n2020-08-24 - \n20 commits\n by \nJoshua B\n (18), alexeyzvegintcev (2) - published to \n\n\nadded tests and beefed up rstify project. fixed @GormRepository annot\u2026 \n(#236)\n\n\nRest api config service \n(#235)\n\n\nIdentity enums \n(#234)\n\n\nQ search fix \n(#233)\n\n\nApp domains \n(#232)\n\n\nmake enums for operations in mango. \n(#231)\n\n\nMango q search \n(#230)\n\n\nQ search and Sorting \n(#228)\n\n\nenable ability to assign id and have it be used instead of creating a\u2026 \n(#227)\n\n\nMango multisorting \n(#226)\n\n\nMango rest api and gorm 6.1.12 \n(#225)\n\n\n\n\n6.1.11-v.14\n\u00b6\n\n\n\n\n2020-08-04 - \n7 commits\n by \nJoshua B\n (6), \nalexeyzvegintcev\n (1) - published to \n\n\ntest passing and examples of rest controllers created from yml \n(#224)\n\n\nFix mango with sort \n(#223)\n\n\nRest json paging \n(#222)\n\n\nRest merge \n(#221)\n\n\n\n\n6.1.11-v.14\n\u00b6\n\n\n\n\n2020-08-04 - \n5 commits\n by \nJoshua B\n (4), \nalexeyzvegintcev\n (1) - published to \n\n\ntest passing and examples of rest controllers created from yml \n(#224)\n\n\nFix mango with sort \n(#223)\n\n\nRest json paging \n(#222)\n\n\nRest merge \n(#221)\n\n\n\n\n6.1.11-v.13\n\u00b6\n\n\n\n\n2020-04-28 - \n3 commits\n by sudhir nimavat (2), \njdabal\n (1) - published to \n\n\nMongo query fix \n(#220)\n\n\n\n\n6.1.11-v.12\n\u00b6\n\n\n\n\n2019-11-27 - \n1 commit\n by \nSudhir Nimavat\n - published to \n\n\nFix NPE when class does not have any field with explicit bindable \n(#218)\n\n\n\n\n6.1.11-v.11\n\u00b6\n\n\n\n\n2019-11-25 - \n1 commit\n by \nSudhir Nimavat\n - published to \n\n\n\n\n216 - Should be able to deep bind nested instance \n(#217)\n\u00b6\n\n\n\n\n\n\n6.1.11-v.10\n\u00b6\n\n\n\n\n2019-11-21 - \n2 commits\n by \njdabal\n (1), \nsudhir nimavat\n (1) - published to \n\n\n\n\n214 Fix bindable - should work for reloadable env \n(#215)\n\u00b6\n\n\n\n\n\n\n6.1.11-v.9\n\u00b6\n\n\n\n\n2019-08-21 - \n6 commits\n by \nalexey.zvegintcev\n (5), \njdabal\n (1) - published to \n\n\nCriteria improvments \n(#212)\n\n\n\n\n6.1.11-v.8\n\u00b6\n\n\n\n\n2019-07-16 - \n2 commits\n by \nalexey.zvegintcev\n (1), \nSudhir Nimavat\n (1) - published to \n\n\nErrorMesage service handling of Persistence exception \n(#211)\n\n\n\n\n6.1.11-v.7\n\u00b6\n\n\n\n\n2019-06-26 - \n7 commits\n by \nJoshua B\n - published to \n\n\nAdd results model \n(#210)\n\n\n\n\n6.1.11-v.6\n\u00b6\n\n\n\n\n2019-06-21 - \n3 commits\n by \nSudhir Nimavat\n (2), \nJoshua B\n (1) - published to \n\n\nset snapshot to false \n(#209)\n\n\nHibernatespec cleanup \n(#208)\n\n\n\n\n6.1.11-v.5\n\u00b6\n\n\n\n\n2019-06-18 - \n1 commit\n by \nalexeyzvegintcev\n - published to \n\n\nFixed issue in BeanPathTool when nested object is not in db rel 9ci/r\u2026 \n(#206)\n\n\n\n\n6.1.11-v.4\n\u00b6\n\n\n\n\n2019-06-13 - \n1 commit\n by \nSudhir Nimavat\n - published to \n\n\n\n\n202 Fix ExternalConfigAwareSpec \n(#204)\n\u00b6\n\n\n\n\n\n\n6.1.11-v.3\n\u00b6\n\n\n\n\n2019-06-12 - \n1 commit\n by \nSudhir Nimavat\n - published to \n\n\n202 external config aware test trait \n(#203)\n\n\n\n\n6.1.11-v.2\n\u00b6\n\n\n\n\n2019-06-07 - \n2 commits\n by \nJoshua B\n - published to \n\n\nNo pull requests referenced in commit messages.\n\n\n\n\n6.1.11-v.1\n\u00b6\n\n\n\n\n2019-06-04 - \n3 commits\n by \nJoshua B\n - published to \n\n\nStash fubar \n(#199)\n\n\n\n\n6.2.3\n\u00b6\n\n\n\n\n2019-05-27 - \n1 commit\n by \nJoshua B\n - published to \n\n\nupgrad grails 3.3.10 and gorm 6.1.12 \n(#198)\n\n\n\n\n6.2.2\n\u00b6\n\n\n\n\n2019-05-20 - \n4 commits\n by \nJoshua B\n - published to \n\n\n\n\n\n\nrename parallelTools \n(#195)\n\n\n\n\n\n\n\n\n6.2.1\n\u00b6\n\n\n\n\n2019-05-14 - \n1 commit\n by \nJoshua B\n - published to \n\n\nFix args not being set in BeforePersistEvent \n(#194)\n\n\n\n\n6.2.0\n\u00b6\n\n\n\n\n2019-05-14 - \n2 commits\n by alexey.zvegintcev (1), \nJoshua B\n (1) - published to \n\n\nrequire RepoListener annotation on event methods in the GormRepo repos\u2026  \n(#193)\n\n\n\n\n6.1.7\n\u00b6\n\n\n\n\n2019-05-09 - \n2 commits\n by \nalexey.zvegintcev\n (1), \nJoshua B\n (1) - published to \n\n\nAdded handling for mssql dialect \n(#190)\n\n\n\n\n6.1.6\n\u00b6\n\n\n\n\n2019-05-07 - \n1 commit\n by \nJoshua B\n - published to \n\n\nNo pull requests referenced in commit messages.\n\n\n\n\n6.1.5\n\u00b6\n\n\n\n\n2019-05-07 - \n23 commits\n by 4 authors - published to \n\n\nCommits: \nsudhir nimavat\n (16), \nJoshua B\n (4), alexeyzvegintcev (2), jdabal (1)\n\n\nUpgrade to shipyak \n(#189)\n\n\nCodenark cleanup \n(#188)\n\n\n181 Fix EntityMapBinder issue \n(#182)\n\n\nAdded getYear method for localDates \n(#180)\n\n\n\n\n6.1.4\n\u00b6\n\n\n\n\n2018-05-22 - no code changes (no commits) - published to \n\n\n\n\n6.1.3\n\u00b6\n\n\n\n\n2018-04-26 - \n1 commit\n by \nJoshua B\n - published to \n\n\nCodenarc property refactor shipkit \n(#179)\n\n\n\n\n6.1.2\n\u00b6\n\n\n\n\n2018-04-24 - 514 commits by 7 authors - published to \n\n\nCommits: \nJoshua B\n (173), alexeyzvegintcev (139), sudhir nimavat (125), \nNikita Pavlov\n (43), Joshua Burnett (32), jdabal (1), \nKen Roberts\n (1)\n\n\nYakworks gradle plugin shipkit \n(#176)\n\n\nFix unit test issue with repos \n(#175)\n\n\nAdd an ability to bind associations with bindableTo property in domains \n(#174)\n\n\nUse existing reference of association if not null \n(#173)\n\n\nRepo update \n(#172)\n\n\nSpotless \n(#171)\n\n\nProject Build refactor \n(#170)\n\n\nCircleci \n(#164)\n\n\n160 traits for integration tests \n(#163)\n\n\nTest data map refactor \n(#162)\n\n\n150 jsonify includes \n(#161)\n\n\nDomain repo crud spec \n(#159)\n\n\n154 refactor tests \n(#156)\n\n\nTravis fail refactor jdbc id gen \n(#155)\n\n\nRefactor tests to use Spock \n(#154)\n\n\nFixes for domain repo test and mock id generator \n(#151)\n\n\nmore test cleanup to make it DRY. Added TestDataJson with static buil\u2026 \n(#149)\n\n\nRefactor tests \n(#148)\n\n\nfixes #145 \n(#146)\n\n\nAdd tests for setting beanName for a SpringBeanIdGenerator \n(#145)\n\n\nclean up code, remove publics \n(#144)\n\n\nAdd codenarc for @CompileStatic #138 \n(#143)\n\n\nremove refactored benchmarks. Simplify, simplify, simplify \n(#141)\n\n\nBenchmark redo \n(#140)\n\n\nCodenarcs for @CompileStatic and grailsApplication.config \n(#138)\n\n\n\n\n75 Benchmarks for updates \n(#136)\n\u00b6\n\n\n\n\n\n\n51 update docs \n(#135)\n\u00b6\n\n\n\n\n84 benchmarks 2\nnd\n lvl cache \n(#134)\n\n\n82 entity binder \n(#133)\n\n\n129 domain test refactoring \n(#132)\n\n\n\n\n51 Add docs for refreshable beans \n(#131)\n\u00b6\n\n\n\n\n\n\n117 - Add docs for timezone handling for dates \n(#130)\n\u00b6\n\n\n\n\nDomainAutoTest questions and docs \n(#129)\n\n\n\n\n127 Docs: \n(#128)\n\u00b6\n\n\n\n\nDomainAutoTest associations handling #90 \n(#126)\n\n\nException refactoring #74 \n(#124)\n\n\n\n\n117 - set hibernate timezone to utc.  \n(#123)\n\u00b6\n\n\n\n\nAdd error handling for map binder. \n(#122)\n\n\n103 binder jb \n(#121)\n\n\nupdate to hibernate 5.2 and clean up build \n(#119)\n\n\nDate, LocalDate, LocalDateTime testing and defaults \n(#117)\n\n\n90 domain auto test \n(#116)\n\n\n111 dateutil performance \n(#114)\n\n\n50 gorm repo needs more tests \n(#113)\n\n\nMake date parsing more performant \n(#111)\n\n\n106 id gen foobared \n(#109)\n\n\n\n\n88 Add GormRepository AST transformation \n(#108)\n\u00b6\n\n\n\n\nIdGenerator \n(#106)\n\n\n99 tests for events \n(#105)\n\n\n100 naming strategy \n(#104)\n\n\nEntityMapBinder: whiteList and blackList \n(#103)\n\n\nrenaming and moving to be more constent with entity linquistic vs dom\u2026 \n(#101)\n\n\nEvent Tests \n(#99)\n\n\nBind action events \n(#98)\n\n\n89 configurable quick searc \n(#97)\n\n\nApp ctx static holder helper \n(#96)\n\n\nRename dao to repository to be consistent with DDD \n(#95)\n\n\nflush and clear to use TransactionStatus, cleaned up tests so they ha\u2026 \n(#94)\n\n\n\n\n51 Add docs for external event listeners \n(#93)\n\u00b6\n\n\n\n\n86 async batch support \n(#92)\n\n\nfinished adding batch methods to domains, refactored out WithTrx \n(#91)\n\n\nDomainAutoTest implmentation  \n(#90)\n\n\nquickSearchFields for Mango should have defaults and be able to be set in config \n(#89)\n\n\n@GormRepository annotation for AST \n(#88)\n\n\nGroovydocs updates \n(#87)\n\n\nParallelTools and GparsParallelTools need tests and docs \n(#86)\n\n\n81 map binder \n(#83)\n\n\nGormMapBinder enhancments \n(#82)\n\n\nFastBinder refactor to a trait MapBinder \n(#81)\n\n\nRefactor to ParallelTools so the gpars lib is behind the scenes a\u2017\ufffd \n(#80)\n\n\nMango override for dao \n(#79)\n\n\nCode reformat \n(#78)\n\n\nDbDialectService working with H2 and tests \n(#77)\n\n\nBenchmarks: Add exceptions testing \n(#76)\n\n\nBenchmarks: need update benchmarks now too. \n(#75)\n\n\nRefactor Exceptions \n(#74)\n\n\n63 event performance benchmarks \n(#73)\n\n\n\n\n66 cleanup and refactor common code to be reusable. \n(#72)\n\u00b6\n\n\n\n\nMango docs \n(#71)\n\n\nAdded Pager docs and specs #55 \n(#70)\n\n\n63 dao events \n(#69)\n\n\n67 mango query cleanup \n(#68)\n\n\ncleanup MangoQuery to be a service bean \n(#67)\n\n\nrefactor commonallity out of DaoDataTest, DaoHibernateSpec and DaoPluginHelper \n(#66)\n\n\nset Events for Dao \n(#63)\n\n\nCleanup #52 \n(#62)\n\n\nAdded docs for MultiFormatDateConverter #48 \n(#61)\n\n\n49 mango query refactored \n(#59)\n\n\nDocs: Id Generator \n(#58)\n\n\n\n\n53 Add DaoHibernateSpec \n(#57)\n\u00b6\n\n\n\n\nPager spec tests are virtually non-existant \n(#55)\n\n\nResolved fixmes for BeanPathTools #47 \n(#54)\n\n\nCreate DaoDataTest trait and DaoHibernateSpec \n(#53)\n\n\nClean up \n(#52)\n\n\nExternal Groovy Scripts For Dao Events \n(#51)\n\n\nGormDao needs more tests \n(#50)\n\n\nGormDao cleanup for list/query \n(#49)\n\n\nDocument MultiFormatDateConverter, where its used and what its for \n(#48)\n\n\nFIXME on beanpathTools \n(#47)\n\n\nFastDataBinder \n(#46)\n\n\nFix codenarc warnings \n(#45)\n\n\nMangoCriteria DetachedCriteria builder \n(#41)\n\n\n32 fixmes cleanup \n(#38)\n\n\nMkdocs \n(#37)\n\n\nAdded tests and javadocs \n(#36)\n\n\nrestructure project as gradle multimodule project similar to view-tools \n(#34)\n\n\nDao move refactor \n(#33)\n\n\nFIXME\u2019s cleanup \n(#32)\n\n\nadd docs \n(#30)\n\n\nDocument NEWOBJECTID table required for idgenerators to work \n(#27)\n\n\ninsert java docs for why doInsert doSave etc are needed \n(#26)\n\n\nMerge rally griner \n(#23)\n\n\nGrails3 \n(#21)\n\n\nHot reloading doesnt work for DAO artefacts \n(#16)\n\n\nFixes #8 \n(#15)\n\n\ngrails 3 structure \n(#13)\n\n\nAdd scrollable query and GrailaParameterMapRowMapper \n(#11)\n\n\nCreate Search Criteria from json or map \n(#9)\n\n\nUse Generics for GormDaoSupport so that we specify static types, and can use @CompileStatic \n(#8)\n\n\n6 grails255 hibernate4 upgrade \n(#7)\n\n\nupgrade to grails 2.5.5 hibernate 4 \n(#6)\n\n\nDaoMessage.notFound fails when null id is passed in params. \n(#4)\n\n\nRemove formatParams method \n(#3)",
            "title": "Release Notes"
        },
        {
            "location": "/release-notes/#v708-v77",
            "text": "Full Changelog \n- Fix unexpected logging (#547)  link \n- dont log dup keys (#546)  link",
            "title": "v7.0.8-v.77"
        },
        {
            "location": "/release-notes/#v708-v76",
            "text": "Full Changelog \n- pub  link \n- add lookup by tag code (#538)  link \n- 9ci/domain9#1118 Add test, replace handleUnexpected with handleException (#533)  link",
            "title": "v7.0.8-v.76"
        },
        {
            "location": "/release-notes/#v708-v75",
            "text": "Full Changelog \n- release  link \n- Merge pull request #532 from yakworks/zip-util  link \n- Update zip util to zip directories recursively  link",
            "title": "v7.0.8-v.75"
        },
        {
            "location": "/release-notes/#v708-v74",
            "text": "Full Changelog \n- release  link \n- Rally-Security jwt cookie token, DataProblem.ex goes to details (#530)  link \n- added verify-no-snapshots  link",
            "title": "v7.0.8-v.74"
        },
        {
            "location": "/release-notes/#v708-v73",
            "text": "Full Changelog \n- AsyncSecureService (#529)  link",
            "title": "v7.0.8-v.73"
        },
        {
            "location": "/release-notes/#v708-v72",
            "text": "Full Changelog \n- trigger release  link \n- Dev merge, fairly large amount of changes (#527)  link \n- notes for future ref and remove the docker/k8s stuff  link",
            "title": "v7.0.8-v.72"
        },
        {
            "location": "/release-notes/#v708-v71",
            "text": "Full Changelog \n- Assign default orgid on user create 9ci/domain9#987 (#520)  link",
            "title": "v7.0.8-v.71"
        },
        {
            "location": "/release-notes/#v708-v70",
            "text": "Full Changelog \n- trigger release  link \n- 9ci/domain9#961 Add orgId column to user (#518)  link",
            "title": "v7.0.8-v.70"
        },
        {
            "location": "/release-notes/#v708-v69",
            "text": "Full Changelog \n- trigger release  link \n- basic design flushed out (#516)  link",
            "title": "v7.0.8-v.69"
        },
        {
            "location": "/release-notes/#v708-v68",
            "text": "Full Changelog \n- Merge pull request #515 from yakworks/queryargs_remove_ctrl_params  link \n- fix for filtering out params  link",
            "title": "v7.0.8-v.68"
        },
        {
            "location": "/release-notes/#v708-v67",
            "text": "Full Changelog \n- trigger release  link \n- move XXX for activity to fixme as its one big realted issue (#514)  link \n- Sync job transform results closure (#457)  link",
            "title": "v7.0.8-v.67"
        },
        {
            "location": "/release-notes/#v708-v66",
            "text": "Full Changelog \n- trigger release  link \n- no signed commits for pages (#513)  link \n- decrypt vault for pages so it has gpg key for signing (#512)  link \n- mods for vault and new restriction (#511)  link \n- Merge pull request #510 from yakworks/bulkErrorIncludes  link \n- change for bulkErrorIncludes  link",
            "title": "v7.0.8-v.66"
        },
        {
            "location": "/release-notes/#v708-v65",
            "text": "Full Changelog \n- trigger release  link \n- bump to 0.5.2 for external messages.properties (#505)  link \n- 9ci/domain9#888 Add test to verify tht bulk response contains original data if there was error (#507)  link \n- fix excel formatting  link \n- fix excel formatting (#508)  link \n- remove logger  link \n- Update SecService.groovy  link \n- add log.debug for username  link",
            "title": "v7.0.8-v.65"
        },
        {
            "location": "/release-notes/#v708-v64",
            "text": "Full Changelog \n- release change to error list  link \n-  don't put error if it's empty list 9ci/domain9#884 (#506)  link \n- Get restify work with bootRun (#504)  link \n- Allow publishEvent to work with object instead of requiring spring ApplicationEvent  link \n- Oapi api-docs (#497)  link \n- Oapi (#496)  link \n- Oapi (#495)  link \n- fix includesKey and includes getting picked up as fields. (#494)  link \n-  9ci/domain9#726 Add tests (#486)  link \n- #491 Add test to verify that SyncjobContext generates proper json whe\u2026 (#493)  link",
            "title": "v7.0.8-v.64"
        },
        {
            "location": "/release-notes/#v708-v63",
            "text": "Full Changelog \n- release fix to json  link \n- Merge pull request #492 from yakworks/491-bulk-json-fix  link \n- Add comment  link \n- #491 Fix Bulk response json, update & fix tests  link \n- refactor activity (#490)  link \n- Activity links (#489)  link",
            "title": "v7.0.8-v.63"
        },
        {
            "location": "/release-notes/#v708-v62",
            "text": "Full Changelog \n- release params on  link \n- Merge pull request #488 from yakworks/job-params-fix  link \n- Set params on syncjob args  link \n- App ctx publish event (#487)  link \n- Openapi (#485)  link",
            "title": "v7.0.8-v.62"
        },
        {
            "location": "/release-notes/#v708-v61",
            "text": "Full Changelog \n- release with org dim validation  link \n- 9ci/domain9#816 Org member validation (#484)  link",
            "title": "v7.0.8-v.61"
        },
        {
            "location": "/release-notes/#v708-v60",
            "text": "Full Changelog \n- release  link \n- fix scrollable to reomove forward only as it fails on postgres  link",
            "title": "v7.0.8-v.60"
        },
        {
            "location": "/release-notes/#v708-v59",
            "text": "Full Changelog \n- release pagination on projections  link \n- 482 paging projections (#483)  link \n- add getUserIdByName (#481)  link \n- Add a check for GrailsUser : Coz with okta, it is possible tht its an OauthUser (#480)  link",
            "title": "v7.0.8-v.59"
        },
        {
            "location": "/release-notes/#v708-v58",
            "text": "Full Changelog \n- release  link \n- handleUnexpected will return the Problem if its an instance of one already.  link \n- Icu4j (#479)  link",
            "title": "v7.0.8-v.58"
        },
        {
            "location": "/release-notes/#v708-v57",
            "text": "Full Changelog \n- relase with Fix CSV path key map  link \n- 9ci/domain9#777 - Fix CSV path key map reader to initialize map  (#471)  link \n- Update Contact.groovy  link",
            "title": "v7.0.8-v.57"
        },
        {
            "location": "/release-notes/#v708-v56",
            "text": "Full Changelog \n- release contact isPrimary  link \n- Update Contact.groovy (#470)  link",
            "title": "v7.0.8-v.56"
        },
        {
            "location": "/release-notes/#v708-v55",
            "text": "Full Changelog \n- release with csv bulk import  link \n- Merge pull request #469 from yakworks/655-bulk-csv  link \n- Add comment  link \n- 9ci/domain9#655 Implement bulk csv upload  link \n- if params booleean conversion  link \n- Remove ignore  link \n- Fix : Check if param exists thn use it, dont use groovy truth as it would never use param if param value was falsy  link \n- 9ci/domain9#655 Add a general purpose Csv to Map transformer  link",
            "title": "v7.0.8-v.55"
        },
        {
            "location": "/release-notes/#v708-v54",
            "text": "Full Changelog \n- release with contact lookup on update and org lookup on contact create  link \n- lookup org (#468)  link \n- Merge pull request #467 from yakworks/_741_contact_update_lookup  link \n- Update ContactRepo.groovy  link \n- Update ContactRepo.groovy  link \n- add lookup  link",
            "title": "v7.0.8-v.54"
        },
        {
            "location": "/release-notes/#v708-v53",
            "text": "Full Changelog \n- release  link \n- Update BulkableRepo.groovy  link \n- Update version.properties  link \n- Merge pull request #465 from yakworks/726-bulkable-enhancements  link \n- Codenarc fix  link \n- release with bulk change to use success and error includes  link \n- Merge pull request #464 from yakworks/726-bulkable-enhancements  link \n- Update BulkableRepo.groovy  link \n- 9ci/domain9#726 Different list of includes for error response building  link",
            "title": "v7.0.8-v.53"
        },
        {
            "location": "/release-notes/#v708-v52",
            "text": "Full Changelog \n- release  link \n- Dev (#463)  link",
            "title": "v7.0.8-v.52"
        },
        {
            "location": "/release-notes/#v708-v51",
            "text": "Full Changelog \n- release  link \n- Dev (#451)  link",
            "title": "v7.0.8-v.51"
        },
        {
            "location": "/release-notes/#v708-v50",
            "text": "Full Changelog \n- release  link \n- Dev merge (#442)  link",
            "title": "v7.0.8-v.50"
        },
        {
            "location": "/release-notes/#v708-v49",
            "text": "Full Changelog \n- release new version  link",
            "title": "v7.0.8-v.49"
        },
        {
            "location": "/release-notes/#v708-v48",
            "text": "Full Changelog \n- release  link \n- Merge pull request #431 from yakworks/dev  link \n- hard code customer and source to be returned as data if exists on error (#430)  link \n- put data back in for errors, RNDC is using it, better to have them  link \n- dont set syncJob (#427)  link \n- Update version.properties  link \n- publish with fix for null Strings  link \n- Merge pull request #424 from yakworks/handle-empty-strings  link \n- remove printlns  link \n- Codenarc fixes  link \n- 9ci/domain9#597 Empty strings should be set as null  link \n- back to snapshot  link \n- rm  link \n- release with fix for special characters in csv  link \n- Merge pull request #422 from yakworks/csv  link \n- Remove BOM/ZWNBSP from lines  link \n- fix version.properties as circleci failed on make ship.release  link \n- release changes to csv processing  link \n- Merge pull request #421 from yakworks/565-zip-helpers  link \n- Fix spotless  link \n- domain9#565 Add zip helpers  link \n- Dev (#420)  link \n- release with csv import  link \n- Csv related stuff (Work in progress) (#416)  link \n- support sort param for multiple fields seperated by comma, ex: 'num:asc, name:desc' and json in same format as above, ex '{num:\"asc\", name:\"desc\"}' (#419)  link",
            "title": "v7.0.8-v.48"
        },
        {
            "location": "/release-notes/#v708-v45",
            "text": "Full Changelog \n- release with change for parallel turned off  link \n- Take asyncEnabled from params - ability to override parallel processi\u2026 (#413)  link",
            "title": "v7.0.8-v.45"
        },
        {
            "location": "/release-notes/#v708-v44",
            "text": "Full Changelog \n- release  link \n- standardize qSearch and params (#415)  link \n- Rest list problem handling (#414)  link \n- Mango order (#412)  link",
            "title": "v7.0.8-v.44"
        },
        {
            "location": "/release-notes/#v708-v43",
            "text": "Full Changelog \n- release v43  link \n- Meta map (#409)  link",
            "title": "v7.0.8-v.43"
        },
        {
            "location": "/release-notes/#v708-v42",
            "text": "Full Changelog \n- release so I can release domain9  link \n- reverts #407 which was for 9ci/domain9#526 (#408)  link \n- Merge pull request #407 from yakworks/526-custaccount-org-dims  link \n- #526 Handle orgdimensions for custAccount  link \n- fix json parsing when body is empty with tests Request, toString bett\u2026 (#406)  link \n- result and problem traits (#405)  link",
            "title": "v7.0.8-v.42"
        },
        {
            "location": "/release-notes/#v708-v41",
            "text": "Full Changelog \n- release  link \n- problem move (#404)  link \n- results and problem api with new ICU messageSource (#403)  link",
            "title": "v7.0.8-v.41"
        },
        {
            "location": "/release-notes/#v708-v40",
            "text": "Full Changelog \n- release 40  link \n- REST outapi (In progress) (#390)  link",
            "title": "v7.0.8-v.40"
        },
        {
            "location": "/release-notes/#v708-v39",
            "text": "Full Changelog \n- release  link \n- lookup for member orgs (#402)  link",
            "title": "v7.0.8-v.39"
        },
        {
            "location": "/release-notes/#v708-v38",
            "text": "Full Changelog \n- release  link \n- Fix entitymap lists (#401)  link \n- getProperty working, added in EnumUtils and getter for OrgType (#400)  link \n- Oeg find lookup test (#399)  link \n- remove bad views that had old apiError (#398)  link \n- Api includes (#397)  link",
            "title": "v7.0.8-v.38"
        },
        {
            "location": "/release-notes/#v708-v37",
            "text": "Full Changelog \n- release  link \n- Rest controller rename exception (#396)  link \n- secrole named (#395)  link \n- refactor so everything is in a common includes map on both domain and config (#394)  link \n- fix build for gsonviews  link \n- exclude rally bootstrap.class from jar  link \n- Json entitymap (#389)  link",
            "title": "v7.0.8-v.37"
        },
        {
            "location": "/release-notes/#v708-v36",
            "text": "Full Changelog \n- Dependency part2 (#388)  link \n- add gorm-test-support, publish to repo.9ci first then to sonotype maven central  link \n- release  link \n- Dependency fix (#385)  link",
            "title": "v7.0.8-v.36"
        },
        {
            "location": "/release-notes/#v708-v35",
            "text": "Full Changelog \n- release  link \n- dont use generic publish for snapshots, use publishJavaLibraryPublicationToMavenRepository  link \n- snapshot to true  link \n- Shipyak266 sonatype publish (#384)  link \n- Shipyak gradle upgrade (#382)  link",
            "title": "v7.0.8-v.35"
        },
        {
            "location": "/release-notes/#v708-v33",
            "text": "Full Changelog \n- fix mem to old gradle way so we dont get gradle exit value 137  link \n- fix assemble, move more compile to implementation config  link \n- Gradle cleanup compile to implementation (#381)  link \n- 9ci/domain9#464 Add test to reveal transaction issue (#380)  link \n- add test to update by sourceId (#376)  link \n- 9ci/domain9#464 Cleanup FIXMEs, remove batchTrx which commited trx during bulk operation (#379)  link \n- bump to grails 4.0.12 latests and java11 prep (#378)  link",
            "title": "v7.0.8-v.33"
        },
        {
            "location": "/release-notes/#v708-v32",
            "text": "Full Changelog \n- release 32  link \n- move to parseJsonBytes so tests dont get confused (#374)  link \n- Async pool (#373)  link \n- Merge master (#372)  link",
            "title": "v7.0.8-v.32"
        },
        {
            "location": "/release-notes/#v708-v31",
            "text": "Full Changelog \n- trigger release  link \n- Bulk controller ops (#370)  link \n- 425 lookups (#364)  link \n- resolves #357, intial design, needs tests (#368)  link \n- 356 bulkable async futures (#367)  link \n- tweaks for DBDialectService and datediff, clean up name (#366)  link \n- fix changelog and setting to autoset snapsho backt to true on release  link",
            "title": "v7.0.8-v.31"
        },
        {
            "location": "/release-notes/#v708-v30",
            "text": "Full Changelog \n- turn org.gradle.parallel=true back on  link \n- release  link \n- Updated for postgres (#358)  link \n- back to snapshot  link",
            "title": "v7.0.8-v.30"
        },
        {
            "location": "/release-notes/#v708-v29",
            "text": "Full Changelog \n- release Bulkable Contacts  link \n- make Contact bulkable (#359)  link \n- Fix BulkRestApiSpec (#349)  link \n- 413 ApiError on bulkable commits (#354)  link \n- new vault with sops, refactor steps into circle so its clearer when we have a failure and where (#351)  link \n- Benchmarks (#350)  link \n- back to snapshot  link",
            "title": "v7.0.8-v.29"
        },
        {
            "location": "/release-notes/#v708-v28",
            "text": "Full Changelog \n- Merge pull request #347 from yakworks/jobtrait fixrestrepositoryapi  link \n- add tests and xxx  link \n- move everything to jobTrait and fix restRepositoryApi  link",
            "title": "v7.0.8-v.28"
        },
        {
            "location": "/release-notes/#v708-v27",
            "text": "Full Changelog \n- cleanup and fixmes (#345)  link",
            "title": "v7.0.8-v.27"
        },
        {
            "location": "/release-notes/#v708-v26",
            "text": "Full Changelog \n- Parallel each (#346)  link",
            "title": "v7.0.8-v.26"
        },
        {
            "location": "/release-notes/#v708-v25",
            "text": "Full Changelog \n- fix bad build.yml  link \n- fix async errors  link \n- Merge branch 'async'  link \n- change asyn so only each parralel  link \n- Async (#344)  link \n- asyn refactor and clean up old unused stuff from benchmarks  link \n- #339 Bulkable tests (#343)  link \n- Trx service (#342)  link \n- FIXME comments for #339 (#340)  link",
            "title": "v7.0.8-v.25"
        },
        {
            "location": "/release-notes/#v708-v25_1",
            "text": "Full Changelog \n- #339 Bulkable tests (#343)  link \n- Trx service (#342)  link \n- FIXME comments for #339 (#340)  link",
            "title": "v7.0.8-v.25"
        },
        {
            "location": "/release-notes/#v708-v25_2",
            "text": "Full Changelog \n- #339 Bulkable tests (#343)  link \n- Trx service (#342)  link \n- FIXME comments for #339 (#340)  link",
            "title": "v7.0.8-v.25"
        },
        {
            "location": "/release-notes/#v708-v24",
            "text": "Full Changelog \n- 9ci/domain9#370 Fix stackoverflow when there's list of maps in incoming bulk  json (#337)  link",
            "title": "v7.0.8-v.24"
        },
        {
            "location": "/release-notes/#v708-v23",
            "text": "Full Changelog \n- moark for release  link \n- clean up (#338)  link",
            "title": "v7.0.8-v.23"
        },
        {
            "location": "/release-notes/#v708-v22",
            "text": "Full Changelog \n- 9ci/domain9#331 bulkable - fixes (#332)  link",
            "title": "v7.0.8-v.22"
        },
        {
            "location": "/release-notes/#v708-v21",
            "text": "Full Changelog \n- Crossref repos (#336)  link",
            "title": "v7.0.8-v.21"
        },
        {
            "location": "/release-notes/#v708-v20",
            "text": "Full Changelog \n- 325 tags (#335)  link \n- Merge branch 'master' of  https://github.com/yakworks/gorm-tools   link \n- back to snapshot  link",
            "title": "v7.0.8-v.20"
        },
        {
            "location": "/release-notes/#v708-v19",
            "text": "Full Changelog \n- Update version.properties  link \n- Update version.properties  link",
            "title": "v7.0.8-v.19"
        },
        {
            "location": "/release-notes/#v708-v17",
            "text": "Full Changelog \n- Update version.properties  link \n- relase v18  link \n- Merge pull request #328 from yakworks/jobImpl  link \n- Merge branch 'jobImpl' of  https://github.com/yakworks/gorm-tools  into jobImpl  link \n- Update BulkableRepo.groovy  link \n- Fix test  link \n- rename item to data  link \n- Set source on job  link \n- Small fixes  link \n- Small fix  link \n- 9ci/domain9#331 bulkCreate improvements  link \n- Fix method signature  link \n- Return sourceId in response  link \n- rename need of using list: key for bulk create. Rename bulkCreate to bulk  link \n- Fix test  link \n- make state column same as other domains  link \n- Exclude controllers plugin  link \n- Merge branch 'master' into jobImpl  link \n- 9ci/domain9#331 Initial implementation for bulk import  link \n- Merge branch 'master' of  https://github.com/yakworks/gorm-tools   link \n- back to snapshot  link \n- Merge branch 'master' into jobImpl  link \n- Merge branch 'master' into jobImpl  link \n- Update JobSpec.groovy  link \n- Update OrgRepo.groovy  link \n- codenarc  link \n- Update JobRepo.groovy  link \n- clean ups  link \n- Update JobSpec.groovy  link \n- phase one of BUlkable  link \n- spotless  link \n- Update JobRepo.groovy  link \n- add javadocs  link \n- add test to create Job  link \n- move impl to main rally  link \n- jobImpl  link \n- cleanup  link \n- Update JobRepoSpec.groovy  link \n- ./gradlew :gorm-tools:spotlessApply  link \n- fix test  link \n- Update JobRepoSpec.groovy  link \n- Update JobRepoSpec.groovy  link \n- JobImpl test  link \n- Merge branch 'master' into sourceTrait  link \n- jobImpl  link \n- ./gradlew :gorm-tools:spotlessApply  link \n- ./gradlew :rally-domain:spotlessApply  link \n- sourceTrait  link \n- Job with state  link \n- rename status to stae, implements from repo not domain  link \n- first pass on bulkable and Job  link",
            "title": "v7.0.8-v.17"
        },
        {
            "location": "/release-notes/#v708-v16",
            "text": "Full Changelog \n- Update version.properties  link \n- Associations (#329)  link \n- upgrade shipkit, fix bad function call for apply_tpl  link \n- trigger release  link \n- Rest API : Handle DataAccess exception and return error message (#322)  link \n- GormRepo for common doAssociations (#326)  link \n- 323 collection handling (#324)  link \n- Sec tweaks (#321)  link \n- feat: added new domain AppUserToken for rest api auth, restify demo i\u2026 (#320)  link \n- new shipkit v1.0.11 (#319)  link \n- modify how k8s is published (#318)  link",
            "title": "v7.0.8-v.16"
        },
        {
            "location": "/release-notes/#v708-v15",
            "text": "Full Changelog",
            "title": "v7.0.8-v.15"
        },
        {
            "location": "/release-notes/#v708-v14",
            "text": "Full Changelog",
            "title": "v7.0.8-v.14"
        },
        {
            "location": "/release-notes/#v708-v13",
            "text": "Full Changelog",
            "title": "v7.0.8-v.13"
        },
        {
            "location": "/release-notes/#v708-v10",
            "text": "Full Changelog",
            "title": "v7.0.8-v.10"
        },
        {
            "location": "/release-notes/#v708-v9",
            "text": "Full Changelog",
            "title": "v7.0.8-v.9"
        },
        {
            "location": "/release-notes/#v708-v8",
            "text": "Full Changelog",
            "title": "v7.0.8-v.8"
        },
        {
            "location": "/release-notes/#v708-v7",
            "text": "Full Changelog",
            "title": "v7.0.8-v.7"
        },
        {
            "location": "/release-notes/#v708-v6",
            "text": "Full Changelog",
            "title": "v7.0.8-v.6"
        },
        {
            "location": "/release-notes/#v708-v5",
            "text": "Full Changelog",
            "title": "v7.0.8-v.5"
        },
        {
            "location": "/release-notes/#v708-v4",
            "text": "Full Changelog",
            "title": "v7.0.8-v.4"
        },
        {
            "location": "/release-notes/#v708-v3",
            "text": "Full Changelog",
            "title": "v7.0.8-v.3"
        },
        {
            "location": "/release-notes/#v708-v2",
            "text": "Full Changelog",
            "title": "v7.0.8-v.2"
        },
        {
            "location": "/release-notes/#v708-v1",
            "text": "Full Changelog",
            "title": "v7.0.8-v.1"
        },
        {
            "location": "/release-notes/#v6112-v6",
            "text": "Full Changelog",
            "title": "v6.1.12-v.6"
        },
        {
            "location": "/release-notes/#v6112-v5",
            "text": "Full Changelog",
            "title": "v6.1.12-v.5"
        },
        {
            "location": "/release-notes/#v6112-v4",
            "text": "Full Changelog",
            "title": "v6.1.12-v.4"
        },
        {
            "location": "/release-notes/#v6112-v3",
            "text": "Full Changelog  Release notes were automatically generated by  Shipkit",
            "title": "v6.1.12-v.3"
        },
        {
            "location": "/release-notes/#6112-v3-snapshot",
            "text": "2020-09-02 - 31 commits by  Joshua B  (28), alexeyzvegintcev (3) - published to   Fix benchmarks  (#241)  Publish test  (#240)  Errors json  (#237)  added tests and beefed up rstify project. fixed @GormRepository annot\u2026  (#236)  Rest api config service  (#235)  Identity enums  (#234)  Q search fix  (#233)  App domains  (#232)  make enums for operations in mango.  (#231)  Mango q search  (#230)  Q search and Sorting  (#228)  enable ability to assign id and have it be used instead of creating a\u2026  (#227)  Mango multisorting  (#226)  Mango rest api and gorm 6.1.12  (#225)",
            "title": "6.1.12-v.3-SNAPSHOT"
        },
        {
            "location": "/release-notes/#6112-v3-snapshot_1",
            "text": "2020-09-02 - 11 commits by  Joshua B  (10), alexeyzvegintcev (1) - published to   Fix benchmarks  (#241)  Publish test  (#240)  Errors json  (#237)",
            "title": "6.1.12-v.3-SNAPSHOT"
        },
        {
            "location": "/release-notes/#6112-v3-snapshot_2",
            "text": "2020-09-02 - no code changes (no commits) - published to",
            "title": "6.1.12-v.3-SNAPSHOT"
        },
        {
            "location": "/release-notes/#v6112-v2",
            "text": "Full Changelog",
            "title": "v6.1.12-v.2"
        },
        {
            "location": "/release-notes/#6112-v1",
            "text": "2020-08-24 -  20 commits  by  Joshua B  (18), alexeyzvegintcev (2) - published to   added tests and beefed up rstify project. fixed @GormRepository annot\u2026  (#236)  Rest api config service  (#235)  Identity enums  (#234)  Q search fix  (#233)  App domains  (#232)  make enums for operations in mango.  (#231)  Mango q search  (#230)  Q search and Sorting  (#228)  enable ability to assign id and have it be used instead of creating a\u2026  (#227)  Mango multisorting  (#226)  Mango rest api and gorm 6.1.12  (#225)",
            "title": "6.1.12-v.1"
        },
        {
            "location": "/release-notes/#6111-v14",
            "text": "2020-08-04 -  7 commits  by  Joshua B  (6),  alexeyzvegintcev  (1) - published to   test passing and examples of rest controllers created from yml  (#224)  Fix mango with sort  (#223)  Rest json paging  (#222)  Rest merge  (#221)",
            "title": "6.1.11-v.14"
        },
        {
            "location": "/release-notes/#6111-v14_1",
            "text": "2020-08-04 -  5 commits  by  Joshua B  (4),  alexeyzvegintcev  (1) - published to   test passing and examples of rest controllers created from yml  (#224)  Fix mango with sort  (#223)  Rest json paging  (#222)  Rest merge  (#221)",
            "title": "6.1.11-v.14"
        },
        {
            "location": "/release-notes/#6111-v13",
            "text": "2020-04-28 -  3 commits  by sudhir nimavat (2),  jdabal  (1) - published to   Mongo query fix  (#220)",
            "title": "6.1.11-v.13"
        },
        {
            "location": "/release-notes/#6111-v12",
            "text": "2019-11-27 -  1 commit  by  Sudhir Nimavat  - published to   Fix NPE when class does not have any field with explicit bindable  (#218)",
            "title": "6.1.11-v.12"
        },
        {
            "location": "/release-notes/#6111-v11",
            "text": "2019-11-25 -  1 commit  by  Sudhir Nimavat  - published to",
            "title": "6.1.11-v.11"
        },
        {
            "location": "/release-notes/#216-should-be-able-to-deep-bind-nested-instance-217",
            "text": "",
            "title": "216 - Should be able to deep bind nested instance (#217)"
        },
        {
            "location": "/release-notes/#6111-v10",
            "text": "2019-11-21 -  2 commits  by  jdabal  (1),  sudhir nimavat  (1) - published to",
            "title": "6.1.11-v.10"
        },
        {
            "location": "/release-notes/#214-fix-bindable-should-work-for-reloadable-env-215",
            "text": "",
            "title": "214 Fix bindable - should work for reloadable env (#215)"
        },
        {
            "location": "/release-notes/#6111-v9",
            "text": "2019-08-21 -  6 commits  by  alexey.zvegintcev  (5),  jdabal  (1) - published to   Criteria improvments  (#212)",
            "title": "6.1.11-v.9"
        },
        {
            "location": "/release-notes/#6111-v8",
            "text": "2019-07-16 -  2 commits  by  alexey.zvegintcev  (1),  Sudhir Nimavat  (1) - published to   ErrorMesage service handling of Persistence exception  (#211)",
            "title": "6.1.11-v.8"
        },
        {
            "location": "/release-notes/#6111-v7",
            "text": "2019-06-26 -  7 commits  by  Joshua B  - published to   Add results model  (#210)",
            "title": "6.1.11-v.7"
        },
        {
            "location": "/release-notes/#6111-v6",
            "text": "2019-06-21 -  3 commits  by  Sudhir Nimavat  (2),  Joshua B  (1) - published to   set snapshot to false  (#209)  Hibernatespec cleanup  (#208)",
            "title": "6.1.11-v.6"
        },
        {
            "location": "/release-notes/#6111-v5",
            "text": "2019-06-18 -  1 commit  by  alexeyzvegintcev  - published to   Fixed issue in BeanPathTool when nested object is not in db rel 9ci/r\u2026  (#206)",
            "title": "6.1.11-v.5"
        },
        {
            "location": "/release-notes/#6111-v4",
            "text": "2019-06-13 -  1 commit  by  Sudhir Nimavat  - published to",
            "title": "6.1.11-v.4"
        },
        {
            "location": "/release-notes/#202-fix-externalconfigawarespec-204",
            "text": "",
            "title": "202 Fix ExternalConfigAwareSpec (#204)"
        },
        {
            "location": "/release-notes/#6111-v3",
            "text": "2019-06-12 -  1 commit  by  Sudhir Nimavat  - published to   202 external config aware test trait  (#203)",
            "title": "6.1.11-v.3"
        },
        {
            "location": "/release-notes/#6111-v2",
            "text": "2019-06-07 -  2 commits  by  Joshua B  - published to   No pull requests referenced in commit messages.",
            "title": "6.1.11-v.2"
        },
        {
            "location": "/release-notes/#6111-v1",
            "text": "2019-06-04 -  3 commits  by  Joshua B  - published to   Stash fubar  (#199)",
            "title": "6.1.11-v.1"
        },
        {
            "location": "/release-notes/#623",
            "text": "2019-05-27 -  1 commit  by  Joshua B  - published to   upgrad grails 3.3.10 and gorm 6.1.12  (#198)",
            "title": "6.2.3"
        },
        {
            "location": "/release-notes/#622",
            "text": "2019-05-20 -  4 commits  by  Joshua B  - published to     rename parallelTools  (#195)",
            "title": "6.2.2"
        },
        {
            "location": "/release-notes/#621",
            "text": "2019-05-14 -  1 commit  by  Joshua B  - published to   Fix args not being set in BeforePersistEvent  (#194)",
            "title": "6.2.1"
        },
        {
            "location": "/release-notes/#620",
            "text": "2019-05-14 -  2 commits  by alexey.zvegintcev (1),  Joshua B  (1) - published to   require RepoListener annotation on event methods in the GormRepo repos\u2026   (#193)",
            "title": "6.2.0"
        },
        {
            "location": "/release-notes/#617",
            "text": "2019-05-09 -  2 commits  by  alexey.zvegintcev  (1),  Joshua B  (1) - published to   Added handling for mssql dialect  (#190)",
            "title": "6.1.7"
        },
        {
            "location": "/release-notes/#616",
            "text": "2019-05-07 -  1 commit  by  Joshua B  - published to   No pull requests referenced in commit messages.",
            "title": "6.1.6"
        },
        {
            "location": "/release-notes/#615",
            "text": "2019-05-07 -  23 commits  by 4 authors - published to   Commits:  sudhir nimavat  (16),  Joshua B  (4), alexeyzvegintcev (2), jdabal (1)  Upgrade to shipyak  (#189)  Codenark cleanup  (#188)  181 Fix EntityMapBinder issue  (#182)  Added getYear method for localDates  (#180)",
            "title": "6.1.5"
        },
        {
            "location": "/release-notes/#614",
            "text": "2018-05-22 - no code changes (no commits) - published to",
            "title": "6.1.4"
        },
        {
            "location": "/release-notes/#613",
            "text": "2018-04-26 -  1 commit  by  Joshua B  - published to   Codenarc property refactor shipkit  (#179)",
            "title": "6.1.3"
        },
        {
            "location": "/release-notes/#612",
            "text": "2018-04-24 - 514 commits by 7 authors - published to   Commits:  Joshua B  (173), alexeyzvegintcev (139), sudhir nimavat (125),  Nikita Pavlov  (43), Joshua Burnett (32), jdabal (1),  Ken Roberts  (1)  Yakworks gradle plugin shipkit  (#176)  Fix unit test issue with repos  (#175)  Add an ability to bind associations with bindableTo property in domains  (#174)  Use existing reference of association if not null  (#173)  Repo update  (#172)  Spotless  (#171)  Project Build refactor  (#170)  Circleci  (#164)  160 traits for integration tests  (#163)  Test data map refactor  (#162)  150 jsonify includes  (#161)  Domain repo crud spec  (#159)  154 refactor tests  (#156)  Travis fail refactor jdbc id gen  (#155)  Refactor tests to use Spock  (#154)  Fixes for domain repo test and mock id generator  (#151)  more test cleanup to make it DRY. Added TestDataJson with static buil\u2026  (#149)  Refactor tests  (#148)  fixes #145  (#146)  Add tests for setting beanName for a SpringBeanIdGenerator  (#145)  clean up code, remove publics  (#144)  Add codenarc for @CompileStatic #138  (#143)  remove refactored benchmarks. Simplify, simplify, simplify  (#141)  Benchmark redo  (#140)  Codenarcs for @CompileStatic and grailsApplication.config  (#138)",
            "title": "6.1.2"
        },
        {
            "location": "/release-notes/#75-benchmarks-for-updates-136",
            "text": "",
            "title": "75 Benchmarks for updates (#136)"
        },
        {
            "location": "/release-notes/#51-update-docs-135",
            "text": "84 benchmarks 2 nd  lvl cache  (#134)  82 entity binder  (#133)  129 domain test refactoring  (#132)",
            "title": "51 update docs (#135)"
        },
        {
            "location": "/release-notes/#51-add-docs-for-refreshable-beans-131",
            "text": "",
            "title": "51 Add docs for refreshable beans (#131)"
        },
        {
            "location": "/release-notes/#117-add-docs-for-timezone-handling-for-dates-130",
            "text": "DomainAutoTest questions and docs  (#129)",
            "title": "117 - Add docs for timezone handling for dates (#130)"
        },
        {
            "location": "/release-notes/#127-docs-128",
            "text": "DomainAutoTest associations handling #90  (#126)  Exception refactoring #74  (#124)",
            "title": "127 Docs: (#128)"
        },
        {
            "location": "/release-notes/#117-set-hibernate-timezone-to-utc-123",
            "text": "Add error handling for map binder.  (#122)  103 binder jb  (#121)  update to hibernate 5.2 and clean up build  (#119)  Date, LocalDate, LocalDateTime testing and defaults  (#117)  90 domain auto test  (#116)  111 dateutil performance  (#114)  50 gorm repo needs more tests  (#113)  Make date parsing more performant  (#111)  106 id gen foobared  (#109)",
            "title": "117 - set hibernate timezone to utc.  (#123)"
        },
        {
            "location": "/release-notes/#88-add-gormrepository-ast-transformation-108",
            "text": "IdGenerator  (#106)  99 tests for events  (#105)  100 naming strategy  (#104)  EntityMapBinder: whiteList and blackList  (#103)  renaming and moving to be more constent with entity linquistic vs dom\u2026  (#101)  Event Tests  (#99)  Bind action events  (#98)  89 configurable quick searc  (#97)  App ctx static holder helper  (#96)  Rename dao to repository to be consistent with DDD  (#95)  flush and clear to use TransactionStatus, cleaned up tests so they ha\u2026  (#94)",
            "title": "88 Add GormRepository AST transformation (#108)"
        },
        {
            "location": "/release-notes/#51-add-docs-for-external-event-listeners-93",
            "text": "86 async batch support  (#92)  finished adding batch methods to domains, refactored out WithTrx  (#91)  DomainAutoTest implmentation   (#90)  quickSearchFields for Mango should have defaults and be able to be set in config  (#89)  @GormRepository annotation for AST  (#88)  Groovydocs updates  (#87)  ParallelTools and GparsParallelTools need tests and docs  (#86)  81 map binder  (#83)  GormMapBinder enhancments  (#82)  FastBinder refactor to a trait MapBinder  (#81)  Refactor to ParallelTools so the gpars lib is behind the scenes a\u2017\ufffd  (#80)  Mango override for dao  (#79)  Code reformat  (#78)  DbDialectService working with H2 and tests  (#77)  Benchmarks: Add exceptions testing  (#76)  Benchmarks: need update benchmarks now too.  (#75)  Refactor Exceptions  (#74)  63 event performance benchmarks  (#73)",
            "title": "51 Add docs for external event listeners (#93)"
        },
        {
            "location": "/release-notes/#66-cleanup-and-refactor-common-code-to-be-reusable-72",
            "text": "Mango docs  (#71)  Added Pager docs and specs #55  (#70)  63 dao events  (#69)  67 mango query cleanup  (#68)  cleanup MangoQuery to be a service bean  (#67)  refactor commonallity out of DaoDataTest, DaoHibernateSpec and DaoPluginHelper  (#66)  set Events for Dao  (#63)  Cleanup #52  (#62)  Added docs for MultiFormatDateConverter #48  (#61)  49 mango query refactored  (#59)  Docs: Id Generator  (#58)",
            "title": "66 cleanup and refactor common code to be reusable. (#72)"
        },
        {
            "location": "/release-notes/#53-add-daohibernatespec-57",
            "text": "Pager spec tests are virtually non-existant  (#55)  Resolved fixmes for BeanPathTools #47  (#54)  Create DaoDataTest trait and DaoHibernateSpec  (#53)  Clean up  (#52)  External Groovy Scripts For Dao Events  (#51)  GormDao needs more tests  (#50)  GormDao cleanup for list/query  (#49)  Document MultiFormatDateConverter, where its used and what its for  (#48)  FIXME on beanpathTools  (#47)  FastDataBinder  (#46)  Fix codenarc warnings  (#45)  MangoCriteria DetachedCriteria builder  (#41)  32 fixmes cleanup  (#38)  Mkdocs  (#37)  Added tests and javadocs  (#36)  restructure project as gradle multimodule project similar to view-tools  (#34)  Dao move refactor  (#33)  FIXME\u2019s cleanup  (#32)  add docs  (#30)  Document NEWOBJECTID table required for idgenerators to work  (#27)  insert java docs for why doInsert doSave etc are needed  (#26)  Merge rally griner  (#23)  Grails3  (#21)  Hot reloading doesnt work for DAO artefacts  (#16)  Fixes #8  (#15)  grails 3 structure  (#13)  Add scrollable query and GrailaParameterMapRowMapper  (#11)  Create Search Criteria from json or map  (#9)  Use Generics for GormDaoSupport so that we specify static types, and can use @CompileStatic  (#8)  6 grails255 hibernate4 upgrade  (#7)  upgrade to grails 2.5.5 hibernate 4  (#6)  DaoMessage.notFound fails when null id is passed in params.  (#4)  Remove formatParams method  (#3)",
            "title": "53 Add DaoHibernateSpec (#57)"
        },
        {
            "location": "/repository/intro/",
            "text": "Quick Start Example\n\u00b6\n\n\nTo show what Repository data services are all about let\u2019s walk through an example.\n\n\nDomain setup\n\u00b6\n\n\nLets assume we are setting up a way to track details for this Project. We might setup a couple of domains like this. \n\n\n//change the default contraints to be nullable:true\n\n\ngorm\n.\ndefault\n.\nconstraints\n \n=\n \n{\n\n    \n'*'\n(\nnullable:\ntrue\n)\n\n\n}\n\n\n\n@GrailsCompileStatic\n\n\nclass\n \nProject\n \n{\n\n    \nString\n \nname\n\n    \nString\n \ndescription\n\n\n    \nGitHubInfo\n \ngitHubInfo\n \n\n\n\n}\n\n\n\n@GrailsCompileStatic\n\n\nclass\n \nGitHubInfo\n \n{\n\n    \nLong\n \nrepId\n         \n//1829344\n\n    \nString\n \nslug\n         \n//yakworks/gorm-tools\n\n    \nString\n \ndescription\n  \n//gorm tools for a clean shaved yak\n\n\n}\n\n\n\n\n\nand lets say we have a map, perhaps that came from a restful json request or some other service, test data etc...\n\n\nparams\n \n=\n \n[\n\n    \nname:\n \n'gorm-tools'\n,\n\n    \ngitHubInfo:\n \n[\n\n        \nrepId:\n \n1829344\n,\n\n        \nslug:\n \n'yakworks/gorm-tools'\n,\n\n    \n]\n\n\n]\n\n\n\n\n\nStock Grails Gorm\n\u00b6\n\n\nUsing stock Grails\n \nGorm\n we would probably implement something like the following \nsimplified boiler plate design pattern for the \nC\n in CRUD\n\n\n@GrailsCompileStatic\n \n@Transactional\n\n\nclass\n \nProjectService\n \n{\n\n\n    \nProject\n \ncreateNew\n(\nMap\n \ndata\n){\n\n        \ndef\n \nproject\n \n=\n \nnew\n \nProject\n()\n\n        \nproject\n.\nproperties\n \n=\n \ndata\n\n        \nproject\n.\nsave\n(\nfailOnError:\ntrue\n)\n \n//throw runtime to roll back if error\n\n    \n}\n\n\n    \n//.... other imps\n\n\n}\n\n\n\n// elsewhwere, probably in a controller action, we would inject the service and use it to save\n\n\n@Autowired\n \nProjectService\n \nprojectService\n\n\n...\n\n\nprojectService\n.\ncreateNew\n(\nparams\n)\n\n\n\n or perhaps we would do it with the new Data Services\n\n\nUsing the Repository\n\u00b6\n\n\nWith this Gorm repository plugin\n, we have shaved the yak for you and each domain has a Repository automatically \nsetup for this pattern. So with this plugin all the boiler plate from above can be replaced with 1 line!\n\n\n// elsewhere, probably in a controller action. \n\n\nProject\n.\ncreate\n(\nparams\n)\n\n\n\n\n\nThats it. The \nProject.create()\n actually delegates to the Default\nGormRepo\n.create(). The \ncreate\n is wrapped in a transaction, creates the intance,\nbinds the data and defaults to saving with \nfailOnError:true\n. \nLike all transactional methods if the method is called from inside another transaction it will use it\notherwise it creates a new one. \n\n\n\n\n \nOther Repository Domain Methods\n\nYou can do the same thing as above for an \nupdate\n or \ndelete\n. \nThe details of whats available can be seen in the \nGormRepoEntity\n trait or in the \nGormRepoEntity source\n and are outlined below\n\n\n\n\nTesting the Domain\n\u00b6\n\n\nIf you used the script to create the domains then the tests will already be in place for us or you can add one manually like so.\n\n\npackage\n \ntesting\n\n\n\nimport\n \nyakworks.testing.gorm.hibernate.AutoHibernateSpec\n\n\nimport\n \nspock.lang.Specification\n\n\n\nclass\n \nProjectSpec\n \nextends\n \nAutoHibernateSpec\n<\nProject\n>\n \n{\n\n  \n/** automatically runs tests on persist(), create(), update(), delete().*/\n\n\n}\n\n\n\n\n\nNotice the absence of test methods? Running with the the mantra of \"convetion over configuration\" and \"intelligent defaults\"\n\nDomainAutoTest\n will mock the domain, setup and create the data for you then exercise the domain and the default repository service for you.\nWe'll see in the next section how to override the automated tests in the DomainAutoTest. \n\n\nImplementing ProjectRepo Service\n\u00b6\n\n\nThe \nDefaultGormRepo\n that is setup for the Project domain will of course not always be adequate for the business logic.\nAgain running with the \"intelligent defaults but easy to override\" mantra we can easily and selectively override the defaults in the repository. \nLets say we want to do something more advanced during the create such as validate and retrieve info from GitHub. \nIts not recomended to autowire beans into the domains for performance reasons\nIt can also be tricky and at times fairly messy trying to modify or create domains using gorm's hibernate inspired event methods.\nSuch as \nbeforeCreate\n inside the Project domain and deal with flushing.\n\n\nWe can abstract out the logic into a ProjectRepo. \n\n\nLets say we wanted to use a service to validate Github repo and retrieve the description on create.\nWe can add a class to the \ngrails-app/repository\n directory as in the following example.\n\n\npackage\n \ntracker\n\n\n\n@CompileStatic\n\n\nclass\n \nProjectRepo\n \nimplements\n \nGormRepo\n<\nProject\n>{\n\n\n    \n@Autowired\n \nGitHubApi\n \ngitHubApi\n\n\n    \n//event method used to update the descriptions with the ones in github\n\n    \n@RepoListener\n\n    \nvoid\n \nafterBind\n(\nProject\n \nproject\n,\n \nMap\n \nparams\n,\n \nAfterBindEvent\n \nbe\n){\n\n        \nMap\n \nrepoInfo\n \n=\n \ngitHubApi\n.\ngetGitRepo\n(\nparams\n.\ngitHubRepo\n)\n\n        \n//check that it was found using the slug or repoId\n\n        \nif\n \n(!\nrepoInfo\n)\n \n            \nthrow\n \nnew\n \nDataRetrievalFailureException\n(\n\"Github Repo is invalid for ${params.gitHubInfo}\"\n)\n\n\n        \nif\n(\nrepoInfo\n.\ndescription\n){\n\n            \n//force the gitHubRepo.description to be whats in github\n\n            \nproject\n.\ngitHubInfo\n.\ndescription\n \n=\n \nrepoInfo\n.\ndescription\n\n            \n//update project.description to be the same if its null\n\n            \nproject\n.\ndescription\n \n=\n \nproject\n.\ndescription\n \n?:\n \nrepoInfo\n.\ndescription\n\n            \nproject\n.\npersist\n()\n \n//optional\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n// elsewhere, you can call and it will be automatically taken care of\n\n\nProject\n.\ncreate\n(\nparams\n)\n\n\n\n\n\nEvents methods and fired spring events are run inside the inherited transaction and as usual an uncaught runtime exception will rollback.\nThe \npersist\n methods is another addition to the domains added by the GormRepoEntity trait. In the example above its not really needed as \nthe changes will be flushed during the transaction commit. They are here to doc whats happening \nand so that validation failures can be easily seen.\n\n\nTesting the ProjectRepo Changes\n\u00b6\n\n\nDomainAutoTest\n already contains default tests for \ncreate\n, \nupdate\n, \npersist\n, \ndelete\n methods, that are called from \nrepo. So if, for example, any changes were made for create method for ProjectRepo:\n\n\n@GormRepository\n\n\nclass\n \nProjectRepo\n \nimplements\n \nGormRepo\n<\nProject\n>\n \n{\n\n\n    \n@Override\n\n    \n@CompileDynamic\n\n    \nOrg\n \ncreate\n(\nMap\n \nparams\n)\n \n{\n\n        \nparams\n.\nname\n \n=\n \n\"#\"\n \n+\n \nparams\n.\nname\n \n        \nsuper\n.\ncreate\n(\nparams\n)\n\n     \n}\n\n\n}\n\n\n\nthen you can override test case to check specific value \n\n\nclass\n \nProjectSpec\n \nextends\n \nDomainAutoTest\n<\nProject\n>\n \n{\n\n\n    \nvoid\n \ntest_create\n()\n \n{\n\n            \nwhen:\n\n            \nD\n \nentity\n \n=\n \ngetDomainClass\n().\ncreate\n(\nvalues\n)\n\n            \nthen:\n\n            \nentity\n.\nid\n \n!=\n \nnull\n\n            \nentity\n.\nname\n[\n0\n]\n \n==\n \n\"#\"\n\n        \n}\n\n\n\n}",
            "title": "Quick Start"
        },
        {
            "location": "/repository/intro/#quick-start-example",
            "text": "To show what Repository data services are all about let\u2019s walk through an example.",
            "title": "Quick Start Example"
        },
        {
            "location": "/repository/intro/#domain-setup",
            "text": "Lets assume we are setting up a way to track details for this Project. We might setup a couple of domains like this.   //change the default contraints to be nullable:true  gorm . default . constraints   =   { \n     '*' ( nullable: true )  }  @GrailsCompileStatic  class   Project   { \n     String   name \n     String   description \n\n     GitHubInfo   gitHubInfo   }  @GrailsCompileStatic  class   GitHubInfo   { \n     Long   repId           //1829344 \n     String   slug           //yakworks/gorm-tools \n     String   description    //gorm tools for a clean shaved yak  }   and lets say we have a map, perhaps that came from a restful json request or some other service, test data etc...  params   =   [ \n     name:   'gorm-tools' , \n     gitHubInfo:   [ \n         repId:   1829344 , \n         slug:   'yakworks/gorm-tools' , \n     ]  ]",
            "title": "Domain setup"
        },
        {
            "location": "/repository/intro/#stock-grails-gorm",
            "text": "Using stock Grails   Gorm  we would probably implement something like the following \nsimplified boiler plate design pattern for the  C  in CRUD  @GrailsCompileStatic   @Transactional  class   ProjectService   { \n\n     Project   createNew ( Map   data ){ \n         def   project   =   new   Project () \n         project . properties   =   data \n         project . save ( failOnError: true )   //throw runtime to roll back if error \n     } \n\n     //.... other imps  }  // elsewhwere, probably in a controller action, we would inject the service and use it to save  @Autowired   ProjectService   projectService  ...  projectService . createNew ( params )  \n or perhaps we would do it with the new Data Services",
            "title": "Stock Grails Gorm"
        },
        {
            "location": "/repository/intro/#using-the-repository",
            "text": "With this Gorm repository plugin , we have shaved the yak for you and each domain has a Repository automatically \nsetup for this pattern. So with this plugin all the boiler plate from above can be replaced with 1 line!  // elsewhere, probably in a controller action.   Project . create ( params )   Thats it. The  Project.create()  actually delegates to the Default GormRepo .create(). The  create  is wrapped in a transaction, creates the intance,\nbinds the data and defaults to saving with  failOnError:true . \nLike all transactional methods if the method is called from inside another transaction it will use it\notherwise it creates a new one.      Other Repository Domain Methods \nYou can do the same thing as above for an  update  or  delete . \nThe details of whats available can be seen in the  GormRepoEntity  trait or in the  GormRepoEntity source  and are outlined below",
            "title": "Using the Repository"
        },
        {
            "location": "/repository/intro/#testing-the-domain",
            "text": "If you used the script to create the domains then the tests will already be in place for us or you can add one manually like so.  package   testing  import   yakworks.testing.gorm.hibernate.AutoHibernateSpec  import   spock.lang.Specification  class   ProjectSpec   extends   AutoHibernateSpec < Project >   { \n   /** automatically runs tests on persist(), create(), update(), delete().*/  }   Notice the absence of test methods? Running with the the mantra of \"convetion over configuration\" and \"intelligent defaults\" DomainAutoTest  will mock the domain, setup and create the data for you then exercise the domain and the default repository service for you.\nWe'll see in the next section how to override the automated tests in the DomainAutoTest.",
            "title": "Testing the Domain"
        },
        {
            "location": "/repository/intro/#implementing-projectrepo-service",
            "text": "The  DefaultGormRepo  that is setup for the Project domain will of course not always be adequate for the business logic.\nAgain running with the \"intelligent defaults but easy to override\" mantra we can easily and selectively override the defaults in the repository. \nLets say we want to do something more advanced during the create such as validate and retrieve info from GitHub. \nIts not recomended to autowire beans into the domains for performance reasons\nIt can also be tricky and at times fairly messy trying to modify or create domains using gorm's hibernate inspired event methods.\nSuch as  beforeCreate  inside the Project domain and deal with flushing.  We can abstract out the logic into a ProjectRepo.   Lets say we wanted to use a service to validate Github repo and retrieve the description on create.\nWe can add a class to the  grails-app/repository  directory as in the following example.  package   tracker  @CompileStatic  class   ProjectRepo   implements   GormRepo < Project >{ \n\n     @Autowired   GitHubApi   gitHubApi \n\n     //event method used to update the descriptions with the ones in github \n     @RepoListener \n     void   afterBind ( Project   project ,   Map   params ,   AfterBindEvent   be ){ \n         Map   repoInfo   =   gitHubApi . getGitRepo ( params . gitHubRepo ) \n         //check that it was found using the slug or repoId \n         if   (! repoInfo )  \n             throw   new   DataRetrievalFailureException ( \"Github Repo is invalid for ${params.gitHubInfo}\" ) \n\n         if ( repoInfo . description ){ \n             //force the gitHubRepo.description to be whats in github \n             project . gitHubInfo . description   =   repoInfo . description \n             //update project.description to be the same if its null \n             project . description   =   project . description   ?:   repoInfo . description \n             project . persist ()   //optional \n         } \n     }  }  // elsewhere, you can call and it will be automatically taken care of  Project . create ( params )   Events methods and fired spring events are run inside the inherited transaction and as usual an uncaught runtime exception will rollback.\nThe  persist  methods is another addition to the domains added by the GormRepoEntity trait. In the example above its not really needed as \nthe changes will be flushed during the transaction commit. They are here to doc whats happening \nand so that validation failures can be easily seen.",
            "title": "Implementing ProjectRepo Service"
        },
        {
            "location": "/repository/intro/#testing-the-projectrepo-changes",
            "text": "DomainAutoTest  already contains default tests for  create ,  update ,  persist ,  delete  methods, that are called from \nrepo. So if, for example, any changes were made for create method for ProjectRepo:  @GormRepository  class   ProjectRepo   implements   GormRepo < Project >   { \n\n     @Override \n     @CompileDynamic \n     Org   create ( Map   params )   { \n         params . name   =   \"#\"   +   params . name  \n         super . create ( params ) \n      }  }  \nthen you can override test case to check specific value   class   ProjectSpec   extends   DomainAutoTest < Project >   { \n\n     void   test_create ()   { \n             when: \n             D   entity   =   getDomainClass (). create ( values ) \n             then: \n             entity . id   !=   null \n             entity . name [ 0 ]   ==   \"#\" \n         }  }",
            "title": "Testing the ProjectRepo Changes"
        },
        {
            "location": "/repository/ref/",
            "text": "The Repository Artefact\n\u00b6\n\n\nThis plugin adds a new artefact type \nRepository\n. Each domain will have a spring bean setup for it if \none doesn't exists already.\n\n\nA repository bean is configured for each domain with a \nDefaultGormRepo\n unless explicit repository class. \n\nThe trait \nGormRepo\n implements the \nRepositoryApi\n interface and is what backs the DefaultGormRepo. \nYou'll mostly use the \nGormRepo\n trait when creating a custom concrete implementation of a Repository.\n\n\nReference to a Repository for given domain class can be easily obtained by calling \nMyDomainClass.repo\n static method.\n\n\nImplementing A Repository\n\u00b6\n\n\nIf you need to override the \nDefaultGormRepo\n that is attached to each domain then you can create your own service\ninside grails-app/repository and name it \nYourDomainNameRepo\n (eg \nOrgRepo\n). \nPlugin will automatically lookup all Repository classes and configure them as spring service beans to be used for \nyour domain.\n\n\nA Repository must either implement \nGormRepo\n Trait or if you wish extend \nDefaultGormRepo\n\n\nExample:\n\n\nclass\n \nOrgRepo\n \nimplements\n \nGormRepo\n<\nOrg\n>\n \n{\n\n\n   \n@RepoListener\n\n   \nvoid\n \nbeforeBind\n(\nOrg\n \norg\n,\n \nMap\n \nparams\n,\n \nBeforeBindEvent\n \nbe\n)\n \n{\n\n       \n//do some thing before bind\n\n\n   \n}\n\n\n   \n@Transactional\n\n   \nboolean\n \nmakeInactive\n(\nLong\n \nid\n){\n\n       \ndef\n \norg\n \n=\n \nOrg\n.\nget\n(\nid\n)\n\n       \n...\n \ndo\n \ntransactional\n \nstuff\n\n       \norg\n.\npersist\n()\n\n   \n}\n\n\n\n}\n\n\n\n\n\n\n\n \n@Transactional\n\nFor performance reasons, @Transactional is not needed on the class \n\n\n\n\nGormRepoEntity Trait\n\u00b6\n\n\nSee Groovydocs api for the \nGormRepoEntity\n that is injected onto all domains.\n\n\nInstance methods added to the domains\n\u00b6\n\n\nEvery domain gets a repository which is either setup for you or setup by implementing \n\nGormRepo\n \nEach method is transactional and will prevent incomplete cascading saves.\n\n\n\n\npersist()\n: calls the GormRepo's persist which in turn calls domain.save(failOnError:true) \n  Throws a \nEntityValidationException\n\n\n\n\n\n\nremove()\n:  calls the GormRepo's remove. \n  Throws a \nEntityNotFoundException\n\n\n\n\nStatics added to the domain\n\u00b6\n\n\n\n\ncreate(params)\n:  calls the repo.create which does the bolier plate code you might find in a scaffolded controller. \ncreates a new instance, sets the params and calls the repository.save (essentially the persist()). \nex:\n \nBook.insertAndSave([name:'xyz',isbn:'123'])\n\nThrows a \nEntityValidationException\n if anything goes wrong\n\n\n\n\n\n\nupdate(params)\n:  calls the repo.update which does the boiler plate code you might find in a scaffolded controller. gets the instance base in the params.id, sets the params and calls the repository.save for it. \nex:\n Book.update([id:11,name:'aaa']) Throws a \nEntityValidationException\n if anything goes wrong\n\n\n\n\n\n\nremove(id)\n:  calls the repository.removeById gets the instance base in the params.id, calls the delete for it. \nex:\n \nBook.remove([id:11])\n\nThrows a \nEntityNotFoundException\n if anything goes wrong\n\n\n\n\n\n\nrepo\n: a quick way to get to the repository for the Domain. It will return the DefaultGormRepo that was auto created \n  or one you defined for the domain under grails-app/repository.\n\n\n\n\nRepository Events\n\u00b6\n\n\nMethods for @RepoListener\n\u00b6\n\n\nEach Repository can implement any of the methods listed below and they will get called during persistence operation if they have the @RepoListener annotation.  \n\n\n\n\nbeforeBind(T instance, Map data, BeforeBindEvent be)\n - Called before a new instance is saved, can be used to do custom data binding or initialize the state of domain etc.\n\n\nafterBind(T instance, Map data, AfterBindEvent be)\n -  Called after databinding is performed.  \n\n\nbeforePersist(T instance, BeforePersistEvent e)\n - Called every time before an instance is saved.  \n\n\nafterPersist(T instance, AfterPersistEvent e)\n - Called every time after an instance is saved.\n\n\nbeforeRemove(T instance, BeforeRemoveEvent e)\n - Called before an instance is deleted. Can be utilized to cleanup related records etc.  \n\n\nafterRemove(T instance, AfterRemoveEvent e)\n -  Called After an instance is deleted.  \n\n\n\n\nGrails Events\n\u00b6\n\n\nThe Repository also provides a possibility to handle events using Grails annotations. Please see docs for \nGrails Events\n.\n\n\nPublishing events\n\u00b6\n\n\nGrails provides two ways for creating events - using \n@Publisher\n annotation on a method and using\n\nEventBus\n directly, please see docs for \nEvent Publishing\n.\nIn case of using publisher annotation Grails takes event id from the method name (method with \n@Publisher\n annotation).\nIf using \nEventBus\n we should specify event id manually.\n\n\nBy default Repository uses \nEventBus\n to create events (see \nRepoEventPublisher\n).\nIt publishes a number of \nRepository Events\n and provides it's own way to build event ids.\nAll ids of repository events correspond to the format \n<domainName>.<eventTypeName>\n.\nAs we can see there are two values separated with a dot. The first comes a name of a domain class, for which an event\nis created and the second - a type of a specific repository event. For example, in case we call \npersist()\n method\non a domain entity called \nOrg\n, the repository invokes several events, one of them is BeforePersist event with id \nOrg.beforePersist\n.\n\n\nSubscribing to events\n\u00b6\n\n\nGrails provides several options for handling events, please see Grails docs for \nEvent Handling\n.\n\n\nIn case of adding \n@Subscriber\n annotation to a method, Grails determines event id from the method name\nby default. For example, methods like \nsomeEvent()\n or \nonSomeEvent()\n listen to the event with id \nsomeEvent\n.\n\n\nDue to the fact that ids of repository events contain \n.\n symbol, we should pass event id to the Subscriber annotation like so:\n\n\n    \n@Subscriber\n(\n\"SomeDomain.someEvent\"\n)\n\n    \nvoid\n \nsomeMethod\n()\n \n{}\n\n\n\n\n\nAccording to Grails docs, a class which contains a listener method (with \n@Subscriber\n annotation) should be a \nspring bean\n.\n\n\nPlease see the example with \nOrgSubscriber\n below:\n\n\nExample\n\n\nimport\n \ngrails.events.annotation.Subscriber\n\n\nimport\n \ngorm.tools.repository.events.BeforePersistEvent\n\n\nimport\n \ngorm.tools.repository.events.AfterPersistEvent\n\n\n\nclass\n \nOrgSubscriber\n \n{\n\n\n    \n@Subscriber\n(\n\"Org.beforePersist\"\n)\n\n    \nvoid\n \nbeforePersist\n(\nBeforePersistEvent\n \nevent\n)\n \n{\n\n       \n// ...\n\n    \n}\n\n\n    \n@Subscriber\n(\n\"Org.afterPersist\"\n)\n\n    \nvoid\n \nafterPersist\n(\nAfterPersistEvent\n \nevent\n)\n \n{\n\n       \n// ...\n\n    \n}\n\n\n}\n\n\n\nIn this example we can see two listeners which handle events that occur before and after\npersisting an entity of the Org domain class.\n\n\nSpring Events\n\u00b6\n\n\nSpring events are recomended over grails.events as they are much more performant if processing large numbers of domains\nThe Repository also publishes a number of \n\nevents as listed in the Groovydoc API\n\n\nExample\n\n\nimport\n \norg.springframework.context.event.EventListener\n\n\nimport\n \ngorm.tools.repository.events.BeforeBindEvent\n\n\n\nclass\n \nOrgListener\n \n{\n\n\n    \n@EventListener\n\n    \nvoid\n \nbeforeBind\n(\nBeforeBindEvent\n<\nOrg\n>\n \nevent\n)\n \n{\n\n       \nOrg\n \norg\n \n=\n \nevent\n.\nentity\n\n       \n//Do some thing here.\n\n    \n}\n\n\n}\n\n\n\n\n\n\n \nCalling methods which trigger events inside an event listener causes an infinite loop\n\n\n\n\nExternal refreshable beans for Events\n\u00b6\n\n\nSince 2.0 Spring added support for defining beans using supported dynamic languages. Eg. groovy. \nThis makes it possible to create groovy script files outside of application which contains class definition, and use it as spring bean.\nThis feature can be used to create refreshable beans, spring will watch the external script for changes and automatically reload the bean if it has changed.\nThe interval can be configured using \nrefresh-check-delay\n. This feature makes it possible to externalize the event listeners outside of application.\n\n\nHere is an example of how to use an external refreshable bean as event listener. \n\n\nCreate a groovy script containing bean definition for event listener some where on file system out side of grails application directory.\n\n\nFile\n \nOrgEventListener.groovy\n\n\nimport\n \ngrails.events.annotation.Subscriber\n\n\nimport\n \ngorm.tools.repository.events.BeforePersistEvent\n\n\nimport\n \ngorm.tools.repository.events.AfterPersistEvent\n\n\n\npublic\n \nclass\n \nOrgEventListener\n \n{\n\n\n      \n@Subscriber\n(\n\"Org.beforePersist\"\n)\n\n      \nvoid\n \nbeforePersist\n(\nBeforePersistEvent\n \ne\n){\n\n          \nOrg\n \norg\n \n=\n \n(\nOrg\n)\n \ne\n.\nentity\n\n          \n//do some thing with org\n\n      \n}\n\n\n      \n@Subscriber\n(\n\"Org.afterPersist\"\n)\n\n      \nvoid\n \nafterPersist\n(\nAfterPersistEvent\n \ne\n){\n\n          \nOrg\n \norg\n \n=\n \n(\nOrg\n)\n \ne\n.\nentity\n\n          \n//do some thing with org\n\n      \n}\n\n\n}\n\n\n\n\n\nThe above example uses \nSubscriber\n annotation from \nGrails async\n project. The event handler methods will get called asynchronously and does not take part in transaction.\nRepository also publishes events using spring event mechanism which can be used to define event listeners which gets called synchronously and takes part in current transaction. \n\n\nFollowing example shows how to define synchronous event listener.\n\n\nimport\n \norg.springframework.context.ApplicationListener\n \n\nimport\n \ngorm.tools.repository.events.BeforePersistEvent\n\n\n\nclass\n \nOrgEventListener\n \nimplements\n \nApplicationListener\n<\nBeforePersistEvent\n<\nOrg\n>>\n  \n{\n\n\n    \nvoid\n \nonApplicationEvent\n(\nBeforePersistEvent\n<\nOrg\n>\n \nevent\n)\n \n{\n\n        \nOrg\n \norg\n \n=\n \nevent\n.\nentity\n\n        \n//dome some thing with org.\n\n    \n}\n\n\n}\n \n\n\n\n\nDefine \nOrgEventListener\n as spring bean in \ngrails-app/conf/spring/resources.groovy\n\n\n \nxmlns\n \nlang:\n \n\"http://www.springframework.org/schema/lang\"\n\n \nlang\n.\ngroovy\n(\nid:\n \n\"orgEventListener\"\n,\n \n'script-source'\n:\n \n\"file:<path to OrgEventListener.groovy>\"\n,\n \n'refresh-check-delay'\n:\n \n1000\n)\n\n\n\n\n\nNow the \nrefreshableBean\n can be injected into any other bean. Spring will reload it automatically if the RefreshableBean.groovy changes.\n\n\nSee \nSpring dynamic languages support\n for more details on dynamic language support.\n\n\nRepoUtil, RepoMessage Helpers\n\u00b6\n\n\nSee \nRepoUtil\n\n\nRepoUtil:\n\u00b6\n\n\ncheckFound(entity, Map params,String domainClassName)\n checks does the entity exists, if not throws \nEntityNotFoundException\n with human readable error text\n\n\ncheckVersion(entity,ver)\n checks the passed in version with the version on the entity (entity.version) make sure entity.version is not greater, throws OptimisticLockingFailureException\n\n\nflush()\n flushes the session\n\n\nclear()\n clears session cache\n\n\nflushAndClear()\n flushes the session and clears the session cache\n\n\nRepoMessage contains bunch of help methods for creating text messages\n\u00b6\n\n\nSee \nRepoMessage\n\n\nThe example below shows how to build \nsaved\n message for a domain:\n\n\n    \nUser\n \nuser\n \n=\n \nnew\n \nUser\n(\nid:\n100\n,\nversion:\n1\n)\n\n\n    \nMap\n \nmsg\n \n=\n \nRepoMessage\n.\nsaved\n(\nuser\n)\n\n    \nassert\n \n'default.saved.message'\n \n==\n \nmsg\n.\ncode\n \n//i18 code\n\n    \nassert\n \n100\n \n==\n \nmsg\n.\nargs\n[\n1\n]\n\n\n\n\n\nList of available messages\n\n\n\n\nsaved\n\n\nnot saved\n\n\nupdated\n\n\nnot updated\n\n\ndeleted\n\n\nnot deleted\n\n\nnotFound\n\n\noptimisticLockingFailure - Another user has updated the resource while you were editing\n\n\n\n\nGorm-tools provides its own types of exceptions to handle errors which relate to domains.\n\n\nEntityValidationException\n\u00b6\n\n\nSee \nEntityValidationException\n\n\nAn extension of the default ValidationException. It is possible to pass the entity and the message map.\n\n\nEntityNotFoundException\n\u00b6\n\n\nSee \nEntityNotFoundException\n\n\nAn extension of the EntityValidationException to be able to handle rest request which should respond with 404 error.\n\n\nAsync batch processing support\n\u00b6\n\n\nPlugin makes it easy to process list of batches asynchronously with transaction using \nParallelTools\n. \n\nGparsParallelTools\n is default implementation provided by the plugin.\n\n\nbatchSize\n - Is the batchsize used for slicing the list. The default value is obtained from \nhibernate.jdbc.batch_size\n configuration setting. However it can be explicitely passed in args as shown in below example.\n\n\npoolSize\n - Is the size of Gpars thread pool used by \nGparsParallelTools\n. The default value can configured using \ngorm.tools.async.poolSize\n. If not configured, it will use the default poolsize used by Gpars. which is available processors + 1\n\n\nExample\n:\n\nclass\n \nTestService\n \n{\n\n    \nParallelTools\n \nparallelTools\n\n\n    \nvoid\n \ninsertBatches\n(\nList\n<\nMap\n>\n \nlist\n)\n \n{\n\n        \nparallelTools\n.\nparallelCollate\n([\nbatchSize:\n100\n],\n \nlist\n)\n \n{\n \nMap\n \nrecord\n,\n \nMap\n \nargs\n \n->\n\n            \nOrg\n.\ncreate\n(\nrecord\n)\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\nThe above code snippet will slice the list into batches of 100 and run each batch in parallel and wrap it in transaction. \n\n\nThe list can be processed in parallel without it being wrapped in transaction using \nparallelTools.parallel\n method.\n\n\nparallelTools\n.\nparallel\n(\nparallelTools\n.\ncollate\n(\nlist\n))\n \n{\n \nList\n \nbatch\n,\n \nMap\n \nargs\n \n->\n\n    \n//do some thing with the batch.\n\n\n}\n\n\n\n\n\nTesting support\n\u00b6\n\n\nPlugin provides \nGormToolsTest\n and \nGormToolsHibernateSpec\n\nTo make it easy to write tests which utilizes repository.\n\n\nWriting unit tests using GormToolsTest\n\nGormToolsTest extends grails DataTest and configures a repository bean for every mock domain.\n\nThe repository class must exist in same package as the domain class, or else, it will configure \nDefaultGormRepo as the repository for the given domain.\n\n\nclass\n \nCitySpec\n \nextends\n \nSpecification\n \nimplements\n \nGormToolsTest\n \n{\n\n\n   \nvoid\n \nsetup\n()\n \n{\n\n     \nmockDomain\n(\nCity\n)\n\n   \n}\n\n\n   \nvoid\n \n\"test create\"\n()\n \n{\n\n     \ngiven:\n\n     \nMap\n \nparams\n \n=\n \n[\nname:\n\"Chicago\"\n]\n\n\n     \nwhen:\n\n     \nCity\n \ncity\n \n=\n \nCity\n.\ncreate\n(\nparams\n)\n\n\n     \nthen:\n\n     \ncity\n.\nname\n \n==\n \n\"Chicago\"\n\n   \n}\n\n\n}\n\n\n\n\n\nGormToolsHibernateSpec\n\nGormToolsHibernateSpec extends HibernateSpec and setups repository beans for domains. \nCan be used to unit test with full hibernate support with inmemory database.\n\n\nclass\n \nCitySpec\n \nextends\n \nGormToolsHibernateSpec\n \n{\n\n\n  \nstatic\n \nList\n \nentityClasses\n \n=\n \n[\nCity\n]\n\n\n   \nvoid\n \n\"test create\"\n()\n \n{\n\n     \ngiven:\n\n     \nMap\n \nparams\n \n=\n \n[\nname:\n\"Chicago\"\n]\n\n\n     \nwhen:\n\n     \nCity\n \ncity\n \n=\n \nCity\n.\ncreate\n(\nparams\n)\n\n     \n//or City.repo.create(params)\n\n\n     \nthen:\n\n     \ncity\n.\nname\n \n==\n \n\"Chicago\"\n\n   \n}\n\n\n}\n\n\n\n\n\nWhen \ngetDomainClasses()\n is overridden GormToolsHibernateSpec will try to find the repository in the same package as domain class. \nAlternatively if \ngetPackageToScan()\n is provided, it will find all the repository from the given package and below it. \n\n\nDomainAutoTest\n\nAlso plugin provides \nDomainAutoTest\n abstract class that contains default tests cases for CRUD operations. \n\nDomainAutoTest\n will mock the domain, setup and create the data for you then exercise the domain and the default repository service for you.\nSee example bellow:\n\n\nimport\n \nyakworks.testing.gorm.hibernate.AutoHibernateSpec\n\n\nimport\n \ntesting.Project\n\n\n\nclass\n \nProjectSpec\n \nextends\n \nAutoHibernateSpec\n<\nProject\n>\n \n{\n\n\n  \n/** automatically runs tests on persist(), create(), update(), delete().*/\n\n\n\n}\n\n\n\n\n\nThe next methods will be added and executed for Project class:\n\n\n\n\ntest_create\n\n\ntest_update\n\n\ntest_persist\n\n\ntest_delete\n\n\n\n\nEach of them can be overridden by the method with the same name if needed. \n\n\nTest data is build with help of \nBuildExampleData\n and [BuildExampleHolder]. \n\n\nBuildExampleHolder - is a holder that stores BuildExampleData instances for domains, to avoid creating of the same values \nseveral times\n\n\nBuildExampleData is class that builds test data based on \nexample\n property from constraints section. If domain class has association\nthat shouldn't be \nnull\n(has constrain \nnullable: false\n), creates test data for it to, left null otherwise.\nDates in \nexample\n should be string format, they will be parsed to dates.",
            "title": "Reference"
        },
        {
            "location": "/repository/ref/#the-repository-artefact",
            "text": "This plugin adds a new artefact type  Repository . Each domain will have a spring bean setup for it if \none doesn't exists already.  A repository bean is configured for each domain with a  DefaultGormRepo  unless explicit repository class.  \nThe trait  GormRepo  implements the  RepositoryApi  interface and is what backs the DefaultGormRepo. \nYou'll mostly use the  GormRepo  trait when creating a custom concrete implementation of a Repository.  Reference to a Repository for given domain class can be easily obtained by calling  MyDomainClass.repo  static method.",
            "title": "The Repository Artefact"
        },
        {
            "location": "/repository/ref/#implementing-a-repository",
            "text": "If you need to override the  DefaultGormRepo  that is attached to each domain then you can create your own service\ninside grails-app/repository and name it  YourDomainNameRepo  (eg  OrgRepo ). \nPlugin will automatically lookup all Repository classes and configure them as spring service beans to be used for \nyour domain.  A Repository must either implement  GormRepo  Trait or if you wish extend  DefaultGormRepo  Example:  class   OrgRepo   implements   GormRepo < Org >   { \n\n    @RepoListener \n    void   beforeBind ( Org   org ,   Map   params ,   BeforeBindEvent   be )   { \n        //do some thing before bind \n\n    } \n\n    @Transactional \n    boolean   makeInactive ( Long   id ){ \n        def   org   =   Org . get ( id ) \n        ...   do   transactional   stuff \n        org . persist () \n    }  }      @Transactional \nFor performance reasons, @Transactional is not needed on the class",
            "title": "Implementing A Repository"
        },
        {
            "location": "/repository/ref/#gormrepoentity-trait",
            "text": "See Groovydocs api for the  GormRepoEntity  that is injected onto all domains.",
            "title": "GormRepoEntity Trait"
        },
        {
            "location": "/repository/ref/#instance-methods-added-to-the-domains",
            "text": "Every domain gets a repository which is either setup for you or setup by implementing  GormRepo  \nEach method is transactional and will prevent incomplete cascading saves.   persist() : calls the GormRepo's persist which in turn calls domain.save(failOnError:true) \n  Throws a  EntityValidationException    remove() :  calls the GormRepo's remove. \n  Throws a  EntityNotFoundException",
            "title": "Instance methods added to the domains"
        },
        {
            "location": "/repository/ref/#statics-added-to-the-domain",
            "text": "create(params) :  calls the repo.create which does the bolier plate code you might find in a scaffolded controller. \ncreates a new instance, sets the params and calls the repository.save (essentially the persist()).  ex:   Book.insertAndSave([name:'xyz',isbn:'123']) \nThrows a  EntityValidationException  if anything goes wrong    update(params) :  calls the repo.update which does the boiler plate code you might find in a scaffolded controller. gets the instance base in the params.id, sets the params and calls the repository.save for it.  ex:  Book.update([id:11,name:'aaa']) Throws a  EntityValidationException  if anything goes wrong    remove(id) :  calls the repository.removeById gets the instance base in the params.id, calls the delete for it.  ex:   Book.remove([id:11]) \nThrows a  EntityNotFoundException  if anything goes wrong    repo : a quick way to get to the repository for the Domain. It will return the DefaultGormRepo that was auto created \n  or one you defined for the domain under grails-app/repository.",
            "title": "Statics added to the domain"
        },
        {
            "location": "/repository/ref/#repository-events",
            "text": "",
            "title": "Repository Events"
        },
        {
            "location": "/repository/ref/#methods-for-repolistener",
            "text": "Each Repository can implement any of the methods listed below and they will get called during persistence operation if they have the @RepoListener annotation.     beforeBind(T instance, Map data, BeforeBindEvent be)  - Called before a new instance is saved, can be used to do custom data binding or initialize the state of domain etc.  afterBind(T instance, Map data, AfterBindEvent be)  -  Called after databinding is performed.    beforePersist(T instance, BeforePersistEvent e)  - Called every time before an instance is saved.    afterPersist(T instance, AfterPersistEvent e)  - Called every time after an instance is saved.  beforeRemove(T instance, BeforeRemoveEvent e)  - Called before an instance is deleted. Can be utilized to cleanup related records etc.    afterRemove(T instance, AfterRemoveEvent e)  -  Called After an instance is deleted.",
            "title": "Methods for @RepoListener"
        },
        {
            "location": "/repository/ref/#grails-events",
            "text": "The Repository also provides a possibility to handle events using Grails annotations. Please see docs for  Grails Events .",
            "title": "Grails Events"
        },
        {
            "location": "/repository/ref/#publishing-events",
            "text": "Grails provides two ways for creating events - using  @Publisher  annotation on a method and using EventBus  directly, please see docs for  Event Publishing .\nIn case of using publisher annotation Grails takes event id from the method name (method with  @Publisher  annotation).\nIf using  EventBus  we should specify event id manually.  By default Repository uses  EventBus  to create events (see  RepoEventPublisher ).\nIt publishes a number of  Repository Events  and provides it's own way to build event ids.\nAll ids of repository events correspond to the format  <domainName>.<eventTypeName> .\nAs we can see there are two values separated with a dot. The first comes a name of a domain class, for which an event\nis created and the second - a type of a specific repository event. For example, in case we call  persist()  method\non a domain entity called  Org , the repository invokes several events, one of them is BeforePersist event with id  Org.beforePersist .",
            "title": "Publishing events"
        },
        {
            "location": "/repository/ref/#subscribing-to-events",
            "text": "Grails provides several options for handling events, please see Grails docs for  Event Handling .  In case of adding  @Subscriber  annotation to a method, Grails determines event id from the method name\nby default. For example, methods like  someEvent()  or  onSomeEvent()  listen to the event with id  someEvent .  Due to the fact that ids of repository events contain  .  symbol, we should pass event id to the Subscriber annotation like so:       @Subscriber ( \"SomeDomain.someEvent\" ) \n     void   someMethod ()   {}   According to Grails docs, a class which contains a listener method (with  @Subscriber  annotation) should be a  spring bean .  Please see the example with  OrgSubscriber  below:  Example  import   grails.events.annotation.Subscriber  import   gorm.tools.repository.events.BeforePersistEvent  import   gorm.tools.repository.events.AfterPersistEvent  class   OrgSubscriber   { \n\n     @Subscriber ( \"Org.beforePersist\" ) \n     void   beforePersist ( BeforePersistEvent   event )   { \n        // ... \n     } \n\n     @Subscriber ( \"Org.afterPersist\" ) \n     void   afterPersist ( AfterPersistEvent   event )   { \n        // ... \n     }  }  \nIn this example we can see two listeners which handle events that occur before and after\npersisting an entity of the Org domain class.",
            "title": "Subscribing to events"
        },
        {
            "location": "/repository/ref/#spring-events",
            "text": "Spring events are recomended over grails.events as they are much more performant if processing large numbers of domains\nThe Repository also publishes a number of  events as listed in the Groovydoc API  Example  import   org.springframework.context.event.EventListener  import   gorm.tools.repository.events.BeforeBindEvent  class   OrgListener   { \n\n     @EventListener \n     void   beforeBind ( BeforeBindEvent < Org >   event )   { \n        Org   org   =   event . entity \n        //Do some thing here. \n     }  }     \nCalling methods which trigger events inside an event listener causes an infinite loop",
            "title": "Spring Events"
        },
        {
            "location": "/repository/ref/#external-refreshable-beans-for-events",
            "text": "Since 2.0 Spring added support for defining beans using supported dynamic languages. Eg. groovy. \nThis makes it possible to create groovy script files outside of application which contains class definition, and use it as spring bean.\nThis feature can be used to create refreshable beans, spring will watch the external script for changes and automatically reload the bean if it has changed.\nThe interval can be configured using  refresh-check-delay . This feature makes it possible to externalize the event listeners outside of application.  Here is an example of how to use an external refreshable bean as event listener.   Create a groovy script containing bean definition for event listener some where on file system out side of grails application directory.  File   OrgEventListener.groovy  import   grails.events.annotation.Subscriber  import   gorm.tools.repository.events.BeforePersistEvent  import   gorm.tools.repository.events.AfterPersistEvent  public   class   OrgEventListener   { \n\n       @Subscriber ( \"Org.beforePersist\" ) \n       void   beforePersist ( BeforePersistEvent   e ){ \n           Org   org   =   ( Org )   e . entity \n           //do some thing with org \n       } \n\n       @Subscriber ( \"Org.afterPersist\" ) \n       void   afterPersist ( AfterPersistEvent   e ){ \n           Org   org   =   ( Org )   e . entity \n           //do some thing with org \n       }  }   The above example uses  Subscriber  annotation from  Grails async  project. The event handler methods will get called asynchronously and does not take part in transaction.\nRepository also publishes events using spring event mechanism which can be used to define event listeners which gets called synchronously and takes part in current transaction.   Following example shows how to define synchronous event listener.  import   org.springframework.context.ApplicationListener   import   gorm.tools.repository.events.BeforePersistEvent  class   OrgEventListener   implements   ApplicationListener < BeforePersistEvent < Org >>    { \n\n     void   onApplicationEvent ( BeforePersistEvent < Org >   event )   { \n         Org   org   =   event . entity \n         //dome some thing with org. \n     }  }    Define  OrgEventListener  as spring bean in  grails-app/conf/spring/resources.groovy    xmlns   lang:   \"http://www.springframework.org/schema/lang\" \n  lang . groovy ( id:   \"orgEventListener\" ,   'script-source' :   \"file:<path to OrgEventListener.groovy>\" ,   'refresh-check-delay' :   1000 )   Now the  refreshableBean  can be injected into any other bean. Spring will reload it automatically if the RefreshableBean.groovy changes.  See  Spring dynamic languages support  for more details on dynamic language support.",
            "title": "External refreshable beans for Events"
        },
        {
            "location": "/repository/ref/#repoutil-repomessage-helpers",
            "text": "See  RepoUtil",
            "title": "RepoUtil, RepoMessage Helpers"
        },
        {
            "location": "/repository/ref/#repoutil",
            "text": "checkFound(entity, Map params,String domainClassName)  checks does the entity exists, if not throws  EntityNotFoundException  with human readable error text  checkVersion(entity,ver)  checks the passed in version with the version on the entity (entity.version) make sure entity.version is not greater, throws OptimisticLockingFailureException  flush()  flushes the session  clear()  clears session cache  flushAndClear()  flushes the session and clears the session cache",
            "title": "RepoUtil:"
        },
        {
            "location": "/repository/ref/#repomessage-contains-bunch-of-help-methods-for-creating-text-messages",
            "text": "See  RepoMessage  The example below shows how to build  saved  message for a domain:       User   user   =   new   User ( id: 100 , version: 1 ) \n\n     Map   msg   =   RepoMessage . saved ( user ) \n     assert   'default.saved.message'   ==   msg . code   //i18 code \n     assert   100   ==   msg . args [ 1 ]   List of available messages   saved  not saved  updated  not updated  deleted  not deleted  notFound  optimisticLockingFailure - Another user has updated the resource while you were editing   Gorm-tools provides its own types of exceptions to handle errors which relate to domains.",
            "title": "RepoMessage contains bunch of help methods for creating text messages"
        },
        {
            "location": "/repository/ref/#entityvalidationexception",
            "text": "See  EntityValidationException  An extension of the default ValidationException. It is possible to pass the entity and the message map.",
            "title": "EntityValidationException"
        },
        {
            "location": "/repository/ref/#entitynotfoundexception",
            "text": "See  EntityNotFoundException  An extension of the EntityValidationException to be able to handle rest request which should respond with 404 error.",
            "title": "EntityNotFoundException"
        },
        {
            "location": "/repository/ref/#async-batch-processing-support",
            "text": "Plugin makes it easy to process list of batches asynchronously with transaction using  ParallelTools .  GparsParallelTools  is default implementation provided by the plugin.  batchSize  - Is the batchsize used for slicing the list. The default value is obtained from  hibernate.jdbc.batch_size  configuration setting. However it can be explicitely passed in args as shown in below example.  poolSize  - Is the size of Gpars thread pool used by  GparsParallelTools . The default value can configured using  gorm.tools.async.poolSize . If not configured, it will use the default poolsize used by Gpars. which is available processors + 1  Example : class   TestService   { \n     ParallelTools   parallelTools \n\n     void   insertBatches ( List < Map >   list )   { \n         parallelTools . parallelCollate ([ batchSize: 100 ],   list )   {   Map   record ,   Map   args   -> \n             Org . create ( record ) \n         } \n     }  }   The above code snippet will slice the list into batches of 100 and run each batch in parallel and wrap it in transaction.   The list can be processed in parallel without it being wrapped in transaction using  parallelTools.parallel  method.  parallelTools . parallel ( parallelTools . collate ( list ))   {   List   batch ,   Map   args   -> \n     //do some thing with the batch.  }",
            "title": "Async batch processing support"
        },
        {
            "location": "/repository/ref/#testing-support",
            "text": "Plugin provides  GormToolsTest  and  GormToolsHibernateSpec \nTo make it easy to write tests which utilizes repository.  Writing unit tests using GormToolsTest \nGormToolsTest extends grails DataTest and configures a repository bean for every mock domain. \nThe repository class must exist in same package as the domain class, or else, it will configure \nDefaultGormRepo as the repository for the given domain.  class   CitySpec   extends   Specification   implements   GormToolsTest   { \n\n    void   setup ()   { \n      mockDomain ( City ) \n    } \n\n    void   \"test create\" ()   { \n      given: \n      Map   params   =   [ name: \"Chicago\" ] \n\n      when: \n      City   city   =   City . create ( params ) \n\n      then: \n      city . name   ==   \"Chicago\" \n    }  }   GormToolsHibernateSpec \nGormToolsHibernateSpec extends HibernateSpec and setups repository beans for domains. \nCan be used to unit test with full hibernate support with inmemory database.  class   CitySpec   extends   GormToolsHibernateSpec   { \n\n   static   List   entityClasses   =   [ City ] \n\n    void   \"test create\" ()   { \n      given: \n      Map   params   =   [ name: \"Chicago\" ] \n\n      when: \n      City   city   =   City . create ( params ) \n      //or City.repo.create(params) \n\n      then: \n      city . name   ==   \"Chicago\" \n    }  }   When  getDomainClasses()  is overridden GormToolsHibernateSpec will try to find the repository in the same package as domain class. \nAlternatively if  getPackageToScan()  is provided, it will find all the repository from the given package and below it.   DomainAutoTest \nAlso plugin provides  DomainAutoTest  abstract class that contains default tests cases for CRUD operations.  DomainAutoTest  will mock the domain, setup and create the data for you then exercise the domain and the default repository service for you.\nSee example bellow:  import   yakworks.testing.gorm.hibernate.AutoHibernateSpec  import   testing.Project  class   ProjectSpec   extends   AutoHibernateSpec < Project >   { \n\n   /** automatically runs tests on persist(), create(), update(), delete().*/  }   The next methods will be added and executed for Project class:   test_create  test_update  test_persist  test_delete   Each of them can be overridden by the method with the same name if needed.   Test data is build with help of  BuildExampleData  and [BuildExampleHolder].   BuildExampleHolder - is a holder that stores BuildExampleData instances for domains, to avoid creating of the same values \nseveral times  BuildExampleData is class that builds test data based on  example  property from constraints section. If domain class has association\nthat shouldn't be  null (has constrain  nullable: false ), creates test data for it to, left null otherwise.\nDates in  example  should be string format, they will be parsed to dates.",
            "title": "Testing support"
        },
        {
            "location": "/repository/databinding/",
            "text": "Data binding using MapBinder\n\u00b6\n\n\nPlugin comes with a \nMapBinder\n Which is used by a Repository to perform databinding.\nPlugin configures \nEntityMapBinder\n as default implementation of \nMapBinder\n. \nEntityMapBinder\n is similar \nto grails data binder in the sense that it uses registered value converters and fallbacks to spring ConversionService.\nHowever entityMapBinder is optimized to convert most commonly encountered property types such as Numbers and Dates \nwithout going through the converters, thus resulting in faster performance.\n\n\nExample\n\n\nclass\n \nSomeService\n \n{\n\n    \n@Autowired\n\n    \nEntityMapBinder\n \nbinder\n\n\n    \nvoid\n \nfoo\n(\nMap\n \nparams\n)\n \n{\n\n        \nOrg\n \norg\n \n=\n \nnew\n \nOrg\n()\n\n        \nbinder\n.\nbind\n(\norg\n,\n \nparams\n)\n\n    \n}\n\n\n}\n\n\n\n\n\nUsing custom MapBinder\n\nBy default all Repositories use the default \nEntityMapBinder\n for databinding. However when a Repository is explicitly \ncreated for a domain class, and if required, a custom MapBinder implementation can be used to perform databinding as per the need.\n\n\nclass\n \nCustomMapBinder\n \nimplements\n \nMapBinder\n \n{\n\n\n    \npublic\n \n<\nT\n>\n \nGormEntity\n<\nT\n>\n \nbind\n(\nMap\n \nargs\n,\n \nObject\n \ntarget\n,\n \nMap\n<\nString\n,\n \nObject\n>\n \nsource\n,\n \nBindAction\n \nbindAction\n)\n \n{\n\n        \n//implement  \n\n    \n}\n\n\n    \npublic\n \n<\nT\n>\n \nGormEntity\n<\nT\n>\n \nbind\n(\nObject\n \ntarget\n,\n \nMap\n<\nString\n,\n \nObject\n>\n \nsource\n,\n \nBindAction\n \nbindAction\n)\n \n{\n\n        \n//implement\n\n    \n}\n\n\n\n}\n\n\n\nthen register the bean \n\n\nbeans\n \n=\n \n{\n\n    \ncustomMapBinder\n(\nCustomMapBinder\n)\n \n\n}\n\n\n\n\n\nclass\n \nOrgRepo\n \nimplements\n \nGormRepo\n<\nOrg\n>\n \n{\n\n\n    \n@Autowired\n\n    \n@Qualifier\n(\n\"customMapBinder\"\n)\n\n    \nCustomMapBinder\n \nmapBinder\n\n\n    \n.........\n   \n\n}\n\n\n\n\n\nThis will make the OrgRepo use CustomMapBinder for data binding.\n\n\nBinding Associations\n\u00b6\n\n\nGorm tools MapBinder handles associations little differently than Grails data binder for performance reasons.\nHow associations are handled depends on if the associated domain belongs to the domain which is being bound.\nIf the domain being bound is owning side of association and value is of type map, a new instance of associated domain is created.\nIf the association does not use belongsTo then existing instance is loaded if the map contains the id.\nThe databinding on associated domain will be performed only if it belongs to the domain which is being bound\nor the \nbindable:true\n property is added to constraints for this association\n\n\nExample\n\n\nclass\n \nAuthor\n \n{\n\n    \nString\n \nname\n\n\n}\n\n\n\nclass\n \nCategory\n \n{\n\n  \nString\n \nname\n\n\n}\n\n\n\nclass\n \nBook\n \n{\n\n    \nString\n \nname\n\n    \nCategory\n \ncategory\n\n\n    \nstatic\n \nbelongsTo\n \n=\n \n[\nauthor:\nAuthor\n]\n\n\n}\n\n\n\n\n\nGiven the above domain model, when creating a new book. It will not create new instance of Author or category, but will set reference to existing instance if id is provided in parameter.\nIt will create new book and set the author and category to existing records with provided id.\n\n\nBook\n.\ncreate\n([\nname:\n\"Grails In Action\"\n,\n \nauthor:\n[\nid:\n1\n],\n \ncategory:\n[\nid:\n1\n]])\n \n\n\n\n\nHowever a new book can be created when creating a new author, because book belongs to Author.\n\n\nSo following will create a new book instance and set author.book to this new instance.\n\n\nAuthor\n.\ncreate\n(\nname:\n\"test\"\n,\n \nbook:\n[\nname:\n\"Grails in action\"\n])\n\n\n\n\n\nIt is possible to specify the \nbindable: true\n property explicitly for the association in constraints of a parent domain class:\n\n\n    \nclass\n \nBook\n \n{\n\n        \nString\n \nname\n\n        \nCategory\n \ncategory\n\n        \nstatic\n \nconstraints\n \n=\n \n{\n\n            \ncategory\n \nbindable:\ntrue\n\n        \n}\n\n    \n}\n\n\n    \nclass\n \nCategory\n \n{\n\n      \nString\n \nname\n\n    \n}\n\n\n\nIn this case MapBinder checks if constraints for \ncategory\n contains bindable property and then binds \ncategory\n to \nbook\n.\nOtherwise, MapBinder consider the \ncategory\n association as not bindable.",
            "title": "Databinding"
        },
        {
            "location": "/repository/databinding/#data-binding-using-mapbinder",
            "text": "Plugin comes with a  MapBinder  Which is used by a Repository to perform databinding.\nPlugin configures  EntityMapBinder  as default implementation of  MapBinder .  EntityMapBinder  is similar \nto grails data binder in the sense that it uses registered value converters and fallbacks to spring ConversionService.\nHowever entityMapBinder is optimized to convert most commonly encountered property types such as Numbers and Dates \nwithout going through the converters, thus resulting in faster performance.  Example  class   SomeService   { \n     @Autowired \n     EntityMapBinder   binder \n\n     void   foo ( Map   params )   { \n         Org   org   =   new   Org () \n         binder . bind ( org ,   params ) \n     }  }   Using custom MapBinder \nBy default all Repositories use the default  EntityMapBinder  for databinding. However when a Repository is explicitly \ncreated for a domain class, and if required, a custom MapBinder implementation can be used to perform databinding as per the need.  class   CustomMapBinder   implements   MapBinder   { \n\n     public   < T >   GormEntity < T >   bind ( Map   args ,   Object   target ,   Map < String ,   Object >   source ,   BindAction   bindAction )   { \n         //implement   \n     } \n\n     public   < T >   GormEntity < T >   bind ( Object   target ,   Map < String ,   Object >   source ,   BindAction   bindAction )   { \n         //implement \n     }  }  \nthen register the bean   beans   =   { \n     customMapBinder ( CustomMapBinder )   }   class   OrgRepo   implements   GormRepo < Org >   { \n\n     @Autowired \n     @Qualifier ( \"customMapBinder\" ) \n     CustomMapBinder   mapBinder \n\n     .........     }   This will make the OrgRepo use CustomMapBinder for data binding.",
            "title": "Data binding using MapBinder"
        },
        {
            "location": "/repository/databinding/#binding-associations",
            "text": "Gorm tools MapBinder handles associations little differently than Grails data binder for performance reasons.\nHow associations are handled depends on if the associated domain belongs to the domain which is being bound.\nIf the domain being bound is owning side of association and value is of type map, a new instance of associated domain is created.\nIf the association does not use belongsTo then existing instance is loaded if the map contains the id.\nThe databinding on associated domain will be performed only if it belongs to the domain which is being bound\nor the  bindable:true  property is added to constraints for this association  Example  class   Author   { \n     String   name  }  class   Category   { \n   String   name  }  class   Book   { \n     String   name \n     Category   category \n\n     static   belongsTo   =   [ author: Author ]  }   Given the above domain model, when creating a new book. It will not create new instance of Author or category, but will set reference to existing instance if id is provided in parameter.\nIt will create new book and set the author and category to existing records with provided id.  Book . create ([ name: \"Grails In Action\" ,   author: [ id: 1 ],   category: [ id: 1 ]])    However a new book can be created when creating a new author, because book belongs to Author.  So following will create a new book instance and set author.book to this new instance.  Author . create ( name: \"test\" ,   book: [ name: \"Grails in action\" ])   It is possible to specify the  bindable: true  property explicitly for the association in constraints of a parent domain class:       class   Book   { \n         String   name \n         Category   category \n         static   constraints   =   { \n             category   bindable: true \n         } \n     } \n\n     class   Category   { \n       String   name \n     }  \nIn this case MapBinder checks if constraints for  category  contains bindable property and then binds  category  to  book .\nOtherwise, MapBinder consider the  category  association as not bindable.",
            "title": "Binding Associations"
        },
        {
            "location": "/queries-mango/",
            "text": "Gorm-tools provides a convenient way for iterating over records which correspond to a given SQL query.\n\n\nMango Overview\n\u00b6\n\n\nThe primary motive here is to create an easy dynamic way to query via a rest api or using a simple map.\nThe repository comes with a \nquery(criteriaMap, closure)\n method. It allows to get paged list of entities restricted by\nthe properties in the \ncriteriaMap\n. The map could be passed as JSON string or Map. All restrictions should be under \n\ncriteria\n keyword by default, but it can be changed with \nconfig\n.\n\n\nAnything in the optional closure will be passed into Gorm/Hibernate criteria closure\n\n\n\n\nA lot of inspiration was drawn from \nRestdb.io\n\n\nthe query language is similar to \nMongo's\n\n\nand CouchDB's new \nMango selector-syntax\n\n\nAlso inspired by \njson-sql\n\n\n\n\n\n\n \nWhilst selectors have many similarities with MongoDB query documents, \nthese arise more from a similarity of purpose and do not necessarily extend to commonality of function or result.\n\n\n\n\nBasic example\n\n\nOrg\n.\nrepo\n.\nquery\n(\n[\n\n  \ncriteria\n:\n \n[\nname\n:\n \n\"Bill%\"\n,\n \ntype\n:\n \n\"New\"\n]\n,\n\n  \nsort\n:\n \n[\nname\n:\n\"asc\"\n]\n,\n\n  \nmax\n:\n \n20\n\n\n]\n){\n\n  \ngt\n \n\"id\"\n,\n \n5\n\n\n}\n\n\n\n\n\nThe same result can be reached with criteria:\n\n\nCriteria\n \ncriteria\n \n=\n \nOrg\n.\ncreateCriteria\n()\n\n\ncriteria\n.\nlist\n(\nmax\n:\n \n20\n)\n \n{\n\n    \nilike\n \n\"name\"\n,\n \n\"Bill%\"\n\n    \neq\n \n\"type\"\n,\n \n\"New\"\n\n    \ngt\n \n\"id\"\n,\n \n5\n\n    \norder\n(\n\"name\"\n,\n \n\"asc\"\n)\n\n\n}\n\n\n\n\n\nRestful API query\n\u00b6\n\n\nSee the docs here for more examples and info \nhttps://yakworks.github.io/gorm-rest-api/\n\n\nMango QL\n\u00b6\n\n\nThe Mango query language is similar to \nMongo's\n\nand CouchDB's new \nMango selector-syntax\n\nwith some inspiration from \njson-sql\n as well\n\n\nLogical\n\u00b6\n\n\n\n\n\n\n\n\nOp\n\n\nDescription\n\n\nExamples\n\n\n\n\n\n\n\n\n\n\n$and\n\n\ndefault\n\n\n$and: [ {\"name\": \"Belak\"}, {\"status\": \"D\"} ]\n \n equivalent to \n\"name\": \"Belak\", \"status\": \"D\"\n\n\n\n\n\n\n$or\n\n\n\"ors\" them all\n\n\n$or: [ {\"name\": \"Belak\"}, {\"fork\": true} ]\n \n \n$or: {\"name\": \"Belak\", \"fork\": true }\n\n\n\n\n\n\n$not\n\n\nALL not equal, !=, <>\n\n\n$not:{ \"status\": \"Destroyed\", \"dateStatus\": \"2371\" }\n\n\n\n\n\n\n$nor\n\n\nANY one is not equal\n\n\n$nor:{ \"name\": \"Romulan\", \"fork\": 12\n}\n\n\n\n\n\n\n\n\nComparison\n\u00b6\n\n\n\n\n\n\n\n\nOp\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n$gt\n\n\n>  greater than\n\n\n\"cargo\": {\"$gt\": 10000}\n\n\n\n\n\n\n$gte\n\n\n>= greater than or equal\n\n\n\"cargo\": {\"$gte\": 10000}\n\n\n\n\n\n\n$lt\n\n\n<  less than\n\n\n\"cargo\": {\"$lt\": 10000}\n\n\n\n\n\n\n$lte\n\n\n<= less than or equal\n\n\n\"cargo\": {\"$lte\": 10000}\n\n\n\n\n\n\n$between\n\n\nbetween two distinct values\n\n\n\"dateStatus\": {\"$between\": [2300, 2400]}\n\n\n\n\n\n\n$like\n\n\nlike expression\n\n\n\"name\": {\"$like\": \"Rom%\"}\n\n\n\n\n\n\n$ilike\n\n\nlike auto-append %\n\n\n\"name\": {\"$ilike\": \"rom\"}\n\n\n\n\n\n\n$eq\n\n\n= equal, concieince for builders\n\n\n\"salary\": {\"$eq\": 10}\n | \n\"salary\": 10\n\n\n\n\n\n\n$ne\n\n\nnot equal, !=, <>\n\n\n\"age\" : {\"$ne\" : 12}}\n\n\n\n\n\n\n$in\n\n\nMatch any value in array\n\n\n\"field\" : {\"$in\" : [value1, value2, ...]\n\n\n\n\n\n\n$nin\n\n\nNot match any value in array\n\n\n\"field\" : {\"$nin\" : [value1, value2, ...]}\n\n\n\n\n\n\n$isNull\n\n\nValue is null\n\n\n\"name\": \"$isNull\" \\|\n\"name\": null\n\n\n\n\n\n\n$isNotNull\n\n\nValue is not null\n\n\n\"name\": \"$isNotNull\" \\|\n\"name\":{$ne: null}\n\n\n\n\n\n\n\n\nFields\n\u00b6\n\n\n\n\n\n\n\n\nOp\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n$gtf\n\n\n>  another field\n\n\n\"cargo\": {\"$gtf\": \"maxCargo\"}\n\n\n\n\n\n\n$gtef\n\n\n>= field\n\n\n\"cargo\": {\"$gtef\": \"maxCargo\"}\n\n\n\n\n\n\n$ltf\n\n\n<  field\n\n\n\"cargo\": {\"$ltf\": \"maxCargo\"}\n\n\n\n\n\n\n$ltef\n\n\n<= field\n\n\n\"cargo\": {\"$ltef\": \"maxCargo\"}\n\n\n\n\n\n\n$eqf\n\n\n= field\n\n\n\"cargo\": {\"$eqf\": \"controlTotal\"}\n\n\n\n\n\n\n$nef\n\n\nnot equal, !=, <>\n\n\n\"cargo\" : {\"$nef\" : \"controlTotal\"}}\n\n\n\n\n\n\n\n\nConvert to Mango QL\n\u00b6\n\n\nThe \nMangoTidyMap utility\n\ntransforms parameters map to Mango QL criteria map. \nHere is several examples of usage:\n\n\nassert\n \nMangoTidyMap\n.\ntidy\n(\n[\na\n:\n5\n]\n)\n \n==\n \n[\na\n:\n[\n'\n$eq\n'\n:\n5\n]]\n\n\nassert\n \nMangoTidyMap\n.\ntidy\n(\n[\nb\n:\n\"Bill%\"\n]\n)\n \n==\n \n[\nb\n:\n[\n'\n$ilike\n'\n:\n5\n]]\n\n\nassert\n \nMangoTidyMap\n.\ntidy\n(\n[\nc\n:\n \n[\n1\n,\n2\n,\n3\n]]\n)\n \n==\n \n[\nc\n:\n[\n'\n$in\n'\n:\n[\n1\n,\n2\n,\n3\n]]]\n\n\n\n\n\nOne of the useful features of the MangoTidyMap is that it converts path to nested map which is required by \nmangoQuery\n\n\nassert\n \nMangoTidyMap\n.\ntidy\n[\n'\na\n.\nb\n.\nc\n'\n:\n \n3\n]\n)\n \n==\n \n[\na\n:\n[\nb\n:\n[\nc\n:\n[\n'\n$eq\n'\n:\n3\n]]]]\n\n\n\nFor more example take a look on \nMangoTidyMapSpec\n \n\n\nMango query\n\u00b6\n\n\nThe repository by default does not have all the features of mango service, just \nquery\n and \nqueryList\n methods, but both automatically\nconvert map params to mango map, so just \nparams\n or \nrequest.JSON\n can be passed. \n\n\nSee \nMango Api\n to know all features that are provided.\n\n\nExamples\n\u00b6\n\n\nBellow will be a list of supported syntax for params in json format, which is supported:\nAssume we are running these on star trek characters \nhttp://stapi.co/api/v1/rest/character?uid=CHMA0000128908\n\n\n{\n\n  \n\"criteria\"\n:\n \n{\n\n    \n\"name\"\n:\n \n\"Kira%\"\n,\n \n/* if it ends with % then it will us an ilike */\n\n    \n\"gender\"\n:\n \n\"F\"\n,\n \n//no % its straight up\n\n    \n\"placeOfBirth\"\n:\n \n{\n\"$ilike\"\n:\n \n\"bajor%\"\n},\n \n/* a case-insensitive 'like' expression appends the % */\n\n    \n\"hologram\"\n:\n \ntrue\n,\n \n/* boolean */\n\n    \n\"createdDate\"\n:\n \n\"1993-05-16T00:00:00.000Z\"\n,\n \n// dates\n\n    \n\"dateOfBirth\"\n:\n \n\"1957-07-26\"\n \n// dates\n\n    \n\"placeOfBirth\"\n:\n \n{\n\"$eqf\"\n:\n \n\"$placeOfDeath\"\n}\n \n//equals another field in set\n\n  \n},\n\n  \n\"sort\"\n:\n\"name\"\n \n// asc by default\n\n\n}\n\n\n\n\n\nThis would produce in a round about way with criteria builders a where clause like this\n\n\n  \n..\n \nname\n \nlike\n \n\"Kira%\"\n \nAND\n \ngender\n=\n\"F\"\n \nAND\n \nplaceOfBirth\n \nlike\n \n\"bajor%\"\n \nAND\n \nhologram\n \n=\n \ntrue\n\n  \nAND\n \ncreatedDate\n \n=\n \n???\n \nAND\n \ndateOfBirth\n \n=\n \n???\n \nAND\n \nplaceOfBirth\n \n=\n \nplaceOfDeath\n\n  \nORDER\n \nBY\n \nname\n \nASC\n,\n \ndateOfBirth\n \nDESC\n;\n\n\n\n\n\nAssociations\n\u00b6\n\n\n{\n\n  \n\"criteria\"\n:\n \n{\n\n    \n\"customer.id\"\n:\n \n101\n,\n\n    \n\"customerId\"\n:\n \n101\n,\n \n/* check if domain has customerId property, if not then uses customer.id 101 above */\n\n    \n\"customer\"\n:\n \n{\n \n/* nested object way */\n\n      \n\"id\"\n:\n \n101\n,\n\n      \n\"name\"\n:\n \n\"Wal%\"\n\n    \n}\n\n  \n}\n\n  \n\"sort\"\n:\n \n{\n\n    \n\"customer.name\"\n:\n \n\"asc\"\n,\n\n    \n\"tranDate\"\n:\n \n\"desc\"\n\n  \n}\n\n\n}\n\n\n\n\n\nIN Clause\n\u00b6\n\n\n{\n\n  \n\"criteria\"\n:\n \n{\n\n    \n\"customer.id\"\n:\n \n[\n101\n,\n102\n,\n103\n],\n \n/* an array means it will use in/inList */\n\n    \n\"customer\"\n:\n \n[{\n\"id\"\n:\n101\n},{\n\"id\"\n:\n102\n},{\n\"id\"\n:\n103\n}],\n \n//can be in summarized object form as well\n\n    \n\"customer.id\"\n:\n \n[\n101\n,\n102\n,\n103\n],\n \n/* an array means it will use in/inList */\n\n    \n//the 3 above are different ways to do this\n\n    \n\"customer.id\"\n:\n \n{\n\"$in\"\n:\n \n[\n101\n,\n102\n,\n103\n]},\n\n    \n\"customer\"\n:\n \n{\n\n      \n\"id\"\n:\n \n{\n\"$in\"\n:\n \n[\n101\n,\n102\n,\n103\n]}\n\n    \n},\n\n\n    \n\"customer.id\"\n:\n \n{\n\"$nin\"\n:\n \n[\n101\n,\n102\n,\n103\n]},\n \n/* an array means it will use `not { in/inList }`*/\n\n  \n}\n\n\n}\n\n\n\n\n\nFields Comparison Examples\n\u00b6\n\n\n  \n\"amount\"\n:\n \n{\n\"$ne\"\n:\n \n50\n},\n \n/*not equal*/\n\n  \n\"amount\"\n:\n \n{\n\"$gt\"\n:\n \n100\n},\n \n/* greater than value */\n\n  \n\"amount.$gt\"\n:\n \n100\n \n/* another form of the above one, can be useful when json is build, for example from angular model, where  you can't right in object form*/\n\n  \n\"amount\"\n:\n \n{\n\"$ge\"\n:\n \n100\n},\n \n/* greater or equal than value */\n\n\n  \n\"amount\"\n:\n \n{\n\"$lt\"\n:\n \n\"$origAmount\"\n},\n \n/* less than value of another field*/\n\n  \n\"amount\"\n:\n \n{\n\"$le\"\n:\n \n\"$origAmount\"\n},\n \n/* less or equal than value */\n\n\n  \n\"amount\"\n:\n{\n \n//all these will get anded together\n\n    \n\"$gt\"\n:\n \n5.0\n,\n\n    \n\"$lt\"\n:\n \n15.50\n,\n\n    \n\"$ne\"\n:\n \n9.99\n\n  \n},\n\n\n  \n\"amount\"\n:\n \n{\n\"$between\"\n:\n \n[\n0\n,\n100\n]},\n \n/* between value */\n\n\n  \n\"status\"\n:\n \n\"$isNull\"\n \n/* translates to isNull*/\n\n  \n\"status\"\n:\n \n{\n\"$isNull\"\n:\n \ntrue\n},\n \n/* translates to isNull*/\n\n  \n\"status\"\n:\n \n{\n\"$isNull\"\n:\n \nfalse\n},\n \n/* translates to not{ isNull}*/\n\n  \n\"status\"\n:\n \nnull\n \n/* translates to isNull*/\n\n\n\n\n\nLogical operators\n\u00b6\n\n\n    \n\"$or\"\n:\n \n{\n \n// if a single or then it can be done like this\n\n      \n\"customer.name\"\n:\n{\n\"$ilike\"\n:\n \n\"wal\"\n},\n\n      \n\"customer.num\"\n:\n{\n\"$ilike\"\n:\n \n\"wal\"\n}\n\n    \n},\n\n    \n\"$and\"\n:\n[\n \n// multiple ors would need to look like this in an array. only one and can be present too\n\n      \n{\n\n        \n\"$or\"\n:\n \n{\n\n          \n\"customer.name\"\n:\n \n\"John\"\n,\n\n          \n\"customer.name\"\n:\n \n\"Jon\"\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \n\"$or\"\n:\n \n{\n\n          \n\"customer.name\"\n:\n \n\"Mark\"\n,\n\n          \n\"customer.name\"\n:\n \n\"Marc\"\n\n        \n}\n\n      \n}\n\n    \n],\n \n/* this would end up generating `.... and ( (customer.name = 'John' or customer.name = 'Jon')\n\n\n          AND (customer.name = 'Mark' or customer.name = 'Mark') ) ....` */\n\n\n    \n\"$or\"\n:\n[\n \n// again you can only have one of these\n\n      \n{\n \n// the and is default and optional and this accomplishes the same thing as example sbelow\n\n        \n\"customer.name\"\n:\n \n\"Mark\"\n,\n\n        \n\"$or\"\n:\n \n{\n\n          \n\"customer.sales\"\n:\n \n{\n\"$lt\"\n:\n \n10\n},\n\n          \n\"customer.sales\"\n:\n \n\"$isNull\"\n\n        \n}\n\n      \n},\n\n      \n{\n\n        \n\"$and\"\n:\n \n{\n \n//the and can be explicitly specified too if you wish\n\n          \n\"customer.name\"\n:\n \n\"Jim\"\n,\n\n          \n\"customer.sales\"\n:\n \n{\n\"$lt\"\n:\n \n15\n}\n\n        \n}\n\n      \n},\n\n    \n],\n \n/* this would end up generating\n\n\n        ....\n\n\n        AND\n\n\n        (\n\n\n          (customer.name = 'mark' and ( customer.sales < 10 or customer.sales IS NULL))\n\n\n          OR\n\n\n          (customer.name = 'jim' and customer.sales < 15 )\n\n\n        )\n\n\n        .... */\n\n  \n}\n\n\n}\n\n\n\n\n\nQ or Quick Search\n\u00b6\n\n\nQ search - similiar to a search engine search that uses a \nq\n paramter, \nability to search by one string in criteria filters against several domain fields, the value for quick\nsearch can be passed in \n$qSearch\n or \n$q\n keywords. \nThere are 2 ways to specify fields that should be searched against:\n\n\n\n\nin static property \nincludes.qSearch\n as list of strings, see example bellow:\n\nclass\n \nOrg\n \n{\n\n    \nString\n \nname\n\n    \nAddress\n \naddress\n\n\n    \nstatic\n \nincludes\n \n=\n \n[\n\n      \nqSearch:\n \n[\n'name'\n,\n \n'address.city'\n]\n\n    \n]\n\n    \n...\n\n\n\n\ndefault fields in config\n\ngorm\n:\n\n    \ntools\n:\n\n        \nmango\n:\n\n            \nqSearchDefault\n:\n \n[\nname\n,\n \nnum\n,\n \naddress.city\n]\n\n\n\n\n\n\nMango criteria will add \n%\n automatically, if quick search string doesn't have it and will apply \nilike\n statement\nfor each field in \nincludes.qSearch\n. If domain field is not string type, then \neq\n statement will be used.\n\n\nOrg\n.\nrepo\n.\nsearch\n([\ncriteria:\n \n[\n$q\n:\n \n\"abc\"\n],\n \nmax:\n \n20\n])\n\n\n\nSo it is the same as:\n\n\nCriteria\n \ncriteria\n \n=\n \nOrg\n.\ncreateCriteria\n()\n\n\ncriteria\n.\nlist\n(\nmax:\n \n20\n)\n \n{\n\n    \nor\n \n{\n\n        \nilike\n \n\"name\"\n,\n \n\"abc%\"\n\n        \nilike\n \n\"address.city\"\n,\n \n\"abc%\"\n\n    \n}\n\n\n}\n\n\n\n\n\nMango API\n\u00b6\n\n\nMango in the Repository\n\u00b6\n\n\nThe Repository\n implements \nMangoQueryTrait\n Trait\nwhich contains implementation for two query methods:\n\n\nDetachedCriteria\n \nquery\n(\n \nMap\n \nparams\n=[:],\n \nClosure\n \nclosure\n=\nnull\n)\n \n{\n\n        \nmangoQuery\n.\nquery\n(\ngetDomainClass\n(),\n \nparams\n,\n \nclosure\n)\n\n    \n}\n\n\n\nsee docs for \nDetachedCriteria\n\n\n \nList\n \nqueryList\n(\nMap\n \nparams\n=[:],\n \nClosure\n \nclosure\n=\nnull\n){\n\n         \nmangoQuery\n.\nqueryList\n(\ngetDomainClass\n(),\n \nparams\n,\n \nclosure\n)\n\n     \n}\n\n\n\nreturns list of entities with pagination. For pagination take a look at \nPager\n\n\nIf one need to override mango bean for a certain repo it can be achieved in two ways:\n\n\n\n\n\n\nimplement \ngetMangoQuery()\n method that should return instance of the class that implements \nMangoQueryApi\n\n\n\n\n\n\nregister a new bean for custom criteria, and set it for the repo with \n@Qualifier\n annotation\n\n\n\n\n\n\nbeans\n \n=\n \n{\n\n    \nnewMangoQuery\n(\nNewMangoQuery\n)\n \n\n}\n\n\n\n\n\nclass\n \nNewMangoQuery\n \nimplements\n \nMangoQueryApi\n \n{\n\n\n    \n@Override\n\n    \nDetachedCriteria\n \nquery\n(\nClass\n \ndomainClass\n,\n \nMap\n \nparams\n,\n \nClosure\n \nclosure\n \n=\n \nnull\n)\n \n{\n\n       \nreturn\n \nnull\n\n    \n}\n\n\n    \n@Override\n\n    \nList\n \nqueryList\n(\nClass\n \ndomainClass\n,\n \nMap\n \nparams\n,\n \nClosure\n \nclosure\n \n=\n \nnull\n)\n \n{\n\n       \nreturn\n \n[]\n\n    \n}\n\n\n}\n\n\n\n\n\nclass\n \nCityRepo\n \nextends\n \nDefaultGormRepo\n<\nCity\n>\n \n{\n\n\n    \n@Autowired\n\n    \n@Qualifier\n(\n\"newMangoQuery\"\n)\n\n    \nNewMangoQuery\n \nmangoQuery\n\n\n}\n\n\n\n\n\nBuild Mango criteria\n\u00b6\n\n\nUnder the hood Mango uses \nDetachedCriteria\n take a look on main \nbuild method\n\nOne can see that it normalizes params map to make it Mango QL and then adds restrictions to detached criteria based on map,\nif closure is passed then applies it too. \n\n\nCount totals\n\u00b6\n\n\nIf one needs to compute totals for some fields, \nMangoQuery\n \nhas \ncountTotals\n method. Restrictions for it are working in the same way as for query method, so it can be specified \nwith params map and criteria closure.\n\n\nBut the repository beans don't contain this method, so one can call it on mangoQuery bean.\nTo specify what fields sums should be computed for, the list with fields name should be passed.\nSee example:\n\nOrg\n.\nrepo\n.\nmangoQuery\n.\ncountTotals\n(\ndomainClass\n,\n \n[\n\n  \ncriteria:\n \n[\nname:\n \n\"Virgin%\"\n,\n \ntype:\n \n\"New\"\n]\n\n\n],\n \n[\n\"amount\"\n,\n \ncredit\n]){\n\n  \ngt\n \n\"id\"\n,\n \n5\n\n\n}\n\n\n\nResult will be look like: \n[amount: 1500, credit: 440]\n, it doesn't take into account pagination.\n\n\nScrollableQuery\n\u00b6\n\n\nSee \nScrollableQuery\n\n\nExecute a closure for each record\n\u00b6\n\n\nAs you can see in the example below, we can specify the SQL query and provide the closure which is called for each record:\n\n\n    \nScrollableQuery\n \nscrollableQuery\n \n=\n \nnew\n \nScrollableQuery\n(\nnew\n \nColumnMapRowMapper\n(),\n \ndataSource\n,\n \n50\n)\n\n\n    \nscrollableQuery\n.\neachRow\n(\n\"select * from ScrollableQueryTest\"\n)\n \n{\n \nObject\n \nrow\n \n->\n\n        \nprintln\n \nrow\n\n    \n}\n\n\n\n\n\nExecute a closure for each batch of records\n\u00b6\n\n\nUsing \neachBatch\n we can execute a closure for a batch of records.\nThis closure is called for a specified number of records. For example, code below prints size of each batch\n(which is 5) to console:\n\n\n    \nscrollableQuery\n.\neachBatch\n(\n\"select * from ScrollableQueryTest\"\n,\n \n5\n)\n \n{\n \nList\n \nbatch\n \n->\n\n        \nprintln\n \n\"batchSize=${batch.size()}\"\n\n    \n}\n\n\n\n\n\nFetching a list of all records:\n\u00b6\n\n\n\n\n This method holds all rows in memory, so this should not be used if there is going to be large number of rows.\n\n\n\n\n    \nList\n \nvalues\n \n=\n \nscrollableQuery\n.\nrows\n(\n\"select * from ScrollableQueryTest where value='test'\"\n)\n\n\n\n\n\nPathKeyMapRowMapper\n\u00b6\n\n\nSee \nPathKeyMapRowMapper\n\n\nRow mapper which allows to convert data from a given ResultSet instance\nto a grails parameter map, which can be used for databinding.",
            "title": "Mango Query"
        },
        {
            "location": "/queries-mango/#mango-overview",
            "text": "The primary motive here is to create an easy dynamic way to query via a rest api or using a simple map.\nThe repository comes with a  query(criteriaMap, closure)  method. It allows to get paged list of entities restricted by\nthe properties in the  criteriaMap . The map could be passed as JSON string or Map. All restrictions should be under  criteria  keyword by default, but it can be changed with  config .  Anything in the optional closure will be passed into Gorm/Hibernate criteria closure   A lot of inspiration was drawn from  Restdb.io  the query language is similar to  Mongo's  and CouchDB's new  Mango selector-syntax  Also inspired by  json-sql     \nWhilst selectors have many similarities with MongoDB query documents, \nthese arise more from a similarity of purpose and do not necessarily extend to commonality of function or result.   Basic example  Org . repo . query ( [ \n   criteria :   [ name :   \"Bill%\" ,   type :   \"New\" ] , \n   sort :   [ name : \"asc\" ] , \n   max :   20  ] ){ \n   gt   \"id\" ,   5  }   The same result can be reached with criteria:  Criteria   criteria   =   Org . createCriteria ()  criteria . list ( max :   20 )   { \n     ilike   \"name\" ,   \"Bill%\" \n     eq   \"type\" ,   \"New\" \n     gt   \"id\" ,   5 \n     order ( \"name\" ,   \"asc\" )  }",
            "title": "Mango Overview"
        },
        {
            "location": "/queries-mango/#restful-api-query",
            "text": "See the docs here for more examples and info  https://yakworks.github.io/gorm-rest-api/",
            "title": "Restful API query"
        },
        {
            "location": "/queries-mango/#mango-ql",
            "text": "The Mango query language is similar to  Mongo's \nand CouchDB's new  Mango selector-syntax \nwith some inspiration from  json-sql  as well",
            "title": "Mango QL"
        },
        {
            "location": "/queries-mango/#logical",
            "text": "Op  Description  Examples      $and  default  $and: [ {\"name\": \"Belak\"}, {\"status\": \"D\"} ]    equivalent to  \"name\": \"Belak\", \"status\": \"D\"    $or  \"ors\" them all  $or: [ {\"name\": \"Belak\"}, {\"fork\": true} ]     $or: {\"name\": \"Belak\", \"fork\": true }    $not  ALL not equal, !=, <>  $not:{ \"status\": \"Destroyed\", \"dateStatus\": \"2371\" }    $nor  ANY one is not equal  $nor:{ \"name\": \"Romulan\", \"fork\": 12 }",
            "title": "Logical"
        },
        {
            "location": "/queries-mango/#comparison",
            "text": "Op  Description  Example      $gt  >  greater than  \"cargo\": {\"$gt\": 10000}    $gte  >= greater than or equal  \"cargo\": {\"$gte\": 10000}    $lt  <  less than  \"cargo\": {\"$lt\": 10000}    $lte  <= less than or equal  \"cargo\": {\"$lte\": 10000}    $between  between two distinct values  \"dateStatus\": {\"$between\": [2300, 2400]}    $like  like expression  \"name\": {\"$like\": \"Rom%\"}    $ilike  like auto-append %  \"name\": {\"$ilike\": \"rom\"}    $eq  = equal, concieince for builders  \"salary\": {\"$eq\": 10}  |  \"salary\": 10    $ne  not equal, !=, <>  \"age\" : {\"$ne\" : 12}}    $in  Match any value in array  \"field\" : {\"$in\" : [value1, value2, ...]    $nin  Not match any value in array  \"field\" : {\"$nin\" : [value1, value2, ...]}    $isNull  Value is null  \"name\": \"$isNull\" \\| \"name\": null    $isNotNull  Value is not null  \"name\": \"$isNotNull\" \\| \"name\":{$ne: null}",
            "title": "Comparison"
        },
        {
            "location": "/queries-mango/#fields",
            "text": "Op  Description  Example      $gtf  >  another field  \"cargo\": {\"$gtf\": \"maxCargo\"}    $gtef  >= field  \"cargo\": {\"$gtef\": \"maxCargo\"}    $ltf  <  field  \"cargo\": {\"$ltf\": \"maxCargo\"}    $ltef  <= field  \"cargo\": {\"$ltef\": \"maxCargo\"}    $eqf  = field  \"cargo\": {\"$eqf\": \"controlTotal\"}    $nef  not equal, !=, <>  \"cargo\" : {\"$nef\" : \"controlTotal\"}}",
            "title": "Fields"
        },
        {
            "location": "/queries-mango/#convert-to-mango-ql",
            "text": "The  MangoTidyMap utility \ntransforms parameters map to Mango QL criteria map. \nHere is several examples of usage:  assert   MangoTidyMap . tidy ( [ a : 5 ] )   ==   [ a : [ ' $eq ' : 5 ]]  assert   MangoTidyMap . tidy ( [ b : \"Bill%\" ] )   ==   [ b : [ ' $ilike ' : 5 ]]  assert   MangoTidyMap . tidy ( [ c :   [ 1 , 2 , 3 ]] )   ==   [ c : [ ' $in ' : [ 1 , 2 , 3 ]]]   One of the useful features of the MangoTidyMap is that it converts path to nested map which is required by  mangoQuery  assert   MangoTidyMap . tidy [ ' a . b . c ' :   3 ] )   ==   [ a : [ b : [ c : [ ' $eq ' : 3 ]]]]  \nFor more example take a look on  MangoTidyMapSpec",
            "title": "Convert to Mango QL"
        },
        {
            "location": "/queries-mango/#mango-query",
            "text": "The repository by default does not have all the features of mango service, just  query  and  queryList  methods, but both automatically\nconvert map params to mango map, so just  params  or  request.JSON  can be passed.   See  Mango Api  to know all features that are provided.",
            "title": "Mango query"
        },
        {
            "location": "/queries-mango/#examples",
            "text": "Bellow will be a list of supported syntax for params in json format, which is supported:\nAssume we are running these on star trek characters  http://stapi.co/api/v1/rest/character?uid=CHMA0000128908  { \n   \"criteria\" :   { \n     \"name\" :   \"Kira%\" ,   /* if it ends with % then it will us an ilike */ \n     \"gender\" :   \"F\" ,   //no % its straight up \n     \"placeOfBirth\" :   { \"$ilike\" :   \"bajor%\" },   /* a case-insensitive 'like' expression appends the % */ \n     \"hologram\" :   true ,   /* boolean */ \n     \"createdDate\" :   \"1993-05-16T00:00:00.000Z\" ,   // dates \n     \"dateOfBirth\" :   \"1957-07-26\"   // dates \n     \"placeOfBirth\" :   { \"$eqf\" :   \"$placeOfDeath\" }   //equals another field in set \n   }, \n   \"sort\" : \"name\"   // asc by default  }   This would produce in a round about way with criteria builders a where clause like this     ..   name   like   \"Kira%\"   AND   gender = \"F\"   AND   placeOfBirth   like   \"bajor%\"   AND   hologram   =   true \n   AND   createdDate   =   ???   AND   dateOfBirth   =   ???   AND   placeOfBirth   =   placeOfDeath \n   ORDER   BY   name   ASC ,   dateOfBirth   DESC ;",
            "title": "Examples"
        },
        {
            "location": "/queries-mango/#associations",
            "text": "{ \n   \"criteria\" :   { \n     \"customer.id\" :   101 , \n     \"customerId\" :   101 ,   /* check if domain has customerId property, if not then uses customer.id 101 above */ \n     \"customer\" :   {   /* nested object way */ \n       \"id\" :   101 , \n       \"name\" :   \"Wal%\" \n     } \n   } \n   \"sort\" :   { \n     \"customer.name\" :   \"asc\" , \n     \"tranDate\" :   \"desc\" \n   }  }",
            "title": "Associations"
        },
        {
            "location": "/queries-mango/#in-clause",
            "text": "{ \n   \"criteria\" :   { \n     \"customer.id\" :   [ 101 , 102 , 103 ],   /* an array means it will use in/inList */ \n     \"customer\" :   [{ \"id\" : 101 },{ \"id\" : 102 },{ \"id\" : 103 }],   //can be in summarized object form as well \n     \"customer.id\" :   [ 101 , 102 , 103 ],   /* an array means it will use in/inList */ \n     //the 3 above are different ways to do this \n     \"customer.id\" :   { \"$in\" :   [ 101 , 102 , 103 ]}, \n     \"customer\" :   { \n       \"id\" :   { \"$in\" :   [ 101 , 102 , 103 ]} \n     }, \n\n     \"customer.id\" :   { \"$nin\" :   [ 101 , 102 , 103 ]},   /* an array means it will use `not { in/inList }`*/ \n   }  }",
            "title": "IN Clause"
        },
        {
            "location": "/queries-mango/#fields-comparison-examples",
            "text": "\"amount\" :   { \"$ne\" :   50 },   /*not equal*/ \n   \"amount\" :   { \"$gt\" :   100 },   /* greater than value */ \n   \"amount.$gt\" :   100   /* another form of the above one, can be useful when json is build, for example from angular model, where  you can't right in object form*/ \n   \"amount\" :   { \"$ge\" :   100 },   /* greater or equal than value */ \n\n   \"amount\" :   { \"$lt\" :   \"$origAmount\" },   /* less than value of another field*/ \n   \"amount\" :   { \"$le\" :   \"$origAmount\" },   /* less or equal than value */ \n\n   \"amount\" : {   //all these will get anded together \n     \"$gt\" :   5.0 , \n     \"$lt\" :   15.50 , \n     \"$ne\" :   9.99 \n   }, \n\n   \"amount\" :   { \"$between\" :   [ 0 , 100 ]},   /* between value */ \n\n   \"status\" :   \"$isNull\"   /* translates to isNull*/ \n   \"status\" :   { \"$isNull\" :   true },   /* translates to isNull*/ \n   \"status\" :   { \"$isNull\" :   false },   /* translates to not{ isNull}*/ \n   \"status\" :   null   /* translates to isNull*/",
            "title": "Fields Comparison Examples"
        },
        {
            "location": "/queries-mango/#logical-operators",
            "text": "\"$or\" :   {   // if a single or then it can be done like this \n       \"customer.name\" : { \"$ilike\" :   \"wal\" }, \n       \"customer.num\" : { \"$ilike\" :   \"wal\" } \n     }, \n     \"$and\" : [   // multiple ors would need to look like this in an array. only one and can be present too \n       { \n         \"$or\" :   { \n           \"customer.name\" :   \"John\" , \n           \"customer.name\" :   \"Jon\" \n         } \n       }, \n       { \n         \"$or\" :   { \n           \"customer.name\" :   \"Mark\" , \n           \"customer.name\" :   \"Marc\" \n         } \n       } \n     ],   /* this would end up generating `.... and ( (customer.name = 'John' or customer.name = 'Jon')            AND (customer.name = 'Mark' or customer.name = 'Mark') ) ....` */ \n\n     \"$or\" : [   // again you can only have one of these \n       {   // the and is default and optional and this accomplishes the same thing as example sbelow \n         \"customer.name\" :   \"Mark\" , \n         \"$or\" :   { \n           \"customer.sales\" :   { \"$lt\" :   10 }, \n           \"customer.sales\" :   \"$isNull\" \n         } \n       }, \n       { \n         \"$and\" :   {   //the and can be explicitly specified too if you wish \n           \"customer.name\" :   \"Jim\" , \n           \"customer.sales\" :   { \"$lt\" :   15 } \n         } \n       }, \n     ],   /* this would end up generating          ....          AND          (            (customer.name = 'mark' and ( customer.sales < 10 or customer.sales IS NULL))            OR            (customer.name = 'jim' and customer.sales < 15 )          )          .... */ \n   }  }",
            "title": "Logical operators"
        },
        {
            "location": "/queries-mango/#q-or-quick-search",
            "text": "Q search - similiar to a search engine search that uses a  q  paramter, \nability to search by one string in criteria filters against several domain fields, the value for quick\nsearch can be passed in  $qSearch  or  $q  keywords. \nThere are 2 ways to specify fields that should be searched against:   in static property  includes.qSearch  as list of strings, see example bellow: class   Org   { \n     String   name \n     Address   address \n\n     static   includes   =   [ \n       qSearch:   [ 'name' ,   'address.city' ] \n     ] \n     ...   default fields in config gorm : \n     tools : \n         mango : \n             qSearchDefault :   [ name ,   num ,   address.city ]    Mango criteria will add  %  automatically, if quick search string doesn't have it and will apply  ilike  statement\nfor each field in  includes.qSearch . If domain field is not string type, then  eq  statement will be used.  Org . repo . search ([ criteria:   [ $q :   \"abc\" ],   max:   20 ])  \nSo it is the same as:  Criteria   criteria   =   Org . createCriteria ()  criteria . list ( max:   20 )   { \n     or   { \n         ilike   \"name\" ,   \"abc%\" \n         ilike   \"address.city\" ,   \"abc%\" \n     }  }",
            "title": "Q or Quick Search"
        },
        {
            "location": "/queries-mango/#mango-api",
            "text": "",
            "title": "Mango API"
        },
        {
            "location": "/queries-mango/#mango-in-the-repository",
            "text": "The Repository  implements  MangoQueryTrait  Trait\nwhich contains implementation for two query methods:  DetachedCriteria   query (   Map   params =[:],   Closure   closure = null )   { \n         mangoQuery . query ( getDomainClass (),   params ,   closure ) \n     }  \nsee docs for  DetachedCriteria    List   queryList ( Map   params =[:],   Closure   closure = null ){ \n          mangoQuery . queryList ( getDomainClass (),   params ,   closure ) \n      }  \nreturns list of entities with pagination. For pagination take a look at  Pager  If one need to override mango bean for a certain repo it can be achieved in two ways:    implement  getMangoQuery()  method that should return instance of the class that implements  MangoQueryApi    register a new bean for custom criteria, and set it for the repo with  @Qualifier  annotation    beans   =   { \n     newMangoQuery ( NewMangoQuery )   }   class   NewMangoQuery   implements   MangoQueryApi   { \n\n     @Override \n     DetachedCriteria   query ( Class   domainClass ,   Map   params ,   Closure   closure   =   null )   { \n        return   null \n     } \n\n     @Override \n     List   queryList ( Class   domainClass ,   Map   params ,   Closure   closure   =   null )   { \n        return   [] \n     }  }   class   CityRepo   extends   DefaultGormRepo < City >   { \n\n     @Autowired \n     @Qualifier ( \"newMangoQuery\" ) \n     NewMangoQuery   mangoQuery  }",
            "title": "Mango in the Repository"
        },
        {
            "location": "/queries-mango/#build-mango-criteria",
            "text": "Under the hood Mango uses  DetachedCriteria  take a look on main  build method \nOne can see that it normalizes params map to make it Mango QL and then adds restrictions to detached criteria based on map,\nif closure is passed then applies it too.",
            "title": "Build Mango criteria"
        },
        {
            "location": "/queries-mango/#count-totals",
            "text": "If one needs to compute totals for some fields,  MangoQuery  \nhas  countTotals  method. Restrictions for it are working in the same way as for query method, so it can be specified \nwith params map and criteria closure.  But the repository beans don't contain this method, so one can call it on mangoQuery bean.\nTo specify what fields sums should be computed for, the list with fields name should be passed.\nSee example: Org . repo . mangoQuery . countTotals ( domainClass ,   [ \n   criteria:   [ name:   \"Virgin%\" ,   type:   \"New\" ]  ],   [ \"amount\" ,   credit ]){ \n   gt   \"id\" ,   5  }  \nResult will be look like:  [amount: 1500, credit: 440] , it doesn't take into account pagination.",
            "title": "Count totals"
        },
        {
            "location": "/queries-mango/#scrollablequery",
            "text": "See  ScrollableQuery",
            "title": "ScrollableQuery"
        },
        {
            "location": "/queries-mango/#execute-a-closure-for-each-record",
            "text": "As you can see in the example below, we can specify the SQL query and provide the closure which is called for each record:       ScrollableQuery   scrollableQuery   =   new   ScrollableQuery ( new   ColumnMapRowMapper (),   dataSource ,   50 ) \n\n     scrollableQuery . eachRow ( \"select * from ScrollableQueryTest\" )   {   Object   row   -> \n         println   row \n     }",
            "title": "Execute a closure for each record"
        },
        {
            "location": "/queries-mango/#execute-a-closure-for-each-batch-of-records",
            "text": "Using  eachBatch  we can execute a closure for a batch of records.\nThis closure is called for a specified number of records. For example, code below prints size of each batch\n(which is 5) to console:       scrollableQuery . eachBatch ( \"select * from ScrollableQueryTest\" ,   5 )   {   List   batch   -> \n         println   \"batchSize=${batch.size()}\" \n     }",
            "title": "Execute a closure for each batch of records"
        },
        {
            "location": "/queries-mango/#fetching-a-list-of-all-records",
            "text": "This method holds all rows in memory, so this should not be used if there is going to be large number of rows.        List   values   =   scrollableQuery . rows ( \"select * from ScrollableQueryTest where value='test'\" )",
            "title": "Fetching a list of all records:"
        },
        {
            "location": "/queries-mango/#pathkeymaprowmapper",
            "text": "See  PathKeyMapRowMapper  Row mapper which allows to convert data from a given ResultSet instance\nto a grails parameter map, which can be used for databinding.",
            "title": "PathKeyMapRowMapper"
        },
        {
            "location": "/rest/",
            "text": "Out of the box Restful API for grails.\n\u00b6\n\n\nThis is a library and [Grails] plugin to enhance [Gorm] to provide and expose a somewhat \nopinionated\n, \nwell documented restful API\n with intelligent out of the box defaults and minimal tweaking. It also keeps it easy to configure and customize on the fly at a deployed client site without the need to recompile.\n\n\nWhile its somewhat opinionated it frames out Rest best practices outlined in the [Rest Design Principles] section.  It uses the \nOpenAPI\n spec (formerly \nSwagger\n) as well as how it maps the Gorm domains into that spec. Its accepts and returns only JSON and eschews the complexity of XML\n\n\nWhile REST is not CRUD a lot of it really is. This project aims to makes it easy and quick to setup the common use cases that are really just CRUD Controller over the [GORM] domains so you can focus on the unique business logic use cases that are hard.\n\n\nKey features and goals of this plugin include:\n\n\n\n\nThe simple stuff should be simple and automatic\n\n\nDRY : Don't repeat yourself.\n\n\nAutogenerated code is evil. This includes tests\n\n\nUse AST, traits and tanspiling where possible\n\n\n\n\n\n\n\n\n Near zero configuration to expose \nSwagger\n documented resources (the Gorm domains)\n\n\n Rely on the domain's contraints as much as possible for configurations and docs.\n\n\n Out of the box CRUD Controller modified from Grails \n@Resource annotation and RestfulController\n \n      that can delegate to transactional Services (Repositories, Data Services) flavored services based on naming \n      convention or configuration. Uses the [gorm-tools] plugin by deafault for this.\n\n\n Custom schema selects for retruned JSON fields that can be confiugured at runtime by a customer (does not require recompiling views)\n\n\n Consistent documented use of HTTP status codes and headers\n\n\n Uses \ncache-headers\n for faster loading\n\n\n Use [Repository] pattern by defualt to keep the CRUD code in its own transactional service\n\n\n Ability to 'query by POST' (to allow query criteria to be provided within the request body)\n\n\n Intelligent defaults for security plugin with OATH and JWT.\n\n\n Tools to ease GEB functional tests with Spock\n\n\n Extensive regression tests\n\n\n\n\nInstall\n\u00b6\n\n\n\n\n\n\n\nJSON Generation\n\u00b6\n\n\nThere are 3 ways to generate json.\n\n\n\n\nusing renderers, \nCustomizing Response Rendering\n\n\nusing the \ngrails-views plugin\n.\n\n\nusing JSON.ObjectMarshaller which seems to be out of favor in the docs and is not longer mentioned\nbut remains in the grails-plugin-converter's main \nJSON\n.\n\nthis is a good overview\n \nand this for using \nname config\n \nwith \nunit testing example\n\nand \nmrhaki's write up on name configurtions\n\n\n\n\nhttps://jlstrater.github.io/restful-grails3/\n\n\nThis \nslide show\n\nis a must preview does a good job of explaining the different options towards the end.\n\n\nThe goal is to provide the fastest way to render and object or collection\nthat allows custom includes or excludes.\n\n\nA \nstatic includes = ...\n can be set on the domain, the repository or the controller.\nAn gets overriden in that order. For example: if I set excludes on the domain\nif I set in on a Repository CRUD controller for that domain the it uses that. A setting\nin the AppSetupConfig overides them all and a includes param sent into the endpoint\nwill be used above all others.\nI would be nice to put the grails-views into this picture as well so that if there is a \n*.gson\n file\nit gets used. Will need to figure out the resolution order.\n\n\nThere is a way to register a name wigh JSON.createNamedConfig and then they can be used with \nJSON.use(name){...}\n\nThis might be something we want to look into as an option as it may be really easy to incorporate our AppSetupConfig.\n\n\nsupporting links\n\u00b6\n\n\nhttps://stackoverflow.com/questions/23940641/render-metadata-for-pagination-from-grails-restfulcontroller-index-search-action\n\n\nExplains that is \nviews/object/_object.gson\n is present then its not picking up ObjectMarshallers\n\nhttps://stackoverflow.com/questions/43357469/grails-3-respond-method-doesnt-use-defined-json-marshaller-format\n\n\nhttps://kylewbanks.com/blog/Customizing-JSON-Grails-Object-Marshalling\n\n\nolder 2.x plugin but has some good ideas.\n\n\nhttps://github.com/danveloper/grails-rest-renderers\n\n\ninclude class and include version config options in the marshallers are exaplained a bit here\n\nhttps://github.com/grails-plugins/grails-plugin-converters/commit/d7ef874a59e19abc03821181ff33e11f612c63a6\n\n\nshows an example of pumping a pdf through the response.outputStream\n\nhttp://grails.1312388.n4.nabble.com/Grails-REST-Web-Services-Using-custom-Renderer-to-render-PDF-td4654403.html\n\n\nDefaultRendererRegistry in org.grails.plugins.web.rest.render is where the defaults\naer registered.\n\n\nSetting up the domains\n\u00b6\n\n\nmost of a rest api can be setup and documented with nothing more than just the domains\n\n\n@RestApi annotation\n\u00b6\n\n\ninspired by the Grails \n@Resource annotation\n\nAdding this to your domains with create a controller using AST under the \napi\n namespace with common actions\nand UrlMappings for a rest api. It uses a transactional Repository data service by default.\n\n\n\n\n\n\n\n\nattribute\n\n\ndesc\n\n\ndefault\n\n\n\n\n\n\n\n\n\n\ndescription\n\n\ninformation to appear to a dev and in the Open api docs\n\n\n\"\"\n\n\n\n\n\n\nendpoint\n\n\nif this annotation only for api docs and you don't want a controller generated then set this to false.\n\n\ntrue\n\n\n\n\n\n\nreadOnly\n\n\nWhether this is a read-only endpoint (one that doesn't allow DELETE, POST, PUT or PATCH requests)\n\n\nfalse\n\n\n\n\n\n\ncontrollerClass\n\n\nThe Controller class to generate. Can be set to null to skip the generation\n\n\nRestRepoApiController\n\n\n\n\n\n\n\n\nExample\n\n\nimport\n \ngorm.restapi.RestApi\n\n\n\n@RestApi\n(\ndescription\n \n=\n \n\"The user for the restify application\"\n)\n\n\nclass\n \nAppUser\n \n{\n\n\n\n\nsee the section on the \nRestRepoApiController\n for more details about the controller setup\n\n\nOpenAPI and json-schema\n\u00b6\n\n\nWe use additional constraints on the domain to help with the json-schema and Open API docs as well as for DRY testing.\n\n\nadded meta-contraints\n\n| contraints  |                                  desc                                   |\n| ----------- | ----------------------------------------------------------------------- |\n| description | information to appear to a dev and in the Open api docs                 |\n| title       | override the title. converts camel case to word with spaces by defaults |\n| example     | used in docs as well as auto mocking out test data                      |\n\n\nExample\n\n\nstatic\n \nconstraints\n \n=\n \n{\n\n    \nuserName\n  \ndescription:\n \n'The login name'\n,\n\n              \ntitle:\n \n'Login Name'\n,\n\n              \nexample:\n\"billy1\"\n\n\n\n\n\n\n\n\n\n\ncontraint\n\n\njson-schema\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\nmin\n\n\nminimum\n\n\n\n\n\n\n\n\nmax\n\n\nmaximum\n\n\n\n\n\n\n\n\nmaxSize\n\n\nmaxLength\n\n\n\n\n\n\n\n\nminSize\n\n\nminLength\n\n\n\n\n\n\n\n\nscale\n\n\nmultipleOf\n\n\n= 1/Math.pow(10, constraints.scale))\n\n\n\n\n\n\nemail\n\n\nformat='email'",
            "title": "Rest Api"
        },
        {
            "location": "/rest/#out-of-the-box-restful-api-for-grails",
            "text": "This is a library and [Grails] plugin to enhance [Gorm] to provide and expose a somewhat  opinionated ,  well documented restful API  with intelligent out of the box defaults and minimal tweaking. It also keeps it easy to configure and customize on the fly at a deployed client site without the need to recompile.  While its somewhat opinionated it frames out Rest best practices outlined in the [Rest Design Principles] section.  It uses the  OpenAPI  spec (formerly  Swagger ) as well as how it maps the Gorm domains into that spec. Its accepts and returns only JSON and eschews the complexity of XML  While REST is not CRUD a lot of it really is. This project aims to makes it easy and quick to setup the common use cases that are really just CRUD Controller over the [GORM] domains so you can focus on the unique business logic use cases that are hard.  Key features and goals of this plugin include:   The simple stuff should be simple and automatic  DRY : Don't repeat yourself.  Autogenerated code is evil. This includes tests  Use AST, traits and tanspiling where possible      Near zero configuration to expose  Swagger  documented resources (the Gorm domains)   Rely on the domain's contraints as much as possible for configurations and docs.   Out of the box CRUD Controller modified from Grails  @Resource annotation and RestfulController  \n      that can delegate to transactional Services (Repositories, Data Services) flavored services based on naming \n      convention or configuration. Uses the [gorm-tools] plugin by deafault for this.   Custom schema selects for retruned JSON fields that can be confiugured at runtime by a customer (does not require recompiling views)   Consistent documented use of HTTP status codes and headers   Uses  cache-headers  for faster loading   Use [Repository] pattern by defualt to keep the CRUD code in its own transactional service   Ability to 'query by POST' (to allow query criteria to be provided within the request body)   Intelligent defaults for security plugin with OATH and JWT.   Tools to ease GEB functional tests with Spock   Extensive regression tests",
            "title": "Out of the box Restful API for grails."
        },
        {
            "location": "/rest/#install",
            "text": "",
            "title": "Install"
        },
        {
            "location": "/rest/#json-generation",
            "text": "There are 3 ways to generate json.   using renderers,  Customizing Response Rendering  using the  grails-views plugin .  using JSON.ObjectMarshaller which seems to be out of favor in the docs and is not longer mentioned\nbut remains in the grails-plugin-converter's main  JSON . this is a good overview  \nand this for using  name config  \nwith  unit testing example \nand  mrhaki's write up on name configurtions   https://jlstrater.github.io/restful-grails3/  This  slide show \nis a must preview does a good job of explaining the different options towards the end.  The goal is to provide the fastest way to render and object or collection\nthat allows custom includes or excludes.  A  static includes = ...  can be set on the domain, the repository or the controller.\nAn gets overriden in that order. For example: if I set excludes on the domain\nif I set in on a Repository CRUD controller for that domain the it uses that. A setting\nin the AppSetupConfig overides them all and a includes param sent into the endpoint\nwill be used above all others.\nI would be nice to put the grails-views into this picture as well so that if there is a  *.gson  file\nit gets used. Will need to figure out the resolution order.  There is a way to register a name wigh JSON.createNamedConfig and then they can be used with  JSON.use(name){...} \nThis might be something we want to look into as an option as it may be really easy to incorporate our AppSetupConfig.",
            "title": "JSON Generation"
        },
        {
            "location": "/rest/#supporting-links",
            "text": "https://stackoverflow.com/questions/23940641/render-metadata-for-pagination-from-grails-restfulcontroller-index-search-action  Explains that is  views/object/_object.gson  is present then its not picking up ObjectMarshallers https://stackoverflow.com/questions/43357469/grails-3-respond-method-doesnt-use-defined-json-marshaller-format  https://kylewbanks.com/blog/Customizing-JSON-Grails-Object-Marshalling  older 2.x plugin but has some good ideas.  https://github.com/danveloper/grails-rest-renderers  include class and include version config options in the marshallers are exaplained a bit here https://github.com/grails-plugins/grails-plugin-converters/commit/d7ef874a59e19abc03821181ff33e11f612c63a6  shows an example of pumping a pdf through the response.outputStream http://grails.1312388.n4.nabble.com/Grails-REST-Web-Services-Using-custom-Renderer-to-render-PDF-td4654403.html  DefaultRendererRegistry in org.grails.plugins.web.rest.render is where the defaults\naer registered.",
            "title": "supporting links"
        },
        {
            "location": "/rest/#setting-up-the-domains",
            "text": "most of a rest api can be setup and documented with nothing more than just the domains",
            "title": "Setting up the domains"
        },
        {
            "location": "/rest/#restapi-annotation",
            "text": "inspired by the Grails  @Resource annotation \nAdding this to your domains with create a controller using AST under the  api  namespace with common actions\nand UrlMappings for a rest api. It uses a transactional Repository data service by default.     attribute  desc  default      description  information to appear to a dev and in the Open api docs  \"\"    endpoint  if this annotation only for api docs and you don't want a controller generated then set this to false.  true    readOnly  Whether this is a read-only endpoint (one that doesn't allow DELETE, POST, PUT or PATCH requests)  false    controllerClass  The Controller class to generate. Can be set to null to skip the generation  RestRepoApiController     Example  import   gorm.restapi.RestApi  @RestApi ( description   =   \"The user for the restify application\" )  class   AppUser   {   see the section on the  RestRepoApiController  for more details about the controller setup",
            "title": "@RestApi annotation"
        },
        {
            "location": "/rest/#openapi-and-json-schema",
            "text": "We use additional constraints on the domain to help with the json-schema and Open API docs as well as for DRY testing.  added meta-contraints \n| contraints  |                                  desc                                   |\n| ----------- | ----------------------------------------------------------------------- |\n| description | information to appear to a dev and in the Open api docs                 |\n| title       | override the title. converts camel case to word with spaces by defaults |\n| example     | used in docs as well as auto mocking out test data                      |  Example  static   constraints   =   { \n     userName    description:   'The login name' , \n               title:   'Login Name' , \n               example: \"billy1\"      contraint  json-schema  notes      min  minimum     max  maximum     maxSize  maxLength     minSize  minLength     scale  multipleOf  = 1/Math.pow(10, constraints.scale))    email  format='email'",
            "title": "OpenAPI and json-schema"
        },
        {
            "location": "/async/",
            "text": "Asynchronous Processing\n\u00b6\n\n\nParallelTools\n\u00b6\n\n\nThe plugin provides a \nParallelTools\n spring bean that can be injected. \nBy default it uses the Gpars implementation provide in \nGparsParallelTools\n. See those docs for details on the methods\nthat are available. \n\n\nTODO examples",
            "title": "Async"
        },
        {
            "location": "/async/#asynchronous-processing",
            "text": "",
            "title": "Asynchronous Processing"
        },
        {
            "location": "/async/#paralleltools",
            "text": "The plugin provides a  ParallelTools  spring bean that can be injected. \nBy default it uses the Gpars implementation provide in  GparsParallelTools . See those docs for details on the methods\nthat are available.   TODO examples",
            "title": "ParallelTools"
        },
        {
            "location": "/id-generation/",
            "text": "Database ID Generator\n\u00b6\n\n\nThe plugin comes with an implementation of hibernate identity generator for a cross database and NoSQL way to assign Long ids from an in memory incrementor. It uses a central table to track the last used id for each table. This helps a lot when dealing with associations and relationships. It also increases the performance of batch inserts.\n\n\nNewObjectId table\n\u00b6\n\n\nThe table name is configurable and will get created if it does not exist. You can also create the table as shown below and add indexes if desired.\n\n\ncreate\n \ntable\n \nNewObjectId\n\n\n(\n\n    \nKeyName\n \nvarchar\n(\n255\n)\n \nnot\n \nnull\n \nprimary\n \nkey\n,\n\n    \nNextId\n \nbigint\n \nnot\n \nnull\n\n\n)\n\n\n;\n\n\n\n\n\nHere key name will be the name of the tables and NextId is the next id to return for the given table.\n\n\nConfigure Identity generator globally.\n\u00b6\n\n\nThe identity generator can be configured globally in application.groovy as shown below.\n\n\ngrails\n \n{\n\n\n    \ngorm\n.\ndefault\n.\nmapping\n \n=\n \n{\n\n        \nid\n \ncolumn:\n \n'id'\n,\n \ngenerator:\n'yakworks.gorm.hibernate.SpringBeanIdGenerator'\n\n    \n}\n\n\n}\n\n\n\n\n\nThis will use the SpringBeanIdGenerator for all domains in the application. However it can be done per domain too if required.\n\n\nUsing IdGenerator programmatically\n\u00b6\n\n\nPlugin defines a bean with name idGenerator that can be used to programmatically generate new Ids.\nHere is an example domain class.\n\n\nclass\n \nBook\n \n{\n\n    \ntransient\n \nidGenerator\n\n\n    \ndef\n \nbeforeInsert\n()\n \n{\n\n        \nif\n(!\nid\n)\n \nid\n \n=\n \nidGenerator\n.\ngetNextId\n(\n'Book.id'\n)\n \n// or idGenerator.getNextId(this)\n\n    \n}\n\n\n}\n\n\n\n\n\nIdentity generator will check in NewObjectId table for keyName \nBook\n If it exists, it will return the value of NextId or else it will insert a new row in NewObjectId table.\n\n\nHow it works\n\u00b6\n\n\nBy default the following beans are enabled.\n\n\njdbcIdGenerator\n\nA Jdbc implementation of the IdGenerator, it uses NewObjectId central table to query the new ids.\n\n\nidGenerator(BatchIdGenerator)\n\nIdgenerator implementation that caches a range of values in memory by the key name. It caches a batch of id for each key and increments in memory thus provides better performance.\nInternally it uses jdbcIdGenerator to query for next batch of ids.\n\n\nBatchIdGenerator by default uses allocationSize size of 100. Which can be changed by overriding the spring bean as shown below.\n\n\n \nidGenerator\n(\nBatchIdGenerator\n){\n\n    \ngenerator\n \n=\n \nref\n(\n\"jdbcIdGenerator\"\n)\n\n    \nallocationSize\n \n=\n \n50\n\n  \n}\n\n\n\n\n\nThe plugin by default configures the BatchIdGenerator as default idgenerator. If you need to use another idgenerator or provide a custom implementation, you can override the \nidGenerator\n spring bean.\n\n\njdbcTemplate\n\nThis plugin also configures JdbcTemplate which can be used for low level jdbc access. It uses TransactionAwareDataSourceProxy so the queries run through the jdbcTemplate will be part of the current transaction.",
            "title": "Id Generation"
        },
        {
            "location": "/id-generation/#database-id-generator",
            "text": "The plugin comes with an implementation of hibernate identity generator for a cross database and NoSQL way to assign Long ids from an in memory incrementor. It uses a central table to track the last used id for each table. This helps a lot when dealing with associations and relationships. It also increases the performance of batch inserts.",
            "title": "Database ID Generator"
        },
        {
            "location": "/id-generation/#newobjectid-table",
            "text": "The table name is configurable and will get created if it does not exist. You can also create the table as shown below and add indexes if desired.  create   table   NewObjectId  ( \n     KeyName   varchar ( 255 )   not   null   primary   key , \n     NextId   bigint   not   null  )  ;   Here key name will be the name of the tables and NextId is the next id to return for the given table.",
            "title": "NewObjectId table"
        },
        {
            "location": "/id-generation/#configure-identity-generator-globally",
            "text": "The identity generator can be configured globally in application.groovy as shown below.  grails   { \n\n     gorm . default . mapping   =   { \n         id   column:   'id' ,   generator: 'yakworks.gorm.hibernate.SpringBeanIdGenerator' \n     }  }   This will use the SpringBeanIdGenerator for all domains in the application. However it can be done per domain too if required.",
            "title": "Configure Identity generator globally."
        },
        {
            "location": "/id-generation/#using-idgenerator-programmatically",
            "text": "Plugin defines a bean with name idGenerator that can be used to programmatically generate new Ids.\nHere is an example domain class.  class   Book   { \n     transient   idGenerator \n\n     def   beforeInsert ()   { \n         if (! id )   id   =   idGenerator . getNextId ( 'Book.id' )   // or idGenerator.getNextId(this) \n     }  }   Identity generator will check in NewObjectId table for keyName  Book  If it exists, it will return the value of NextId or else it will insert a new row in NewObjectId table.",
            "title": "Using IdGenerator programmatically"
        },
        {
            "location": "/id-generation/#how-it-works",
            "text": "By default the following beans are enabled.  jdbcIdGenerator \nA Jdbc implementation of the IdGenerator, it uses NewObjectId central table to query the new ids.  idGenerator(BatchIdGenerator) \nIdgenerator implementation that caches a range of values in memory by the key name. It caches a batch of id for each key and increments in memory thus provides better performance.\nInternally it uses jdbcIdGenerator to query for next batch of ids.  BatchIdGenerator by default uses allocationSize size of 100. Which can be changed by overriding the spring bean as shown below.    idGenerator ( BatchIdGenerator ){ \n     generator   =   ref ( \"jdbcIdGenerator\" ) \n     allocationSize   =   50 \n   }   The plugin by default configures the BatchIdGenerator as default idgenerator. If you need to use another idgenerator or provide a custom implementation, you can override the  idGenerator  spring bean.  jdbcTemplate \nThis plugin also configures JdbcTemplate which can be used for low level jdbc access. It uses TransactionAwareDataSourceProxy so the queries run through the jdbcTemplate will be part of the current transaction.",
            "title": "How it works"
        },
        {
            "location": "/gorm-utils/",
            "text": "Gorm-tools provides two utils to work with domains.\nSee \nGormUtils\n\nand \nGormMetaUtils\n\n\nGormUtils\n\u00b6\n\n\nCoping properties from source to target domain instance\n\u00b6\n\n\nUsing \ncopyProperties\n we can copy some of properties from one domain to another:\n\n\n    \nUser\n \nuser\n \n=\n \nnew\n \nUser\n(\nfirstName:\n \n'John'\n,\n \nlastName:\n \n'Doe'\n \nage:\n \n30\n)\n\n    \nUser\n \nuser2\n \n=\n \nnew\n \nUser\n()\n\n    \nUser\n \nuser3\n \n=\n \nnew\n \nUser\n()\n\n\n    \nGormUtils\n.\ncopyProperties\n(\nuser\n,\n \nuser2\n,\n \nfalse\n,\n \n'firstName'\n)\n\n    \nGormUtils\n.\ncopyProperties\n(\nuser\n,\n \nuser3\n,\n \nfalse\n,\n \n'firstName'\n,\n \n'age'\n)\n\n\n    \nassert\n \nuser2\n.\nfirstName\n \n==\n \nuser\n.\nfirstName\n\n    \nassert\n \nuser2\n.\nage\n \n!=\n \nuser\n.\nage\n\n\n    \nassert\n \nuser3\n.\nfirstName\n \n==\n \nuser\n.\nfirstName\n\n    \nassert\n \nuser3\n.\nage\n \n==\n \nuser\n.\nage\n\n\n\nIn this example \nuser\n is the source object, \nuser2\n and \nuser3\n are targets.\nIf the 3\nrd\n argument is false the method will override a target value even if it's not null.\nThen we can specify properties to copy from the source object.\n\n\nFetching a nested property using a string name\n\u00b6\n\n\nGormUtils allows us to get a nested property from an object using a string as a path:\n\n\n    \nAddress\n \naddress\n \n=\n \nnew\n \nAddress\n(\nstreet:\n \n'street'\n,\n \ncity:\n \n'city'\n)\n\n    \nUser\n \nuser\n \n=\n \nnew\n \nUser\n(\nfirstName:\n \n'John'\n,\n \nlastName:\n \n'Doe'\n \nage:\n \n30\n,\n \naddress:\n \naddress\n)\n\n\n    \nString\n \nstreet\n \n=\n \nGormUtils\n.\ngetPropertyValue\n(\nperson\n,\n \n'address.street'\n)\n\n\n    \nassert\n \nstreet\n \n==\n \naddress\n.\nstreet\n\n\n\nAs you can see we can specify nested properties simply by adding a ( \n.\n ) symbol to a parent's property name.\n\n\nCopying a domain instance\n\u00b6\n\n\n    \nUser\n \nuser\n \n=\n \nnew\n \nUser\n(\nfirstName:\n \n'John'\n,\n \nlastName:\n \n'Doe'\n \nage:\n \n30\n)\n\n\n    \nUser\n \ncopy\n \n=\n \nGormUtils\n.\ncopyDomain\n(\nUser\n,\n \nuser\n)\n\n    \nassert\n \ncopy\n.\nfirstName\n \n==\n \n'John'\n\n    \nassert\n \ncopy\n.\nlastName\n \n==\n \n'Doe'\n\n    \nassert\n \ncopy\n.\nage\n \n==\n \n30\n\n\n\nor with existing object\n\n\n    \nUser\n \ncopy\n \n=\n \nGormUtils\n.\ncopyDomain\n(\nnew\n \nUser\n(),\n \nuser\n)\n\n    \nassert\n \ncopy\n.\nfirstName\n \n==\n \n'John'\n\n    \nassert\n \ncopy\n.\nlastName\n \n==\n \n'Doe'\n\n    \nassert\n \ncopy\n.\nage\n \n==\n \n30\n\n\n\n\n\nGormMetaUtils\n\u00b6\n\n\nGetting a domain class\n\u00b6\n\n\n    \n// using a fully qualified name with package\n\n    \nGormMetaUtils\n.\ngetDomainClass\n(\n\"gorm.tools.Org\"\n)\n\n\n    \n// using a domain instance\n\n    \nGormMetaUtils\n.\ngetDomainClass\n(\nnew\n \nOrg\n())\n\n\n    \n// using a class\n\n    \nGormMetaUtils\n.\ngetDomainClass\n(\nOrg\n)\n\n\n\n\n\nGetting a persistent entity\n\u00b6\n\n\n    \n// using a fully qualified name with package\n\n    \nGormMetaUtils\n.\ngetPersistentEntity\n(\n\"gorm.tools.Org\"\n)\n\n\n    \n// using a domain instance\n\n    \nGormMetaUtils\n.\ngetPersistentEntity\n(\nnew\n \nOrg\n())\n\n\n    \n// using a class\n\n    \nGormMetaUtils\n.\ngetPersistentEntity\n(\nOrg\n)",
            "title": "GormUtils Class"
        },
        {
            "location": "/gorm-utils/#gormutils",
            "text": "",
            "title": "GormUtils"
        },
        {
            "location": "/gorm-utils/#coping-properties-from-source-to-target-domain-instance",
            "text": "Using  copyProperties  we can copy some of properties from one domain to another:       User   user   =   new   User ( firstName:   'John' ,   lastName:   'Doe'   age:   30 ) \n     User   user2   =   new   User () \n     User   user3   =   new   User () \n\n     GormUtils . copyProperties ( user ,   user2 ,   false ,   'firstName' ) \n     GormUtils . copyProperties ( user ,   user3 ,   false ,   'firstName' ,   'age' ) \n\n     assert   user2 . firstName   ==   user . firstName \n     assert   user2 . age   !=   user . age \n\n     assert   user3 . firstName   ==   user . firstName \n     assert   user3 . age   ==   user . age  \nIn this example  user  is the source object,  user2  and  user3  are targets.\nIf the 3 rd  argument is false the method will override a target value even if it's not null.\nThen we can specify properties to copy from the source object.",
            "title": "Coping properties from source to target domain instance"
        },
        {
            "location": "/gorm-utils/#fetching-a-nested-property-using-a-string-name",
            "text": "GormUtils allows us to get a nested property from an object using a string as a path:       Address   address   =   new   Address ( street:   'street' ,   city:   'city' ) \n     User   user   =   new   User ( firstName:   'John' ,   lastName:   'Doe'   age:   30 ,   address:   address ) \n\n     String   street   =   GormUtils . getPropertyValue ( person ,   'address.street' ) \n\n     assert   street   ==   address . street  \nAs you can see we can specify nested properties simply by adding a (  .  ) symbol to a parent's property name.",
            "title": "Fetching a nested property using a string name"
        },
        {
            "location": "/gorm-utils/#copying-a-domain-instance",
            "text": "User   user   =   new   User ( firstName:   'John' ,   lastName:   'Doe'   age:   30 ) \n\n     User   copy   =   GormUtils . copyDomain ( User ,   user ) \n     assert   copy . firstName   ==   'John' \n     assert   copy . lastName   ==   'Doe' \n     assert   copy . age   ==   30  \nor with existing object       User   copy   =   GormUtils . copyDomain ( new   User (),   user ) \n     assert   copy . firstName   ==   'John' \n     assert   copy . lastName   ==   'Doe' \n     assert   copy . age   ==   30",
            "title": "Copying a domain instance"
        },
        {
            "location": "/gorm-utils/#gormmetautils",
            "text": "",
            "title": "GormMetaUtils"
        },
        {
            "location": "/gorm-utils/#getting-a-domain-class",
            "text": "// using a fully qualified name with package \n     GormMetaUtils . getDomainClass ( \"gorm.tools.Org\" ) \n\n     // using a domain instance \n     GormMetaUtils . getDomainClass ( new   Org ()) \n\n     // using a class \n     GormMetaUtils . getDomainClass ( Org )",
            "title": "Getting a domain class"
        },
        {
            "location": "/gorm-utils/#getting-a-persistent-entity",
            "text": "// using a fully qualified name with package \n     GormMetaUtils . getPersistentEntity ( \"gorm.tools.Org\" ) \n\n     // using a domain instance \n     GormMetaUtils . getPersistentEntity ( new   Org ()) \n\n     // using a class \n     GormMetaUtils . getPersistentEntity ( Org )",
            "title": "Getting a persistent entity"
        },
        {
            "location": "/beanPathTools/",
            "text": "Gorm-tools comes with BeanPathTools util which provides a convenient way for manipulating with object's properties.\nSee \nBeanPathTools\n\n\nGetting specified object's properties to a map\n\u00b6\n\n\nIn order to retrieve properties from an object and place them to a map we can use \nbuildMapFromPaths\n\nWe can possible to specify fields which should be added to the resulting map\nby providing a list with property names as the second argument.\n\n\n    \nUser\n \nuser\n \n=\n \nnew\n \nUser\n(\nfirstName:\n \n'John'\n,\n \nlastName:\n \n'Doe'\n \nage:\n \n30\n)\n\n\n    \nMap\n \nuserName\n \n=\n \nBeanPathTools\n.\nbuildMapFromPaths\n(\nuser\n,\n \n[\n'firstName'\n,\n \n'lastName'\n])\n\n    \nassert\n \nuserName\n \n==\n \n[\nfirstName:\n \n'John'\n,\n \nlastName:\n \n'Doe'\n]\n\n\n\n\n\nGetting nested properties:\n\u00b6\n\n\nIt is also works well with nested properties. To get a nested property we need to specify\na full path including parent field names divided with the ( \n.\n ) sign. See example below:\n\n\n    \nAddress\n \naddress\n \n=\n \nnew\n \nAddress\n(\nstreet1:\n \n'street1'\n,\n \nstreet2:\n \n'street2'\n \nzip:\n \n'123456'\n,\n \ncity:\n \n'city'\n)\n\n    \nUser\n \nuser\n \n=\n \nnew\n \nUser\n(\nfirstName:\n \n'John'\n,\n \nlastName:\n \n'Doe'\n \nage:\n \n30\n,\n \naddress:\n \naddress\n)\n\n\n    \nMap\n \nstreet\n \n=\n \nBeanPathTools\n.\nbuildMapFromPaths\n(\nuser\n,\n \n[\n'address.street1'\n,\n \n'address.street2'\n])\n\n    \nassert\n \nstreet\n \n==\n \n[\naddress:\n \n[\nstreet1:\n \n'street1'\n,\n \nstreet2:\n \n'street2'\n]]\n\n\n    \nMap\n \nfullAddress\n \n=\n \nBeanPathTools\n.\nbuildMapFromPaths\n(\nuser\n,\n \n[\n'address.*'\n])\n\n    \nassert\n \nfullAddress\n \n==\n \n[\naddress:\n \n[\nstreet1:\n \n'street1'\n,\n \nstreet2:\n \n'street2'\n \nzip:\n \n'123456'\n,\n \ncity:\n \n'city'\n]]\n\n\n\n\n\nGetting all object's properties to a map\n\u00b6\n\n\n\n\n in case of a domain instance the method looks only for persistent properties\n\n\n\n\nThe ( \n*\n )  sign represents all properties. Thus in order to get all fields we can use it as shown below:\n\n\n    \nMap\n \nuserMap\n \n=\n \nBeanPathTools\n.\nbuildMapFromPaths\n(\nuser\n,\n \n[\n'*'\n])\n\n    \nassert\n \nuserMap\n \n==\n \n[\nfirstName:\n \n'John'\n,\n \nlastName:\n \n'Doe'\n \nage:\n \n30\n]",
            "title": "Bean Path Tools"
        },
        {
            "location": "/beanPathTools/#getting-specified-objects-properties-to-a-map",
            "text": "In order to retrieve properties from an object and place them to a map we can use  buildMapFromPaths \nWe can possible to specify fields which should be added to the resulting map\nby providing a list with property names as the second argument.       User   user   =   new   User ( firstName:   'John' ,   lastName:   'Doe'   age:   30 ) \n\n     Map   userName   =   BeanPathTools . buildMapFromPaths ( user ,   [ 'firstName' ,   'lastName' ]) \n     assert   userName   ==   [ firstName:   'John' ,   lastName:   'Doe' ]",
            "title": "Getting specified object's properties to a map"
        },
        {
            "location": "/beanPathTools/#getting-nested-properties",
            "text": "It is also works well with nested properties. To get a nested property we need to specify\na full path including parent field names divided with the (  .  ) sign. See example below:       Address   address   =   new   Address ( street1:   'street1' ,   street2:   'street2'   zip:   '123456' ,   city:   'city' ) \n     User   user   =   new   User ( firstName:   'John' ,   lastName:   'Doe'   age:   30 ,   address:   address ) \n\n     Map   street   =   BeanPathTools . buildMapFromPaths ( user ,   [ 'address.street1' ,   'address.street2' ]) \n     assert   street   ==   [ address:   [ street1:   'street1' ,   street2:   'street2' ]] \n\n     Map   fullAddress   =   BeanPathTools . buildMapFromPaths ( user ,   [ 'address.*' ]) \n     assert   fullAddress   ==   [ address:   [ street1:   'street1' ,   street2:   'street2'   zip:   '123456' ,   city:   'city' ]]",
            "title": "Getting nested properties:"
        },
        {
            "location": "/beanPathTools/#getting-all-objects-properties-to-a-map",
            "text": "in case of a domain instance the method looks only for persistent properties   The (  *  )  sign represents all properties. Thus in order to get all fields we can use it as shown below:       Map   userMap   =   BeanPathTools . buildMapFromPaths ( user ,   [ '*' ]) \n     assert   userMap   ==   [ firstName:   'John' ,   lastName:   'Doe'   age:   30 ]",
            "title": "Getting all object's properties to a map"
        },
        {
            "location": "/working-with-dates/",
            "text": "Gorm-tools provides a set of static utils which allow us to manipulate with dates much easier.\n\n\nDateUtil\n\u00b6\n\n\nSee \nDateUtil\n\n\nParsing a date in a string\n\u00b6\n\n\nstringToDate\n expects a string with date in the simple format \nyyyy-MM-dd\n and returns Date instance:\n\n\n     \nDate\n \ndate\n \n=\n \nDateUtil\n.\nstringToDate\n(\n\"2017-10-19\"\n)\n\n\n     \nassert\n \ndate\n\n     \nassert\n \ndate\n \n==\n \nnew\n \nSimpleDateFormat\n(\n\"yyyy-MM-dd\"\n).\nparse\n(\n\"2017-10-19\"\n)\n\n\n\n\n\nit's a shortcut for \nconvertStringToDateTime\n\n\n     \nDate\n \ndate\n \n=\n \nDateUtil\n.\nconvertStringToDateTime\n(\n\"2017-10-19\"\n,\n \n\"yyyy-MM-dd\"\n)\n\n\n     \nassert\n \ndate\n\n     \nassert\n \ndate\n \n==\n \nnew\n \nSimpleDateFormat\n(\n\"yyyy-MM-dd\"\n).\nparse\n(\n\"2017-10-19\"\n)\n\n\n\n\n\nConverting Date instance to a string\n\u00b6\n\n\ndateToJsonString\n converts a date to the format \nyyyy-MM-dd'T'HH:mm:ss.SSSZ\n\n\n    \nDate\n \ndate\n \n=\n \nnew\n \nSimpleDateFormat\n(\n'yyyy-MM-dd HH:mm:ss'\n).\nparse\n(\n'2017-10-20 22:00:00'\n)\n\n\n    \nString\n \nresult\n \n=\n \nDateUtil\n.\ndateToJsonString\n(\ndate\n)\n\n    \nassert\n \nresult\n \n==\n \ndate\n.\nformat\n(\n\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n)\n\n\n\n\n\nit's a shortcut for \ndateToString\n method which accepts a format\n\n\n    \nDate\n \ndate\n \n=\n \nnew\n \nSimpleDateFormat\n(\n'yyyy-MM-dd HH:mm:ss'\n).\nparse\n(\n'2017-10-20 22:00:00'\n)\n\n\n    \nString\n \nresult\n \n=\n \nDateUtil\n.\ndateToString\n(\ndate\n,\n \n\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n)\n\n    \nassert\n \nresult\n \n==\n \ndate\n.\nformat\n(\n\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n)\n\n\n\n    \nresult\n \n=\n \nDateUtil\n.\ndateToString\n(\ndate\n)\n\n    \nassert\n \nresult\n \n==\n \ndate\n.\nformat\n(\n\"MM/dd/yyyy hh:mm:ss\"\n)\n\n\n\n\n\nGet the difference now and a specified date in hours\n\u00b6\n\n\n    \nCalendar\n \ncalendar\n \n=\n \nCalendar\n.\ngetInstance\n()\n\n    \ncalendar\n.\nadd\n(\nCalendar\n.\nHOUR\n,\n \n1\n)\n\n    \ncalendar\n.\nadd\n(\nCalendar\n.\nMINUTE\n,\n \n30\n)\n\n\n    \nassert\n \n1L\n \n=\n \nDateUtil\n.\ngetDateDifference_inHours\n(\ncalendar\n.\ngetTime\n())\n\n\n\n\n\nGet the difference between dates\n\u00b6\n\n\nWe can calculate get number of months between two dates, for example:\n\n\n    \nSimpleDateFormat\n \nformat\n \n=\n \nnew\n \nSimpleDateFormat\n(\n\"yyyy-MM-dd\"\n)\n\n    \nDate\n \ndate1\n \n=\n \nformat\n.\nparse\n(\n\"2017-10-19\"\n)\n\n    \nDate\n \ndate2\n \n=\n \nformat\n.\nparse\n(\n\"2017-12-19\"\n)\n\n\n    \n2\n \n==\n \nDateUtil\n.\ngetMonthDiff\n(\ndate1\n,\n \ndate2\n)\n\n\n\n\n\nor number of days\n\n\n    \nDate\n \nnow\n \n=\n \nnew\n \nDate\n()\n\n\n    \nassert\n \n0\n \n==\n \nDateUtil\n.\ngetDaysBetween\n(\nnow\n,\n \nnow\n)\n\n    \nassert\n \n-\n10\n \n==\n \nDateUtil\n.\ngetDaysBetween\n(\nnow\n \n-\n \n10\n,\n \nnow\n)\n\n    \nassert\n  \n10\n \n==\n \nDateUtil\n.\ngetDaysBetween\n(\nnow\n \n+\n \n10\n,\n \nnow\n)\n\n\n\n\n\nMultiFormatDateConverter\n\u00b6\n\n\nMultiFormatDateConverter extends general type conversion system for dates. It is used to date formatted string to date.\n\n\nUnder the hood it uses DateUtil and supports next formats \"yyyy-MM-dd\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ssZ\",\n\"yyyy-MM-dd'T'HH:mm:ss\", \"MM/dd/yy\"\n\n\nTo apply it to application add a spring bean for it. The bean name could be any\n\n\nDealing with timezones when storing dates.\n\u00b6\n\n\nBy default JDBC drivers stores and retrieves the dates/timestamps in local JVM timezone. \nHowever it is generally recommended to use UTC for storing dates in database. \n\n\nThere are two ways to store the date values in UTC. One is to change the default time zone of JVM using \nTimeZone.setDefault( TimeZone.getTimeZone( \"UTC\" ) );\n\nHowever this forces to change the jvm default time zone which may not be possible in all cases.\n\n\nAnother option is to use the hibernate setting \nhibernamte.jdbc.time_zone\n\n\nWith grails, the timezone which hibernate uses can be configured in \napplication.yml\n as shown below.\n\n\nhibernate\n:\n\n    \njdbc\n:\n\n      \ntime_zone\n:\n \nUTC\n\n\n\n\n\nThis will instruct hibernate to store and retrieve the dates in UTC timezone.\n\n\nHowever it should be noted that if you query the date values with JDBC it will be retrieved in JVM timezone and not UTC and will need to be converted to UTC manually or use the overloaded version of ResultSet.getTimeStamp that takes calendar as second argument\nEg. \nResultSet#getTimestamp(int columnIndex, Calendar cal)\n\n\nReferences on this\n\u00b6\n\n\nhttp://in.relation.to/2016/09/12/jdbc-time-zone-configuration-property/\n\n\nhttps://hibernate.atlassian.net/browse/HHH-11396\n\n\nhttps://vladmihalcea.com/2017/03/14/how-to-store-date-time-and-timestamps-in-utc-time-zone-with-jdbc-and-hibernate/\n\n\nhttps://stackoverflow.com/questions/31965179/whats-new-in-hibernate-orm-5",
            "title": "Date Utils"
        },
        {
            "location": "/working-with-dates/#dateutil",
            "text": "See  DateUtil",
            "title": "DateUtil"
        },
        {
            "location": "/working-with-dates/#parsing-a-date-in-a-string",
            "text": "stringToDate  expects a string with date in the simple format  yyyy-MM-dd  and returns Date instance:        Date   date   =   DateUtil . stringToDate ( \"2017-10-19\" ) \n\n      assert   date \n      assert   date   ==   new   SimpleDateFormat ( \"yyyy-MM-dd\" ). parse ( \"2017-10-19\" )   it's a shortcut for  convertStringToDateTime        Date   date   =   DateUtil . convertStringToDateTime ( \"2017-10-19\" ,   \"yyyy-MM-dd\" ) \n\n      assert   date \n      assert   date   ==   new   SimpleDateFormat ( \"yyyy-MM-dd\" ). parse ( \"2017-10-19\" )",
            "title": "Parsing a date in a string"
        },
        {
            "location": "/working-with-dates/#converting-date-instance-to-a-string",
            "text": "dateToJsonString  converts a date to the format  yyyy-MM-dd'T'HH:mm:ss.SSSZ       Date   date   =   new   SimpleDateFormat ( 'yyyy-MM-dd HH:mm:ss' ). parse ( '2017-10-20 22:00:00' ) \n\n     String   result   =   DateUtil . dateToJsonString ( date ) \n     assert   result   ==   date . format ( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" )   it's a shortcut for  dateToString  method which accepts a format       Date   date   =   new   SimpleDateFormat ( 'yyyy-MM-dd HH:mm:ss' ). parse ( '2017-10-20 22:00:00' ) \n\n     String   result   =   DateUtil . dateToString ( date ,   \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ) \n     assert   result   ==   date . format ( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ) \n\n\n     result   =   DateUtil . dateToString ( date ) \n     assert   result   ==   date . format ( \"MM/dd/yyyy hh:mm:ss\" )",
            "title": "Converting Date instance to a string"
        },
        {
            "location": "/working-with-dates/#get-the-difference-now-and-a-specified-date-in-hours",
            "text": "Calendar   calendar   =   Calendar . getInstance () \n     calendar . add ( Calendar . HOUR ,   1 ) \n     calendar . add ( Calendar . MINUTE ,   30 ) \n\n     assert   1L   =   DateUtil . getDateDifference_inHours ( calendar . getTime ())",
            "title": "Get the difference now and a specified date in hours"
        },
        {
            "location": "/working-with-dates/#get-the-difference-between-dates",
            "text": "We can calculate get number of months between two dates, for example:       SimpleDateFormat   format   =   new   SimpleDateFormat ( \"yyyy-MM-dd\" ) \n     Date   date1   =   format . parse ( \"2017-10-19\" ) \n     Date   date2   =   format . parse ( \"2017-12-19\" ) \n\n     2   ==   DateUtil . getMonthDiff ( date1 ,   date2 )   or number of days       Date   now   =   new   Date () \n\n     assert   0   ==   DateUtil . getDaysBetween ( now ,   now ) \n     assert   - 10   ==   DateUtil . getDaysBetween ( now   -   10 ,   now ) \n     assert    10   ==   DateUtil . getDaysBetween ( now   +   10 ,   now )",
            "title": "Get the difference between dates"
        },
        {
            "location": "/working-with-dates/#multiformatdateconverter",
            "text": "MultiFormatDateConverter extends general type conversion system for dates. It is used to date formatted string to date.  Under the hood it uses DateUtil and supports next formats \"yyyy-MM-dd\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ssZ\",\n\"yyyy-MM-dd'T'HH:mm:ss\", \"MM/dd/yy\"  To apply it to application add a spring bean for it. The bean name could be any",
            "title": "MultiFormatDateConverter"
        },
        {
            "location": "/working-with-dates/#dealing-with-timezones-when-storing-dates",
            "text": "By default JDBC drivers stores and retrieves the dates/timestamps in local JVM timezone. \nHowever it is generally recommended to use UTC for storing dates in database.   There are two ways to store the date values in UTC. One is to change the default time zone of JVM using  TimeZone.setDefault( TimeZone.getTimeZone( \"UTC\" ) ); \nHowever this forces to change the jvm default time zone which may not be possible in all cases.  Another option is to use the hibernate setting  hibernamte.jdbc.time_zone  With grails, the timezone which hibernate uses can be configured in  application.yml  as shown below.  hibernate : \n     jdbc : \n       time_zone :   UTC   This will instruct hibernate to store and retrieve the dates in UTC timezone.  However it should be noted that if you query the date values with JDBC it will be retrieved in JVM timezone and not UTC and will need to be converted to UTC manually or use the overloaded version of ResultSet.getTimeStamp that takes calendar as second argument\nEg.  ResultSet#getTimestamp(int columnIndex, Calendar cal)",
            "title": "Dealing with timezones when storing dates."
        },
        {
            "location": "/working-with-dates/#references-on-this",
            "text": "http://in.relation.to/2016/09/12/jdbc-time-zone-configuration-property/  https://hibernate.atlassian.net/browse/HHH-11396  https://vladmihalcea.com/2017/03/14/how-to-store-date-time-and-timestamps-in-utc-time-zone-with-jdbc-and-hibernate/  https://stackoverflow.com/questions/31965179/whats-new-in-hibernate-orm-5",
            "title": "References on this"
        },
        {
            "location": "/testing/",
            "text": "Gorm-tools provides a set of test helpers to make the testing process more convenient\n\n\nIntegration testing\n\u00b6\n\n\nIntegrationSpecHelper\n\u00b6\n\n\nThis is a base trait that contains common logic for integration tests.\n\n\nTest class should extend \nSpecification\n class explicitly and implement IntegrationSpecHelper:\n\n\n    \nclass\n \nSomeSpec\n \nextends\n \nSpecification\n \nimplements\n \nIntegrationSpecHelper\n\n\n\n\n\nDue to the fact that Spock conventional approach with setup/cleanup methods doesn't work with traits,\nthis helper uses \n@Before\n / \n@After\n JUnit annotations to implement setup and cleanup logic.\n\n\nAs well as setup logic, IntegrationSpecHelper provides a bunch of useful methods which can be used in tests:\n\n\n\n\nbuildParams - \n\n\nflushAndClear - flushes and clears the session cache, the shortcut for \nRepoUtil.flushAndClear()\n\n\nflush - flushes the session cache, the shortcut for \nRepoUtil.flush()\n\n\nclear - clears the session cache, the shortcut for \nRepoUtil.clear()\n\n\ntrackMetaClassChanges - start tracking all metaclass changes made after this call, so it can all be undone later\n\n\n\n\nIntegrationSpecHelper provides an ability to execute application-specific setup/cleanup logic simply by chaining it with\nsome custom trait:\n\n\n    \nclass\n \nSomeSpec\n \nextends\n \nSpecification\n \nimplements\n \nIntegrationSpecHelper\n,\n \nCustomSpecHelper\n\n\n\n\n\nCustomSpecHelper may implement the next methods:\n\n\n\n\nspecificSetup\n\n\nspecificCleanup\n\n\nspecificSetupSpec\n\n\nspecificCleanupSpec\n\n\n\n\nThe behavior of these methods is equivalent to Spock conventional methods\n\n\n\n\nNote\n\n\nSpecific method is executed after the method defined in IntegrationSpecHelper\n\n\n\n\nControllerIntegrationSpecHelper\n\u00b6\n\n\nThis trait extends \nIntegrationSpecHelper\n and provides common logic\nwhich can be useful when testing controllers. So there is no need to implement IntegrationSpecHelper explicitly.\nFor example:\n\n\n    \nclass\n \nSomeSpec\n \nextends\n \nSpecification\n \nimplements\n \nControllerIntegrationSpecHelper\n\n\n\n\n\nBy default it sets up mock request/response pair and injects application context bean. \n\n\nControllerIntegrationSpecHelper contains the next util methods:\n\n\n\n\n\n\ngetControllerName - can be overridden in the test class to return the controller name.\n     This name is appended to the request attributes. Returns null by default value.\n\n\nAlso, can be specified as a property:\n \n   \nString\n \ncontrollerName\n \n=\n \n\"Org\"\n\n\n\n\n\n\n\n\nautowire - autowires bean properties of a given controller and returns the controller instance\n\n\n\n\nmockRender - adds mock of the \nrender\n method to a metaclass of a given controller\n\n\ngetCurrentRequestAttributes - returns the current request attributes\n\n\n\n\nUtil methods from IntegrationSpecHelper are available as well.\n\n\n\n\nNote\n\n\nIn case of using this trait with a custom helper trait, the setup methods will be called in the next order:\nIntegrationSpecHelper -> ControllerIntegrationSpecHelper -> CustomSpecHelper\n\n\n\n\nUnit testing\n\u00b6\n\n\nDataRepoTest\n\u00b6\n\n\nTODO\n\n\n\n\n\nDomainRepoCrudSpec\n\u00b6\n\n\nTODO\n\n\n\n\n\nDomainRepoTest\n\u00b6\n\n\nTODO\n\n\n\n\n\nGormToolsSpecHelper\n\u00b6\n\n\nTODO\n\n\n\n\n\nGormToolsTest\n\u00b6\n\n\nTODO\n\n\n\n\n\nJsonViewSpecSetup\n\u00b6\n\n\nTODO\n\n\n\n\n\nMockJdbcIdGenerator\n\u00b6\n\n\nTODO\n\n\n\n\n\nExternalConfigAwareSpec\n\u00b6\n\n\nThe trait makes it possible to load external config during unit tests.\nIf external-config plugin is installed, the configuration defined in config.locations will be loaded and be made available to unit tests.\nDataRepoTest extends ExternalConfigAwareSpec so subclasses does not need to extend it explicitely. \n\n\nNote:\n ExternalConfigAwareSpec uses doWithSpring to define ExternalConfigLoader bean, so that it runs during Grails application \nlifecycle.\nIf the test overrides doWithSpring, the method in trait will not run. So the test class should explicitely call ExternalConfigAwareSpec\n.super.doWithSpring",
            "title": "Testing"
        },
        {
            "location": "/testing/#integration-testing",
            "text": "",
            "title": "Integration testing"
        },
        {
            "location": "/testing/#integrationspechelper",
            "text": "This is a base trait that contains common logic for integration tests.  Test class should extend  Specification  class explicitly and implement IntegrationSpecHelper:       class   SomeSpec   extends   Specification   implements   IntegrationSpecHelper   Due to the fact that Spock conventional approach with setup/cleanup methods doesn't work with traits,\nthis helper uses  @Before  /  @After  JUnit annotations to implement setup and cleanup logic.  As well as setup logic, IntegrationSpecHelper provides a bunch of useful methods which can be used in tests:   buildParams -   flushAndClear - flushes and clears the session cache, the shortcut for  RepoUtil.flushAndClear()  flush - flushes the session cache, the shortcut for  RepoUtil.flush()  clear - clears the session cache, the shortcut for  RepoUtil.clear()  trackMetaClassChanges - start tracking all metaclass changes made after this call, so it can all be undone later   IntegrationSpecHelper provides an ability to execute application-specific setup/cleanup logic simply by chaining it with\nsome custom trait:       class   SomeSpec   extends   Specification   implements   IntegrationSpecHelper ,   CustomSpecHelper   CustomSpecHelper may implement the next methods:   specificSetup  specificCleanup  specificSetupSpec  specificCleanupSpec   The behavior of these methods is equivalent to Spock conventional methods   Note  Specific method is executed after the method defined in IntegrationSpecHelper",
            "title": "IntegrationSpecHelper"
        },
        {
            "location": "/testing/#controllerintegrationspechelper",
            "text": "This trait extends  IntegrationSpecHelper  and provides common logic\nwhich can be useful when testing controllers. So there is no need to implement IntegrationSpecHelper explicitly.\nFor example:       class   SomeSpec   extends   Specification   implements   ControllerIntegrationSpecHelper   By default it sets up mock request/response pair and injects application context bean.   ControllerIntegrationSpecHelper contains the next util methods:    getControllerName - can be overridden in the test class to return the controller name.\n     This name is appended to the request attributes. Returns null by default value.  Also, can be specified as a property:\n      String   controllerName   =   \"Org\"     autowire - autowires bean properties of a given controller and returns the controller instance   mockRender - adds mock of the  render  method to a metaclass of a given controller  getCurrentRequestAttributes - returns the current request attributes   Util methods from IntegrationSpecHelper are available as well.   Note  In case of using this trait with a custom helper trait, the setup methods will be called in the next order:\nIntegrationSpecHelper -> ControllerIntegrationSpecHelper -> CustomSpecHelper",
            "title": "ControllerIntegrationSpecHelper"
        },
        {
            "location": "/testing/#unit-testing",
            "text": "",
            "title": "Unit testing"
        },
        {
            "location": "/testing/#datarepotest",
            "text": "TODO",
            "title": "DataRepoTest"
        },
        {
            "location": "/testing/#domainrepocrudspec",
            "text": "TODO",
            "title": "DomainRepoCrudSpec"
        },
        {
            "location": "/testing/#domainrepotest",
            "text": "TODO",
            "title": "DomainRepoTest"
        },
        {
            "location": "/testing/#gormtoolsspechelper",
            "text": "TODO",
            "title": "GormToolsSpecHelper"
        },
        {
            "location": "/testing/#gormtoolstest",
            "text": "TODO",
            "title": "GormToolsTest"
        },
        {
            "location": "/testing/#jsonviewspecsetup",
            "text": "TODO",
            "title": "JsonViewSpecSetup"
        },
        {
            "location": "/testing/#mockjdbcidgenerator",
            "text": "TODO",
            "title": "MockJdbcIdGenerator"
        },
        {
            "location": "/testing/#externalconfigawarespec",
            "text": "The trait makes it possible to load external config during unit tests.\nIf external-config plugin is installed, the configuration defined in config.locations will be loaded and be made available to unit tests.\nDataRepoTest extends ExternalConfigAwareSpec so subclasses does not need to extend it explicitely.   Note:  ExternalConfigAwareSpec uses doWithSpring to define ExternalConfigLoader bean, so that it runs during Grails application \nlifecycle.\nIf the test overrides doWithSpring, the method in trait will not run. So the test class should explicitely call ExternalConfigAwareSpec\n.super.doWithSpring",
            "title": "ExternalConfigAwareSpec"
        },
        {
            "location": "/api-docs/",
            "text": "The Groovy/Java Docs API can be found here\n\n\nhttps://yakworks.github.io/gorm-tools/api/",
            "title": "API Docs"
        },
        {
            "location": "/usefulLinks/",
            "text": "DDD\n\u00b6\n\n\nReferences\n\u00b6\n\n\nhttp://blog.sapiensworks.com/post/2015/05/25/DDD-Concepts-As-One-Liners\n\n\nhttps://stackoverflow.com/questions/2378069/ddd-with-grails\n)\n\n\nhttp://static.olivergierke.de/lectures/ddd-and-spring/\n\n\nhttps://www.slideshare.net/cyriux/ddd-patterns-that-were-not-in-the-book\n\n\nRepository\n\u00b6\n\n\nhttps://martinfowler.com/eaaCatalog/repository.html\n\n\nhttp://blog.sapiensworks.com/post/2014/06/02/The-Repository-Pattern-For-Dummies.aspx\n\n\nhttp://gorodinski.com/blog/2012/04/14/services-in-domain-driven-design-ddd/",
            "title": "Useful Links"
        },
        {
            "location": "/usefulLinks/#ddd",
            "text": "",
            "title": "DDD"
        },
        {
            "location": "/usefulLinks/#references",
            "text": "http://blog.sapiensworks.com/post/2015/05/25/DDD-Concepts-As-One-Liners  https://stackoverflow.com/questions/2378069/ddd-with-grails )  http://static.olivergierke.de/lectures/ddd-and-spring/  https://www.slideshare.net/cyriux/ddd-patterns-that-were-not-in-the-book",
            "title": "References"
        },
        {
            "location": "/usefulLinks/#repository",
            "text": "https://martinfowler.com/eaaCatalog/repository.html  http://blog.sapiensworks.com/post/2014/06/02/The-Repository-Pattern-For-Dummies.aspx  http://gorodinski.com/blog/2012/04/14/services-in-domain-driven-design-ddd/",
            "title": "Repository"
        }
    ]
}