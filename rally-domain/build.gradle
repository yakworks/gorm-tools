apply plugin: "yakworks.grails-plugin"

apply from: "${rootDir}/gradle/gorm-lib.gradle"
apply from: "${rootDir}/gradle/test-integration.gradle"

dependencies {

  compileOnly "org.springframework.boot:spring-boot-starter-web"

  //transitive spring security
  //compileOnly "org.springframework.boot:spring-boot-starter-oauth2-resource-server"

  api project(":gorm-tools")
  api project(":gorm-audit")
  api project(":boot-security-gorm")
  api project(":gorm-etl")

  //api "org.yakworks:grails-external-config:$vSpringGrailsKit"
  api 'jakarta.annotation:jakarta.annotation-api:2.1.0'

  //lock the compatible hibernate version here
  api "org.grails:grails-datastore-gorm-hibernate5:$vGormHibernate"
  api "org.grails.plugins:hibernate5:$vGormHibernate"
  api "org.hibernate:hibernate-core:$vHibernate"

  //Hazelcast and Caffeine
  //runtimeOnly "com.hazelcast:hazelcast-hibernate53:$vHazelcastHib"
  compileOnly "com.hazelcast:hazelcast:$vHazelcast"
  compileOnly "com.hazelcast:hazelcast-spring:$vHazelcast"
  compileOnly "com.github.ben-manes.caffeine:caffeine:$vCaffeine"
  compileOnly("org.apache.ignite:ignite-core:$vIgnite")
  compileOnly("org.apache.ignite:ignite-spring-cache-ext:$vIgniteSpringCache")

  //mailgun
  api 'com.mailgun:mailgun-java:1.0.7'
  //to use the InternetAddress for validating emails
  api "javax.mail:javax.mail-api:1.6.2"
  api "com.sun.mail:javax.mail:1.6.2"

  //WIP for s3 paths
  compileOnly platform('software.amazon.awssdk:bom:2.20.56')
  compileOnly 'software.amazon.awssdk:s3:'
  compileOnly 'software.amazon.nio.s3:aws-java-nio-spi-for-s3:1.2.4'
  // compileOnly 'org.carlspring.cloud.aws:s3fs-nio:1.0.2'

  compileOnly "org.grails:grails-core"

  testRuntimeOnly "org.springframework.boot:spring-boot-autoconfigure"
  testRuntimeOnly "org.springframework.boot:spring-boot-starter-tomcat"
  //testImplementation "io.micronaut.spring:micronaut-spring:4.2.2"
  testImplementation project(":gorm-test-domain")
}

test {
  maxParallelForks = 4
}

bootRun {
  ignoreExitValue true
  jvmArgs(
    '-Dspring.output.ansi.enabled=always',
    '-noverify',
    '-XX:TieredStopAtLevel=1',
    '-Xmx1024m',
    '--illegal-access=permit', '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
  )

  sourceResources sourceSets.main
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

//BootStrap fires for some reason in 4.x so exclude it
// jar {
//   exclude('yakworks/rally/BootStrap.class')
//   exclude('yakworks/rally/BootStrap$*.class')
// }

// sourceSets.main.resources.srcDirs += "src/main/groovy"

// task printSourceSetInformation(){
//   doLast{
//     println "["+sourceSets.main.name+"]"
//     println "${sourceSets.main.resources.srcDirs}"
//     // sourceSets.each { srcSet ->
//     //   println "["+srcSet.name+"]"
//     //   print "-->Source directories: "+srcSet.allResources.srcDirs+"\n"
//     //   print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
//     //   println ""
//     // }
//   }
// }



tasks.register("verifyNoSnapshots") {
  group = "verification"
  description = "Check whether there are any SNAPSHOT dependencies."
  doLast {
    def snapshotsList = project.configurations
      .findAll { it.name == "compileClasspath" || it.name == "runtimeClasspath" }
      .findAll { it.canBeResolved }
      .resolvedConfiguration.resolvedArtifacts.flatten()
      .findAll { it.moduleVersion.id.version.endsWith('-SNAPSHOT') }.unique()
    // println "checkSnapshots"
    // println snapshotsList
    if (!snapshotsList.isEmpty()) {
      throw new GradleException("Please get rid of snapshots for following dependencies before releasing $snapshotsList")
    }
  }
}

processResources {
  filesMatching('**/org.codehaus.groovy.runtime.ExtensionModule') {
    expand([
      moduleVersion: version
    ])
  }
}
